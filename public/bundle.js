!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=98)}([function(e,t,n){"use strict";e.exports=n(99)},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(108);e.exports=function(e,t){if(null==e)return{};var n,a,o=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},function(e,t,n){"use strict";function r(e){var t,n,a="";if(e)if("object"==typeof e)if(e.push)for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(n=r(t))&&(a&&(a+=" "),a+=n);else"boolean"==typeof e||e.call||(a&&(a+=" "),a+=e);return a}t.a=function(){for(var e,t=0,n="";t<arguments.length;)(e=r(arguments[t++]))&&(n&&(n+=" "),n+=e);return n}},function(e,t,n){e.exports=n(106)()},function(e,t,n){"use strict";var r=n(1),a=n.n(r),o=n(2),i=n.n(o),l=n(0),u=n.n(l),s=(n(4),n(35)),c=n.n(s),f=n(186);var d=function(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var a,o=t.props[n];for(a in o)void 0===r[a]&&(r[a]=o[a]);return r},p=n(187),m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,o=t.withTheme,l=void 0!==o&&o,s=t.name,m=i()(t,["defaultTheme","withTheme","name"]),h=s,v=Object(f.a)(e,a()({defaultTheme:r,Component:n,name:s||n.displayName,classNamePrefix:h},m)),y=u.a.forwardRef(function(e,t){e.classes;var o,c=e.innerRef,f=i()(e,["classes","innerRef"]),m=v(e),h=f;return("string"==typeof s||l)&&(o=Object(p.a)()||r,s&&(h=d({theme:o,name:s,props:f})),l&&!h.theme&&(h.theme=o)),u.a.createElement(n,a()({ref:c||t,classes:m},h))});return c()(y,n),y}},h=n(36);t.a=function(e,t){return m(e,a()({defaultTheme:h.a},t))}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return a});n(13);function r(e){return e.charAt(0).toUpperCase()+e.slice(1)}function a(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce(function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}},function(){})}},function(e,t,n){var r=n(112),a=n(113),o=n(114);e.exports=function(e,t){return r(e)||a(e,t)||o()}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(100)},function(e,t,n){"use strict";n.d(t,"c",function(){return i}),n.d(t,"b",function(){return u}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return c});n(13);function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function a(e){if(e.type)return e;if("#"===e.charAt(0))return a(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(["Material-UI: unsupported `".concat(e,"` color."),"We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."].join("\n"));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function o(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map(function(e,t){return t<3?parseInt(e,10):e}):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function i(e,t){var n=l(e),r=l(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function l(e){var t="hsl"===(e=a(e)).type?a(function(e){var t=(e=a(e)).values,n=t[0],r=t[1]/100,i=t[2]/100,l=r*Math.min(i,1-i),u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return i-l*Math.max(Math.min(t-3,9-t,1),-1)},s="rgb",c=[Math.round(255*u(0)),Math.round(255*u(8)),Math.round(255*u(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),o({type:s,values:c})}(e)).values:e.values;return t=t.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e,t){return e=a(e),t=r(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,o(e)}function s(e,t){if(e=a(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return o(e)}function c(e,t){if(e=a(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return o(e)}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";(function(e){n.d(t,"e",function(){return pe}),n.d(t,"b",function(){return me}),n.d(t,"d",function(){return de}),n.d(t,"f",function(){return d}),n.d(t,"c",function(){return c}),n.d(t,"a",function(){return H});var r=n(6),a=n(37),o=(n(27),n(50)),i=n(12),l=n(38),u={}.constructor;function s(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(s);if(e.constructor!==u)return e;var t={};for(var n in e)t[n]=s(e[n]);return t}function c(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,a=s(t),o=r.plugins.onCreateRule(e,a,n);return o||(e[0],null)}var f=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function d(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=f(e[r]," ");else n=f(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function p(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function m(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var a=n.indent,o=void 0===a?0:a,i=t.fallbacks;if(e&&o++,i)if(Array.isArray(i))for(var l=0;l<i.length;l++){var u=i[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+p(s+": "+d(c)+";",o))}}else for(var f in i){var m=i[f];null!=m&&(r&&(r+="\n"),r+=""+p(f+": "+d(m)+";",o))}for(var h in t){var v=t[h];null!=v&&"fallbacks"!==h&&(r&&(r+="\n"),r+=""+p(h+": "+d(v)+";",o))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),p(e+" {"+r,--o)+p("}",o)):r}var h=/([[\].#*$><+~=|^:(),"'`\s])/g,v="undefined"!=typeof CSS&&CSS.escape,y=function(e){return v?v(e):e.replace(h,"\\$1")},b=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,a=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:a&&(this.renderer=new a)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var a=t;n&&!1===n.process||(a=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==a||!1===a,i=e in this.style;if(o&&!i&&!r)return this;var l=o&&i;if(l?delete this.style[e]:this.style[e]=a,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,a),this;var u=this.options.sheet;return u&&u.attached,this},e}(),g=function(e){function t(t,n,r){var a;(a=e.call(this,t,n,r)||this).selectorText=void 0,a.id=void 0,a.renderable=void 0;var o=r.selector,i=r.scoped,u=r.sheet,s=r.generateId;return o?a.selectorText=o:!1!==i&&(a.id=s(Object(l.a)(Object(l.a)(a)),u),a.selectorText="."+y(a.id)),a}Object(i.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=d(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return m(this.selectorText,this.style,n)},Object(o.a)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(b),x={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new g(e,t,n)}},w={indent:1,children:!0},E=/@([\w-]+)/,k=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var a=e.match(E);for(var o in this.at=a?a[1]:"unknown",this.options=n,this.rules=new H(Object(r.a)({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=w),!1===e.children)return this.key+" {}";var t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""},e}(),S=/@media|@supports\s+/,C={onCreateRule:function(e,t,n){return S.test(e)?new k(e,t,n):null}},T={indent:1,children:!0},P=/@keyframes\s+([\w-]+)/,O=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var a=e.match(P);a&&a[1]?this.name=a[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var o=n.scoped,i=n.sheet,l=n.generateId;for(var u in this.id=!1===o?this.name:y(l(this,i)),this.rules=new H(Object(r.a)({},n,{parent:this})),t)this.rules.add(u,t[u],Object(r.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=T),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),j=/@keyframes\s+/,R=/\$([\w-]+)/g,N=function(e,t){return"string"==typeof e?e.replace(R,function(e,n){return n in t?t[n]:e}):e},_=function(e,t,n){var r=e[t],a=N(r,n);a!==r&&(e[t]=a)},A={onCreateRule:function(e,t,n){return"string"==typeof e&&j.test(e)?new O(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&_(e,"animation-name",n.keyframes),"animation"in e&&_(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return N(e,r.keyframes);default:return e}}},M=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(i.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(r.a)({},e,{allowEmpty:!0}):e;return m(this.key,this.style,n)},t}(b),I={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new M(e,t,n):null}},L=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=m(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return m(this.key,this.style,e)},e}(),D={onCreateRule:function(e,t,n){return"@font-face"===e?new L(e,t,n):null}},z=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return m(this.key,this.style,e)},e}(),F={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new z(e,t,n):null}},B=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),U={"@charset":!0,"@import":!0,"@namespace":!0},W=[x,C,A,I,D,F,{onCreateRule:function(e,t,n){return e in U?new B(e,t,n):null}}],V={process:!0},K={force:!0,process:!0},H=function(){function e(e){this.map={},this.raw={},this.index=[],this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var a=this.options,o=a.parent,i=a.sheet,l=a.jss,u=a.Renderer,s=a.generateId,f=a.scoped,d=Object(r.a)({classes:this.classes,parent:o,sheet:i,jss:l,Renderer:u,generateId:s,scoped:f},n);this.raw[e]=t,e in this.classes&&(d.selector="."+y(this.classes[e]));var p=c(e,t,d);if(!p)return null;this.register(p);var m=void 0===d.index?this.index.length:d.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof g?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof O&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof g?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof O&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.onUpdate(t,this.get(e),n);else for(var r=0;r<this.index.length;r++)this.onUpdate(t,this.index[r],n)},t.onUpdate=function(t,n,r){void 0===r&&(r=V);var a=this.options,o=a.jss.plugins,i=a.sheet;if(n.rules instanceof e)n.rules.update(t,r);else{var l=n,u=l.style;if(o.onUpdate(t,n,i,r),r.process&&u&&u!==l.style){for(var s in o.onProcessStyle(l.style,l,i),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,K)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,K)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,a=0;a<this.index.length;a++){var o=this.index[a].toString(e);(o||r)&&(t&&(t+="\n"),t+=o)}return t},e}(),$=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(r.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new H(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached?this:(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy(),this)},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var a=this.rules.add(e,t,n);return a?(this.options.jss.plugins.onProcessRule(a),this.attached?this.deployed?(r?r.push(a):(this.insertRule(a),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),a):a:(this.deployed=!1,a)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var a=this.addRule(r,e[r],t);a&&n.push(a)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.toString=function(e){return this.rules.toString(e)},e}(),q=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var a=this.registry.onCreateRule[r](e,t,n);if(a)return a}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var a=0;a<this.registry.onUpdate.length;a++)this.registry.onUpdate[a](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,a=0;a<this.registry.onChangeValue.length;a++)r=this.registry.onChangeValue[a](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce(function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e},{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),X=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){return this.registry.filter(function(e){return e.attached}).map(function(t){return t.toString(e)}).join("\n")},Object(o.a)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),G=void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},J="2f1acc6c3a606b082e5eef5e54414ffb";null==G[J]&&(G[J]=0);var Q=G[J]++,Y=function(e){void 0===e&&(e={});var t=0,n=e.minify?"c":"";return function(r,a){t+=1;var o=n,i="";return a&&(o=a.options.classNamePrefix||n,null!=a.options.jss.id&&(i+=a.options.jss.id)),e.minify?""+o+Q+i+t:o+r.key+"-"+Q+(i&&"-"+i)+"-"+t}},Z=function(e){var t;return function(){return t||(t=e()),t}};function ee(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function te(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=d(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function ne(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function re(e,t){return e.selectorText=t,e.selectorText===t}var ae=Z(function(){return document.querySelector("head")});function oe(e){var t=X.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var a=function(e){for(var t=ae(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(a)return{parent:a.parentNode,node:a.nextSibling}}return!1}var ie=Z(function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null}),le=function(e,t,n){void 0===n&&(n=e.cssRules.length);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},ue=function(){var e=document.createElement("style");return e.textContent="\n",e},se=function(){function e(e){this.getPropertyValue=ee,this.setProperty=te,this.removeProperty=ne,this.setSelector=re,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&X.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,a=t.element;this.element=a||ue(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var o=ie();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){!this.element.parentNode&&this.sheet&&(!function(e,t){var n=t.insertionPoint,r=oe(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var a=n,o=a.parentNode;o&&o.insertBefore(e,a.nextSibling)}else ae().appendChild(e)}(this.element,this.sheet.options),this.hasInsertedRules&&(this.hasInsertedRules=!1,this.deploy()))},t.detach=function(){this.element.parentNode.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,a=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(a=le(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,a),a)}var o=e.toString();if(!o)return!1;var i=le(n,o,t);return!1!==i&&(this.hasInsertedRules=!0,e.renderable=i,i)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ce=0,fe=function(){function e(e){this.id=ce++,this.version="10.0.0-alpha.17",this.plugins=new q,this.options={id:{minify:!1},createGenerateId:Y,Renderer:a.a?se:null,plugins:[]},this.generateId=Y({minify:!1});for(var t=0;t<W.length;t++)this.plugins.use(W[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(r.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===X.index?0:X.index+1);var a=new $(e,Object(r.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(a),a},t.removeStyleSheet=function(e){return e.detach(),X.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var a=Object(r.a)({},n,{jss:this,Renderer:this.options.Renderer});a.generateId||(a.generateId=this.generateId),a.classes||(a.classes={}),a.keyframes||(a.keyframes={});var o=c(e,t,a);return o&&this.plugins.onProcessRule(o),o},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach(function(t){e.plugins.use(t)}),this},e}();function de(e){var t=null;for(var n in e){var r=e[n],a=typeof r;if("function"===a)t||(t={}),t[n]=r;else if("object"===a&&null!==r&&!Array.isArray(r)){var o=de(r);o&&(t||(t={}),t[n]=o)}}return t}var pe="undefined"!=typeof CSS&&CSS&&"number"in CSS,me=function(e){return new fe(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */me()}).call(this,n(56))},function(e,t,n){"use strict";var r=n(66),a=n(127),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function l(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===o.call(e)}function s(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:a,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,a=arguments.length;r<a;r++)s(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,a=arguments.length;r<a;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},,function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=o.default.memo(o.default.forwardRef(function(t,n){return o.default.createElement(i.default,(0,a.default)({},t,{ref:n}),e)}));0;return n.muiName=i.default.muiName,n};var a=r(n(1)),o=r(n(0)),i=r(n(74))},,function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([a]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var o=this[a][0];null!=o&&(r[o]=!0)}for(a=0;a<e.length;a++){var i=e[a];null!=i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var r,a,o={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,s=0,c=[],f=n(105);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(b(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(b(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},a=0;a<e.length;a++){var o=e[a],i=t.base?o[0]+t.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function m(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(e.insertAt.before,n);n.insertBefore(t,a)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return y(t,e.attrs),m(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,a,o;if(t.transform&&e.css){if(!(o="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=o}if(t.singleton){var i=s++;n=u||(u=v(t)),r=w.bind(null,n,i,!1),a=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,a=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||o)&&(r=f(r));a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),a=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a];(l=o[i.id]).refs--,r.push(l)}e&&d(p(e,t),t);for(a=0;a<r.length;a++){var l;if(0===(l=r[a]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete o[l.id]}}}};var g,x=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var n=Object.prototype.toString.call(e);return"[object RegExp]"===n||"[object Date]"===n||function(e){return e.$$typeof===t}(e)}(e)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(e,t){return!1!==t.clone&&t.isMergeableObject(e)?o((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function r(e,t,r){return e.concat(t).map(function(e){return n(e,r)})}function a(e,t,r){var a={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(t){a[t]=n(e[t],r)}),Object.keys(t).forEach(function(i){r.isMergeableObject(t[i])&&e[i]?a[i]=function(e,t){if(!t.customMerge)return o;var n=t.customMerge(e);return"function"==typeof n?n:o}(i,r)(e[i],t[i],r):a[i]=n(t[i],r)}),a}function o(t,o,i){(i=i||{}).arrayMerge=i.arrayMerge||r,i.isMergeableObject=i.isMergeableObject||e;var l=Array.isArray(o),u=Array.isArray(t),s=l===u;return s?l?i.arrayMerge(t,o,i):a(t,o,i):n(o,i)}return o.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return o(e,n,t)},{})},o}()},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t){function n(e,t,n){var r,a,o,i,l;function u(){var s=Date.now()-i;s<t&&s>=0?r=setTimeout(u,t-s):(r=null,n||(l=e.apply(o,a),o=a=null))}null==t&&(t=100);var s=function(){o=this,a=arguments,i=Date.now();var s=n&&!r;return r||(r=setTimeout(u,t)),s&&(l=e.apply(o,a),o=a=null),l};return s.clear=function(){r&&(clearTimeout(r),r=null)},s.flush=function(){r&&(l=e.apply(o,a),o=a=null,clearTimeout(r),r=null)},s}n.debounce=n,e.exports=n},function(e,t,n){var r=n(115),a=n(116),o=n(117);e.exports=function(e){return r(e)||a(e)||o()}},function(e,t,n){"use strict";var r=!0;t.a=function(e,t){if(!r){if(e)return;var n="Warning: "+t;"undefined"!=typeof console&&console.warn(n);try{throw Error(n)}catch(e){}}}},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){var r=n(28),a=n(32);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?a(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(110);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},,function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";var r=n(44),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),v=0;v<i.length;++v){var y=i[v];if(!(o[y]||r&&r[y]||h&&h[y]||l&&l[y])){var b=d(n,y);try{s(t,y,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";var r=n(9),a=n.n(r),o=n(1),i=n.n(o),l=n(2),u=n.n(l),s=n(22),c=n.n(s);
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function f(e){return!0==(null!=(t=e)&&"object"==typeof t&&!1===Array.isArray(t))&&"[object Object]"===Object.prototype.toString.call(e);
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var t}function d(e){var t,n;return!1!==f(e)&&("function"==typeof(t=e.constructor)&&(!1!==f(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}n(13);var p=n(45);function m(e,t,n){var r;return i()({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i()({paddingLeft:t(2),paddingRight:t(2)},n,a()({},e.up("sm"),i()({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},a()(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),a()(r,e.up("sm"),{minHeight:64}),r)},n)}var h={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},v={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},y={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},b={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},g={black:"#000",white:"#fff"},x=n(11),w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:g.white,default:y[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}},E={text:{primary:g.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:y[800],default:"#303030"},action:{active:g.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function k(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(x.d)(e.main,r):"dark"===t&&(e.dark=Object(x.a)(e.main,1.5*r)))}function S(e){return Math.round(1e5*e)/1e5}var C={textTransform:"uppercase"},T='"Roboto", "Helvetica", "Arial", sans-serif';function P(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,a=void 0===r?T:r,o=n.fontSize,l=void 0===o?14:o,s=n.fontWeightLight,f=void 0===s?300:s,d=n.fontWeightRegular,p=void 0===d?400:d,m=n.fontWeightMedium,h=void 0===m?500:m,v=n.fontWeightBold,y=void 0===v?700:v,b=n.htmlFontSize,g=void 0===b?16:b,x=n.allVariants,w=u()(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants"]),E=l/14,k=function(e){return"".concat(e/g*E,"rem")},P=function(e,t,n,r,o){return i()({fontFamily:a,fontWeight:e,fontSize:k(t),lineHeight:n},a===T?{letterSpacing:"".concat(S(r/t),"em")}:{},o,x)},O={h1:P(f,96,1,-1.5),h2:P(f,60,1,-.5),h3:P(p,48,1.04,0),h4:P(p,34,1.17,.25),h5:P(p,24,1.33,0),h6:P(h,20,1.6,.15),subtitle1:P(p,16,1.75,.15),subtitle2:P(h,14,1.57,.1),body1:P(p,16,1.5,.15),body2:P(p,14,1.43,.15),button:P(h,14,1.75,.4,C),caption:P(p,12,1.66,.4),overline:P(p,12,2.66,1,C)};return c()(i()({htmlFontSize:g,pxToRem:k,round:S,fontFamily:a,fontSize:l,fontWeightLight:f,fontWeightRegular:p,fontWeightMedium:h,fontWeightBold:y},O),w,{clone:!1})}var O=.2,j=.14,R=.12;function N(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(O,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(j,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(R,")")].join(",")}var _=["none",N(0,1,3,0,0,1,1,0,0,2,1,-1),N(0,1,5,0,0,2,2,0,0,3,1,-2),N(0,1,8,0,0,3,4,0,0,3,3,-2),N(0,2,4,-1,0,4,5,0,0,1,10,0),N(0,3,5,-1,0,5,8,0,0,1,14,0),N(0,3,5,-1,0,6,10,0,0,1,18,0),N(0,4,5,-2,0,7,10,1,0,2,16,1),N(0,5,5,-3,0,8,10,1,0,3,14,2),N(0,5,6,-3,0,9,12,1,0,3,16,2),N(0,6,6,-3,0,10,14,1,0,4,18,3),N(0,6,7,-4,0,11,15,1,0,4,20,3),N(0,7,8,-4,0,12,17,2,0,5,22,4),N(0,7,8,-4,0,13,19,2,0,5,24,4),N(0,7,9,-4,0,14,21,2,0,5,26,4),N(0,8,9,-5,0,15,22,2,0,6,28,5),N(0,8,10,-5,0,16,24,2,0,6,30,5),N(0,8,11,-5,0,17,26,2,0,6,32,5),N(0,9,11,-5,0,18,28,2,0,7,34,6),N(0,9,12,-6,0,19,29,2,0,7,36,6),N(0,10,13,-6,0,20,31,3,0,8,38,7),N(0,10,13,-6,0,21,33,3,0,8,40,7),N(0,10,14,-6,0,22,35,3,0,8,42,7),N(0,11,14,-7,0,23,36,3,0,9,44,8),N(0,11,15,-7,0,24,38,3,0,9,46,8)],A={borderRadius:4};var M={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},I={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195},L=function(e){return"".concat(Math.round(e),"ms")},D={easing:M,duration:I,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?I.standard:n,a=t.easing,o=void 0===a?M.easeInOut:a,i=t.delay,l=void 0===i?0:i;u()(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:L(r)," ").concat(o," ").concat("string"==typeof l?l:L(l))}).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},z=n(46);var F=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,a=void 0===r?{}:r,o=e.palette,l=void 0===o?{}:o,s=e.shadows,f=e.spacing,S=e.typography,C=void 0===S?{}:S,T=u()(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),O=function(e){var t=e.primary,n=void 0===t?{light:h[300],main:h[500],dark:h[700]}:t,r=e.secondary,a=void 0===r?{light:v.A200,main:v.A400,dark:v.A700}:r,o=e.error,l=void 0===o?{light:b[300],main:b[500],dark:b[700]}:o,s=e.type,f=void 0===s?"light":s,d=e.contrastThreshold,p=void 0===d?3:d,m=e.tonalOffset,S=void 0===m?.2:m,C=u()(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function T(e){return Object(x.c)(e,E.text.primary)>=p?E.text.primary:w.text.primary}function P(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!(e=i()({},e)).main&&e[t]&&(e.main=e[t]),k(e,"light",n,S),k(e,"dark",r,S),e.contrastText||(e.contrastText=T(e.main)),e}var O={dark:E,light:w};return c()(i()({common:g,type:f,primary:P(n),secondary:P(a,"A400","A200","A700"),error:P(l),grey:y,contrastThreshold:p,getContrastText:T,augmentColor:P,tonalOffset:S},O[f]),C,{clone:!1})}(l),j=Object(p.a)(n),R=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(t.mui)return t;e="function"==typeof t?t:function(e){return t*e};var n=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return 0===n.length?e(1):1===n.length?e(n[0]):n.map(function(t){var n=e(t);return"number"==typeof n?"".concat(n,"px"):n}).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return t}}),n.mui=!0,n}(f);return i()({breakpoints:j,direction:"ltr",mixins:m(j,R,a),overrides:{},palette:O,props:{},shadows:s||_,typography:P(O,C),spacing:R},c()({shape:A,transitions:D,zIndex:z.a},T,{isMergeableObject:d}))}();t.a=F},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.a=a},function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",function(){return r})},,,,,,function(e,t,n){"use strict";e.exports=n(109)},function(e,t,n){"use strict";n.d(t,"b",function(){return l}),n.d(t,"a",function(){return u});var r=n(1),a=n.n(r),o=n(2),i=n.n(o),l=["xs","sm","md","lg","xl"];function u(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,u=e.step,s=void 0===u?5:u,c=i()(e,["values","unit","step"]);function f(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function d(e,t){var r=l.indexOf(t)+1;return r===l.length?f(e):"@media (min-width:".concat(n[e]).concat(o,") and ")+"(max-width:".concat(n[l[r]]-s/100).concat(o,")")}return a()({keys:l,values:n,up:f,down:function(e){var t=l.indexOf(e)+1,r=n[l[t]];return t===l.length?f("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(o,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},c)}},function(e,t,n){"use strict";t.a={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},function(e,t,n){"use strict";var r=n(44),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),v=0;v<i.length;++v){var y=i[v];if(!(o[y]||r&&r[y]||h&&h[y]||l&&l[y])){var b=d(n,y);try{s(t,y,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Search");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Refresh");t.default=o},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,"a",function(){return a})},,,,,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(122);e.exports=p,e.exports.parse=o,e.exports.compile=function(e,t){return l(o(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,l="",c=t&&t.delimiter||"/";null!=(n=a.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var m=e[i],h=n[2],v=n[3],y=n[4],b=n[5],g=n[6],x=n[7];l&&(r.push(l),l="");var w=null!=h&&null!=m&&m!==h,E="+"===g||"*"===g,k="?"===g||"*"===g,S=n[2]||c,C=y||b;r.push({name:v||o++,prefix:h||"",delimiter:S,optional:k,repeat:E,partial:w,asterisk:!!x,pattern:C?s(C):x?".*":"[^"+u(S)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,a){for(var o="",l=n||{},u=(a||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):u(d),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');o+=c.prefix+f}}else o+=c}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)i+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),i+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var m=u(n.delimiter||"/"),h=i.slice(-m.length)===m;return a||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=o?"$":a&&h?"":"(?="+m+"|$)",c(new RegExp("^"+i,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(p(e[a],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(o(e,n),t,n)}(e,t,n)}},,,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))a.call(n,s)&&(l[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)o.call(n,i[c])&&(l[i[c]]=n[i[c]])}}return l}},function(e,t,n){"use strict";var r=n(1),a=n.n(r),o=n(2),i=n.n(o),l=n(0),u=n.n(l),s=(n(4),n(3)),c=n(5),f=n(7),d=u.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,l=e.color,c=void 0===l?"inherit":l,d=e.component,p=void 0===d?"svg":d,m=e.fontSize,h=void 0===m?"default":m,v=e.htmlColor,y=e.titleAccess,b=e.viewBox,g=void 0===b?"0 0 24 24":b,x=i()(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return u.a.createElement(p,a()({className:Object(s.a)(r.root,o,"inherit"!==c&&r["color".concat(Object(f.a)(c))],"default"!==h&&r["fontSize".concat(Object(f.a)(h))]),focusable:"false",viewBox:g,color:v,"aria-hidden":y?"false":"true",role:y?"img":"presentation",ref:t},x),n,y?u.a.createElement("title",null,y):null)});d.muiName="SvgIcon",t.a=Object(c.a)(function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}},{name:"MuiSvgIcon"})(d)},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(15);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var i=[];r.forEach(t,function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(a(t)+"="+a(e))}))}),o=i.join("&")}if(o){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(15),a=n(133),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?l=n(70):"undefined"!=typeof XMLHttpRequest&&(l=n(70)),l),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){u.headers[e]={}}),r.forEach(["post","put","patch"],function(e){u.headers[e]=r.merge(o)}),e.exports=u}).call(this,n(132))},function(e,t,n){"use strict";var r=n(15),a=n(134),o=n(67),i=n(136),l=n(137),u=n(71);e.exports=function(e){return new Promise(function(t,s){var c=e.data,f=e.headers;r.isFormData(c)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",m=e.auth.password||"";f.Authorization="Basic "+btoa(p+":"+m)}if(d.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?i(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};a(t,s,r),d=null}},d.onabort=function(){d&&(s(u("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){s(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){s(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var h=n(138),v=(e.withCredentials||l(e.url))&&e.xsrfCookieName?h.read(e.xsrfCookieName):void 0;v&&(f[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&r.forEach(f,function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),s(e),d=null)}),void 0===c&&(c=null),d.send(c)})}},function(e,t,n){"use strict";var r=n(135);e.exports=function(e,t,n,a,o){var i=new Error(e);return r(i,t,n,a,o)}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],function(e){void 0!==t[e]&&(n[e]=t[e])}),r.forEach(["headers","auth","proxy"],function(a){r.isObject(t[a])?n[a]=r.deepMerge(e[a],t[a]):void 0!==t[a]?n[a]=t[a]:r.isObject(e[a])?n[a]=r.deepMerge(e[a]):void 0!==e[a]&&(n[a]=e[a])}),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";n.r(t);var r=n(64);n.d(t,"default",function(){return r.a})},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(23)),o=r(n(24)),i=r(n(29)),l=r(n(30)),u=r(n(31)),s=r(n(28)),c=r(n(2)),f=r(n(1)),d=r(n(0));r(n(4)),r(n(111));var p,m=(p=null,function(){if(null!==p)return p;var e,t,n,r=!1;try{window.addEventListener("test",null,(e={},t="passive",n={get:function(){r=!0}},Object.defineProperty(e,t,n)))}catch(e){}return p=r,r}()),h={capture:!1,passive:!1};function v(e){return f({},h,e)}function y(e,t,n){var r=[e,t];return r.push(m?n:n.capture),r}function b(e,t,n,r){e.addEventListener.apply(e,y(t,n,r))}function g(e,t,n,r){e.removeEventListener.apply(e,y(t,n,r))}var x=function(e){function t(){return a(this,t),i(this,l(t).apply(this,arguments))}return u(t,e),o(t,[{key:"componentDidMount",value:function(){this.applyListeners(b)}},{key:"componentDidUpdate",value:function(e){this.applyListeners(g,e),this.applyListeners(b)}},{key:"componentWillUnmount",value:function(){this.applyListeners(g)}},{key:"applyListeners",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props,n=t.target;if(n){var r=n;"string"==typeof n&&(r=window[n]),function(e,t){e.children,e.target;var n=c(e,["children","target"]);Object.keys(n).forEach(function(e){if("on"===e.substring(0,2)){var r=n[e],a=s(r),o="object"===a;if(o||"function"===a){var i="capture"===e.substr(-7).toLowerCase(),l=e.substring(2).toLowerCase();l=i?l.substring(0,l.length-7):l,o?t(l,r.handler,r.options):t(l,r,v({capture:i}))}}})}(t,e.bind(null,r))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(d.PureComponent);x.propTypes={},t.withOptions=function(e,t){return{handler:e,options:v(t)}},t.default=x},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(0)),a=o(n(118));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||a.default,e.exports=t.default},function(e,t,n){"use strict";var r=n(44),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),v=0;v<i.length;++v){var y=i[v];if(!(o[y]||r&&r[y]||h&&h[y]||l&&l[y])){var b=d(n,y);try{s(t,y,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Home");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Person");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"VolumeUp");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.default.createElement("path",{d:"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"})),"Group");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.default.createElement("path",{d:"M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z"})),"Accessibility");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Sort");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Delete");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.default.createElement("path",{d:"M6 6h12v12H6z"})),"Stop");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.default.createElement("path",{d:"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.97.89 1.66.89H22c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 13.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"})),"More");t.default=o},function(e,t,n){"use strict";var r=n(16);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=(0,r(n(18)).default)(a.default.createElement(a.default.Fragment,null,a.default.createElement("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),a.default.createElement("path",{fill:"none",d:"M0 0h24v24H0z"})),"Add");t.default=o},,,,,,,,,,,function(e,t,n){e.exports=n(159)},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(63),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,l=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,s=a?Symbol.for("react.profiler"):60114,c=a?Symbol.for("react.provider"):60109,f=a?Symbol.for("react.context"):60110,d=a?Symbol.for("react.concurrent_mode"):60111,p=a?Symbol.for("react.forward_ref"):60112,m=a?Symbol.for("react.suspense"):60113,h=a?Symbol.for("react.memo"):60115,v=a?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,a,o,i,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,o,i,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function w(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||g}function E(){}function k(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||g}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var S=k.prototype=new E;S.constructor=k,r(S,w.prototype),S.isPureReactComponent=!0;var C={current:null},T={current:null},P=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function j(e,t,n){var r=void 0,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)P.call(t,r)&&!O.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:T.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var N=/\/+/g,_=[];function A(e,t,n,r){if(_.length){var a=_.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>_.length&&_.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,a){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case i:u=!0}}if(u)return r(a,t,""===n?"."+L(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+L(l=t[s],s);u+=e(l,c,r,a)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=y&&t[y]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+L(l,s++),r,a);else"object"===l&&b("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(R(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(N,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(N,"$&/")+"/"),I(e,z,t=A(t,o,r,a)),M(t)}function B(){var e=C.current;return null===e&&b("321"),e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,D,t=A(null,null,t,n)),M(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return R(e)||b("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return B().useCallback(e,t)},useContext:function(e,t){return B().useContext(e,t)},useEffect:function(e,t){return B().useEffect(e,t)},useImperativeHandle:function(e,t,n){return B().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return B().useLayoutEffect(e,t)},useMemo:function(e,t){return B().useMemo(e,t)},useReducer:function(e,t,n){return B().useReducer(e,t,n)},useRef:function(e){return B().useRef(e)},useState:function(e){return B().useState(e)},Fragment:l,StrictMode:u,Suspense:m,createElement:j,cloneElement:function(e,t,n){null==e&&b("267",e);var a=void 0,i=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=T.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(a in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)P.call(t,a)&&!O.hasOwnProperty(a)&&(i[a]=void 0===t[a]&&void 0!==c?c[a]:t[a])}if(1===(a=arguments.length-2))i.children=n;else if(1<a){c=Array(a);for(var f=0;f<a;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:l,ref:u,props:i,_owner:s}},createFactory:function(e){var t=j.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.8.6",unstable_ConcurrentMode:d,unstable_Profiler:s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentOwner:T,assign:r}},W={default:U},V=W&&U||W;e.exports=V.default||V},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),a=n(63),o=n(101);function i(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,a,o,i,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,o,i,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||i("227");var l=!1,u=null,s=!1,c=null,f={onError:function(e){l=!0,u=e}};function d(e,t,n,r,a,o,i,s,c){l=!1,u=null,function(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,m={};function h(){if(p)for(var e in m){var t=m[e],n=p.indexOf(e);if(-1<n||i("96",e),!y[n])for(var r in t.extractEvents||i("97",e),y[n]=t,n=t.eventTypes){var a=void 0,o=n[r],l=t,u=r;b.hasOwnProperty(u)&&i("99",u),b[u]=o;var s=o.phasedRegistrationNames;if(s){for(a in s)s.hasOwnProperty(a)&&v(s[a],l,u);a=!0}else o.registrationName?(v(o.registrationName,l,u),a=!0):a=!1;a||i("98",r,e)}}}function v(e,t,n){g[e]&&i("100",e),g[e]=t,x[e]=t.eventTypes[n].dependencies}var y=[],b={},g={},x={},w=null,E=null,k=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,a,o,f,p,m){if(d.apply(this,arguments),l){if(l){var h=u;l=!1,u=null}else i("198"),h=void 0;s||(s=!0,c=h)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&i("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var j={injectEventPluginOrder:function(e){p&&i("101"),p=Array.prototype.slice.call(e),h()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&i("102",t),m[t]=r,n=!0)}n&&h()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&i("231",t,typeof n),n)}function N(e){if(null!==e&&(P=C(P,e)),e=P,P=null,e&&(T(e,O),P&&i("95"),s))throw e=c,s=!1,c=null,e}var _=Math.random().toString(36).slice(2),A="__reactInternalInstance$"+_,M="__reactEventHandlers$"+_;function I(e){if(e[A])return e[A];for(;!e[A];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[A]).tag||6===e.tag?e:null}function L(e){return!(e=e[A])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;i("33")}function z(e){return e[M]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function B(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function U(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)B(n[t],"captured",e);for(t=0;t<n.length;t++)B(n[t],"bubbled",e)}}function W(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function V(e){e&&e.dispatchConfig.registrationName&&W(e._targetInst,null,e)}function K(e){T(e,U)}var H=!("undefined"==typeof window||!window.document||!window.document.createElement);function $(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var q={animationend:$("Animation","AnimationEnd"),animationiteration:$("Animation","AnimationIteration"),animationstart:$("Animation","AnimationStart"),transitionend:$("Transition","TransitionEnd")},X={},G={};function J(e){if(X[e])return X[e];if(!q[e])return e;var t,n=q[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return X[e]=n[t];return e}H&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete q.animationend.animation,delete q.animationiteration.animation,delete q.animationstart.animation),"TransitionEvent"in window||delete q.transitionend.transition);var Q=J("animationend"),Y=J("animationiteration"),Z=J("animationstart"),ee=J("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ae=null;function oe(){if(ae)return ae;var e,t,n=re,r=n.length,a="value"in ne?ne.value:ne.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return ae=a.slice(e,1<t?1-t:void 0)}function ie(){return!0}function le(){return!1}function ue(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ie:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function ce(e){e instanceof this||i("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}a(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var de=ue.extend({data:null}),pe=ue.extend({data:null}),me=[9,13,27,32],he=H&&"CompositionEvent"in window,ve=null;H&&"documentMode"in document&&(ve=document.documentMode);var ye=H&&"TextEvent"in window&&!ve,be=H&&(!he||ve&&8<ve&&11>=ve),ge=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function Ee(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var a=void 0,o=void 0;if(he)e:{switch(e){case"compositionstart":a=xe.compositionStart;break e;case"compositionend":a=xe.compositionEnd;break e;case"compositionupdate":a=xe.compositionUpdate;break e}a=void 0}else Se?Ee(e,n)&&(a=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=xe.compositionStart);return a?(be&&"ko"!==n.locale&&(Se||a!==xe.compositionStart?a===xe.compositionEnd&&Se&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,Se=!0)),a=de.getPooled(a,t,n,r),o?a.data=o:null!==(o=ke(n))&&(a.data=o),K(a),o=a):o=null,(e=ye?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(we=!0,ge);case"textInput":return(e=t.data)===ge&&we?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!he&&Ee(e,t)?(e=oe(),ae=re=ne=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(xe.beforeInput,t,n,r)).data=e,K(t)):t=null,null===o?t:null===t?o:[o,t]}},Te=null,Pe=null,Oe=null;function je(e){if(e=E(e)){"function"!=typeof Te&&i("280");var t=w(e.stateNode);Te(e.stateNode,e.type,t)}}function Re(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ne(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,je(e),t)for(e=0;e<t.length;e++)je(t[e])}}function _e(e,t){return e(t)}function Ae(e,t,n){return e(t,n)}function Me(){}var Ie=!1;function Le(e,t){if(Ie)return e(t);Ie=!0;try{return _e(e,t)}finally{Ie=!1,(null!==Pe||null!==Oe)&&(Me(),Ne())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Be(e){if(!H)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Ue(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function We(e){e._valueTracker||(e._valueTracker=function(e){var t=Ue(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ve(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ue(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ke=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ke.hasOwnProperty("ReactCurrentDispatcher")||(Ke.ReactCurrentDispatcher={current:null});var He=/^(.*)[\\\/]/,$e="function"==typeof Symbol&&Symbol.for,qe=$e?Symbol.for("react.element"):60103,Xe=$e?Symbol.for("react.portal"):60106,Ge=$e?Symbol.for("react.fragment"):60107,Je=$e?Symbol.for("react.strict_mode"):60108,Qe=$e?Symbol.for("react.profiler"):60114,Ye=$e?Symbol.for("react.provider"):60109,Ze=$e?Symbol.for("react.context"):60110,et=$e?Symbol.for("react.concurrent_mode"):60111,tt=$e?Symbol.for("react.forward_ref"):60112,nt=$e?Symbol.for("react.suspense"):60113,rt=$e?Symbol.for("react.memo"):60115,at=$e?Symbol.for("react.lazy"):60116,ot="function"==typeof Symbol&&Symbol.iterator;function it(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ot&&e[ot]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ge:return"Fragment";case Xe:return"Portal";case Qe:return"Profiler";case Je:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Ye:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case at:if(e=1===e._status?e._result:null)return lt(e)}return null}function ut(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,o=lt(e.type);n=null,r&&(n=lt(r.type)),r=o,o="",a?o=" (at "+a.fileName.replace(He,"")+":"+a.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){mt[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){mt[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){mt[e]=new pt(e,5,!1,e.toLowerCase(),null)});var ht=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var a=mt.hasOwnProperty(t)?mt[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(st.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function gt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=bt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function Et(e,t){wt(e,t);var n=bt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,bt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function kt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(ht,vt);mt[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(ht,vt);mt[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(ht,vt);mt[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){mt[e]=new pt(e,1,!1,e.toLowerCase(),null)});var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=ue.getPooled(Ct.change,e,t,n)).type="change",Re(n),K(e),e}var Pt=null,Ot=null;function jt(e){N(e)}function Rt(e){if(Ve(D(e)))return e}function Nt(e,t){if("change"===e)return t}var _t=!1;function At(){Pt&&(Pt.detachEvent("onpropertychange",Mt),Ot=Pt=null)}function Mt(e){"value"===e.propertyName&&Rt(Ot)&&Le(jt,e=Tt(Ot,e,Fe(e)))}function It(e,t,n){"focus"===e?(At(),Ot=n,(Pt=t).attachEvent("onpropertychange",Mt)):"blur"===e&&At()}function Lt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Ot)}function Dt(e,t){if("click"===e)return Rt(t)}function zt(e,t){if("input"===e||"change"===e)return Rt(t)}H&&(_t=Be("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ct,_isInputEventSupported:_t,extractEvents:function(e,t,n,r){var a=t?D(t):window,o=void 0,i=void 0,l=a.nodeName&&a.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===a.type?o=Nt:ze(a)?_t?o=zt:(o=Lt,i=It):(l=a.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(o=Dt),o&&(o=o(e,t)))return Tt(o,n,r);i&&i(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&St(a,"number",a.value)}},Bt=ue.extend({view:null,detail:null}),Ut={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Wt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ut[e])&&!!t[e]}function Vt(){return Wt}var Kt=0,Ht=0,$t=!1,qt=!1,Xt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Kt;return Kt=e.screenX,$t?"mousemove"===e.type?e.screenX-t:0:($t=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ht;return Ht=e.screenY,qt?"mousemove"===e.type?e.screenY-t:0:(qt=!0,0)}}),Gt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Jt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qt={eventTypes:Jt,extractEvents:function(e,t,n,r){var a="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(a&&(n.relatedTarget||n.fromElement)||!o&&!a)return null;if(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?I(t):null):o=null,o===t)return null;var i=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(i=Xt,l=Jt.mouseLeave,u=Jt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Gt,l=Jt.pointerLeave,u=Jt.pointerEnter,s="pointer");var c=null==o?a:D(o);if(a=null==t?a:D(t),(e=i.getPooled(l,o,n,r)).type=s+"leave",e.target=c,e.relatedTarget=a,(n=i.getPooled(u,t,n,r)).type=s+"enter",n.target=a,n.relatedTarget=c,r=t,o&&r)e:{for(a=r,s=0,i=t=o;i;i=F(i))s++;for(i=0,u=a;u;u=F(u))i++;for(;0<s-i;)t=F(t),s--;for(;0<i-s;)a=F(a),i--;for(;s--;){if(t===a||t===a.alternate)break e;t=F(t),a=F(a)}t=null}else t=null;for(a=t,t=[];o&&o!==a&&(null===(s=o.alternate)||s!==a);)t.push(o),o=F(o);for(o=[];r&&r!==a&&(null===(s=r.alternate)||s!==a);)o.push(r),r=F(r);for(r=0;r<t.length;r++)W(t[r],"bubbled",e);for(r=o.length;0<r--;)W(o[r],"captured",n);return[e,n]}};function Yt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Yt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Yt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&i("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&i("188"),1===t?null:e;for(var n=e,r=t;;){var a=n.return,o=a?a.alternate:null;if(!a||!o)break;if(a.child===o.child){for(var l=a.child;l;){if(l===n)return nn(a),e;if(l===r)return nn(a),t;l=l.sibling}i("188")}if(n.return!==r.return)n=a,r=o;else{l=!1;for(var u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}l||i("189")}}n.alternate!==r&&i("190")}return 3!==n.tag&&i("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var an=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),on=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Bt.extend({relatedTarget:null});function un(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Bt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=un(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?un(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?un(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Xt.extend({dataTransfer:null}),pn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),mn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),hn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[Q,"animationEnd"],[Y,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},bn={};function gn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,bn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){gn(e,!0)}),vn.forEach(function(e){gn(e,!1)});var xn={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=bn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var a=bn[e];if(!a)return null;switch(e){case"keypress":if(0===un(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case Q:case Y:case Z:e=an;break;case ee:e=mn;break;case"scroll":e=Bt;break;case"wheel":e=hn;break;case"copy":case"cut":case"paste":e=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Gt;break;default:e=ue}return K(t=e.getPooled(a,t,n,r)),t}},wn=xn.isInteractiveTopLevelEventType,En=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=I(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=Fe(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,i=null,l=0;l<y.length;l++){var u=y[l];u&&(u=u.extractEvents(r,t,o,a))&&(i=C(i,u))}N(i)}}var Sn=!0;function Cn(e,t){if(!t)return null;var n=(wn(e)?Pn:On).bind(null,e);t.addEventListener(e,n,!1)}function Tn(e,t){if(!t)return null;var n=(wn(e)?Pn:On).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Ae(On,e,t)}function On(e,t){if(Sn){var n=Fe(t);if(null===(n=I(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),En.length){var r=En.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Le(kn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>En.length&&En.push(e)}}}var jn={},Rn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function _n(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Rn++,jn[e[Nn]]={}),jn[e[Nn]]}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function In(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function Ln(){for(var e=window,t=An();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=An((e=t.contentWindow).document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function zn(e){var t=Ln(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=In(n,o);var i=In(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=H&&"documentMode"in document&&11>=document.documentMode,Bn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Un=null,Wn=null,Vn=null,Kn=!1;function Hn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Kn||null==Un||Un!==An(n)?null:("selectionStart"in(n=Un)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vn&&en(Vn,n)?null:(Vn=n,(e=ue.getPooled(Bn.select,Wn,e,t)).type="select",e.target=Un,K(e),e))}var $n={eventTypes:Bn,extractEvents:function(e,t,n,r){var a,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(a=!o)){e:{o=_n(o),a=x.onSelect;for(var i=0;i<a.length;i++){var l=a[i];if(!o.hasOwnProperty(l)||!o[l]){o=!1;break e}}o=!0}a=!o}if(a)return null;switch(o=t?D(t):window,e){case"focus":(ze(o)||"true"===o.contentEditable)&&(Un=o,Wn=t,Vn=null);break;case"blur":Vn=Wn=Un=null;break;case"mousedown":Kn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Kn=!1,Hn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return Hn(n,r)}return null}};function qn(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Xn(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function Gn(e,t){return null!=t.dangerouslySetInnerHTML&&i("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Jn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&i("92"),Array.isArray(t)&&(1>=t.length||i("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:bt(n)}}function Qn(e,t){var n=bt(t.value),r=bt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Yn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=z,E=L,k=D,j.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:Qt,ChangeEventPlugin:Ft,SelectEventPlugin:$n,BeforeInputEventPlugin:Ce});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,ar=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lr=["Webkit","ms","Moz","O"];function ur(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function sr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ur(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ir).forEach(function(e){lr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var cr=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&i("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&i("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||i("61")),null!=t.style&&"object"!=typeof t.style&&i("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=_n(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var a=t[r];if(!n.hasOwnProperty(a)||!n[a]){switch(a){case"scroll":Tn("scroll",e);break;case"focus":case"blur":Tn("focus",e),Tn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Be(a)&&Tn(a,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(a)&&Cn(a,e)}n[a]=!0}}}function mr(){}var hr=null,vr=null;function yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gr="function"==typeof setTimeout?setTimeout:void 0,xr="function"==typeof clearTimeout?clearTimeout:void 0,wr=o.unstable_scheduleCallback,Er=o.unstable_cancelCallback;function kr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Sr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Cr=[],Tr=-1;function Pr(e){0>Tr||(e.current=Cr[Tr],Cr[Tr]=null,Tr--)}function Or(e,t){Cr[++Tr]=e.current,e.current=t}var jr={},Rr={current:jr},Nr={current:!1},_r=jr;function Ar(e,t){var n=e.type.contextTypes;if(!n)return jr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Mr(e){return null!=(e=e.childContextTypes)}function Ir(e){Pr(Nr),Pr(Rr)}function Lr(e){Pr(Nr),Pr(Rr)}function Dr(e,t,n){Rr.current!==jr&&i("168"),Or(Rr,t),Or(Nr,n)}function zr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())o in e||i("108",lt(t)||"Unknown",o);return a({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||jr,_r=Rr.current,Or(Rr,t),Or(Nr,Nr.current),!0}function Br(e,t,n){var r=e.stateNode;r||i("169"),n?(t=zr(e,t,_r),r.__reactInternalMemoizedMergedChildContext=t,Pr(Nr),Pr(Rr),Or(Rr,t)):Pr(Nr),Or(Nr,n)}var Ur=null,Wr=null;function Vr(e){return function(t){try{return e(t)}catch(e){}}}function Kr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Hr(e,t,n,r){return new Kr(e,t,n,r)}function $r(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qr(e,t){var n=e.alternate;return null===n?((n=Hr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Xr(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)$r(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ge:return Gr(n.children,a,o,t);case et:return Jr(n,3|a,o,t);case Je:return Jr(n,2|a,o,t);case Qe:return(e=Hr(12,n,t,4|a)).elementType=Qe,e.type=Qe,e.expirationTime=o,e;case nt:return(e=Hr(13,n,t,a)).elementType=nt,e.type=nt,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Ye:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case at:l=16,r=null;break e}i("130",null==e?e:typeof e,"")}return(t=Hr(l,n,t,a)).elementType=e,t.type=r,t.expirationTime=o,t}function Gr(e,t,n,r){return(e=Hr(7,e,r,t)).expirationTime=n,e}function Jr(e,t,n,r){return e=Hr(8,e,r,t),t=0==(1&t)?Je:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Qr(e,t,n){return(e=Hr(6,e,null,t)).expirationTime=n,e}function Yr(e,t,n){return(t=Hr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),na(t,e)}function ea(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),na(t,e)}function ta(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function na(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,a=t.earliestPendingTime,o=t.latestPingedTime;0===(a=0!==a?a:o)&&(0===e||r<e)&&(a=r),0!==(e=a)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=a,t.expirationTime=e}function ra(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var aa=(new r.Component).refs;function oa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ia={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=El(),a=Jo(r=Gi(r,e));a.payload=t,null!=n&&(a.callback=n),Vi(),Yo(e,a),Yi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=El(),a=Jo(r=Gi(r,e));a.tag=Ko,a.payload=t,null!=n&&(a.callback=n),Vi(),Yo(e,a),Yi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=El(),r=Jo(n=Gi(n,e));r.tag=Ho,null!=t&&(r.callback=t),Vi(),Yo(e,r),Yi(e,n)}};function la(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(a,o))}function ua(e,t,n){var r=!1,a=jr,o=t.contextType;return"object"==typeof o&&null!==o?o=Wo(o):(a=Mr(t)?_r:Rr.current,o=(r=null!=(r=t.contextTypes))?Ar(e,a):jr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ia,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function sa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ia.enqueueReplaceState(t,t.state,null)}function ca(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=aa;var o=t.contextType;"object"==typeof o&&null!==o?a.context=Wo(o):(o=Mr(t)?_r:Rr.current,a.context=Ar(e,o)),null!==(o=e.updateQueue)&&(ni(e,o,n,a,r),a.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(oa(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ia.enqueueReplaceState(a,a.state,null),null!==(o=e.updateQueue)&&(ni(e,o,n,a,r),a.state=e.memoizedState)),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var fa=Array.isArray;function da(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&i("309"),r=n.stateNode),r||i("147",e);var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===aa&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}"string"!=typeof e&&i("284"),n._owner||i("290",e)}return e}function pa(e,t){"textarea"!==e.type&&i("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function ma(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t,n){return(e=qr(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Qr(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=da(e,t,n),r.return=e,r):((r=Xr(n.type,n.key,n.props,null,e.mode,r)).ref=da(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yr(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Gr(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case qe:return(n=Xr(t.type,t.key,t.props,null,e.mode,n)).ref=da(e,null,t),n.return=e,n;case Xe:return(t=Yr(t,e.mode,n)).return=e,t}if(fa(t)||it(t))return(t=Gr(t,e.mode,n,null)).return=e,t;pa(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case qe:return n.key===a?n.type===Ge?f(e,t,n.props.children,r,a):s(e,t,n,r):null;case Xe:return n.key===a?c(e,t,n,r):null}if(fa(n)||it(n))return null!==a?null:f(e,t,n,r,null);pa(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?f(t,e,r.props.children,a,r.key):s(t,e,r,a);case Xe:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(fa(r)||it(r))return f(t,e=e.get(n)||null,r,a,null);pa(t,r)}return null}function h(a,i,l,u){for(var s=null,c=null,f=i,h=i=0,v=null;null!==f&&h<l.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var y=p(a,f,l[h],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(a,f),i=o(y,i,h),null===c?s=y:c.sibling=y,c=y,f=v}if(h===l.length)return n(a,f),s;if(null===f){for(;h<l.length;h++)(f=d(a,l[h],u))&&(i=o(f,i,h),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(a,f);h<l.length;h++)(v=m(f,a,h,l[h],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),i=o(v,i,h),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(a,e)}),s}function v(a,l,u,s){var c=it(u);"function"!=typeof c&&i("150"),null==(u=c.call(u))&&i("151");for(var f=c=null,h=l,v=l=0,y=null,b=u.next();null!==h&&!b.done;v++,b=u.next()){h.index>v?(y=h,h=null):y=h.sibling;var g=p(a,h,b.value,s);if(null===g){h||(h=y);break}e&&h&&null===g.alternate&&t(a,h),l=o(g,l,v),null===f?c=g:f.sibling=g,f=g,h=y}if(b.done)return n(a,h),c;if(null===h){for(;!b.done;v++,b=u.next())null!==(b=d(a,b.value,s))&&(l=o(b,l,v),null===f?c=b:f.sibling=b,f=b);return c}for(h=r(a,h);!b.done;v++,b=u.next())null!==(b=m(h,a,v,b.value,s))&&(e&&null!==b.alternate&&h.delete(null===b.key?v:b.key),l=o(b,l,v),null===f?c=b:f.sibling=b,f=b);return e&&h.forEach(function(e){return t(a,e)}),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===Ge&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case qe:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?o.type===Ge:s.elementType===o.type){n(e,s.sibling),(r=a(s,o.type===Ge?o.props.children:o.props)).ref=da(e,s,o),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}o.type===Ge?((r=Gr(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Xr(o.type,o.key,o.props,null,e.mode,u)).ref=da(e,r,o),u.return=e,e=u)}return l(e);case Xe:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yr(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Qr(o,e.mode,u)).return=e,e=r),l(e);if(fa(o))return h(e,r,o,u);if(it(o))return v(e,r,o,u);if(c&&pa(e,o),void 0===o&&!s)switch(e.tag){case 1:case 0:i("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var ha=ma(!0),va=ma(!1),ya={},ba={current:ya},ga={current:ya},xa={current:ya};function wa(e){return e===ya&&i("174"),e}function Ea(e,t){Or(xa,t),Or(ga,e),Or(ba,ya);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Pr(ba),Or(ba,t)}function ka(e){Pr(ba),Pr(ga),Pr(xa)}function Sa(e){wa(xa.current);var t=wa(ba.current),n=tr(t,e.type);t!==n&&(Or(ga,e),Or(ba,n))}function Ca(e){ga.current===e&&(Pr(ba),Pr(ga))}var Ta=0,Pa=2,Oa=4,ja=8,Ra=16,Na=32,_a=64,Aa=128,Ma=Ke.ReactCurrentDispatcher,Ia=0,La=null,Da=null,za=null,Fa=null,Ba=null,Ua=null,Wa=0,Va=null,Ka=0,Ha=!1,$a=null,qa=0;function Xa(){i("321")}function Ga(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yt(e[n],t[n]))return!1;return!0}function Ja(e,t,n,r,a,o){if(Ia=o,La=t,za=null!==e?e.memoizedState:null,Ma.current=null===za?so:co,t=n(r,a),Ha){do{Ha=!1,qa+=1,za=null!==e?e.memoizedState:null,Ua=Fa,Va=Ba=Da=null,Ma.current=co,t=n(r,a)}while(Ha);$a=null,qa=0}return Ma.current=uo,(e=La).memoizedState=Fa,e.expirationTime=Wa,e.updateQueue=Va,e.effectTag|=Ka,e=null!==Da&&null!==Da.next,Ia=0,Ua=Ba=Fa=za=Da=La=null,Wa=0,Va=null,Ka=0,e&&i("300"),t}function Qa(){Ma.current=uo,Ia=0,Ua=Ba=Fa=za=Da=La=null,Wa=0,Va=null,Ka=0,Ha=!1,$a=null,qa=0}function Ya(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Ba?Fa=Ba=e:Ba=Ba.next=e,Ba}function Za(){if(null!==Ua)Ua=(Ba=Ua).next,za=null!==(Da=za)?Da.next:null;else{null===za&&i("310");var e={memoizedState:(Da=za).memoizedState,baseState:Da.baseState,queue:Da.queue,baseUpdate:Da.baseUpdate,next:null};Ba=null===Ba?Fa=e:Ba.next=e,za=Da.next}return Ba}function eo(e,t){return"function"==typeof t?t(e):t}function to(e){var t=Za(),n=t.queue;if(null===n&&i("311"),n.lastRenderedReducer=e,0<qa){var r=n.dispatch;if(null!==$a){var a=$a.get(n);if(void 0!==a){$a.delete(n);var o=t.memoizedState;do{o=e(o,a.action),a=a.next}while(null!==a);return Yt(o,t.memoizedState)||(Eo=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(o=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var u=a=null,s=r,c=!1;do{var f=s.expirationTime;f<Ia?(c||(c=!0,u=l,a=o),f>Wa&&(Wa=f)):o=s.eagerReducer===e?s.eagerState:e(o,s.action),l=s,s=s.next}while(null!==s&&s!==r);c||(u=l,a=o),Yt(o,t.memoizedState)||(Eo=!0),t.memoizedState=o,t.baseUpdate=u,t.baseState=a,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function no(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Va?(Va={lastEffect:null}).lastEffect=e.next=e:null===(t=Va.lastEffect)?Va.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Va.lastEffect=e),e}function ro(e,t,n,r){var a=Ya();Ka|=e,a.memoizedState=no(t,n,void 0,void 0===r?null:r)}function ao(e,t,n,r){var a=Za();r=void 0===r?null:r;var o=void 0;if(null!==Da){var i=Da.memoizedState;if(o=i.destroy,null!==r&&Ga(r,i.deps))return void no(Ta,n,o,r)}Ka|=e,a.memoizedState=no(t,n,o,r)}function oo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function io(){}function lo(e,t,n){25>qa||i("301");var r=e.alternate;if(e===La||null!==r&&r===La)if(Ha=!0,e={expirationTime:Ia,action:n,eagerReducer:null,eagerState:null,next:null},null===$a&&($a=new Map),void 0===(n=$a.get(t)))$a.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Vi();var a=El(),o={expirationTime:a=Gi(a,e),action:n,eagerReducer:null,eagerState:null,next:null},l=t.last;if(null===l)o.next=o;else{var u=l.next;null!==u&&(o.next=u),l.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var s=t.lastRenderedState,c=r(s,n);if(o.eagerReducer=r,o.eagerState=c,Yt(c,s))return}catch(e){}Yi(e,a)}}var uo={readContext:Wo,useCallback:Xa,useContext:Xa,useEffect:Xa,useImperativeHandle:Xa,useLayoutEffect:Xa,useMemo:Xa,useReducer:Xa,useRef:Xa,useState:Xa,useDebugValue:Xa},so={readContext:Wo,useCallback:function(e,t){return Ya().memoizedState=[e,void 0===t?null:t],e},useContext:Wo,useEffect:function(e,t){return ro(516,Aa|_a,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,Oa|Na,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ro(4,Oa|Na,e,t)},useMemo:function(e,t){var n=Ya();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ya();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=lo.bind(null,La,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ya().memoizedState=e},useState:function(e){var t=Ya();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:eo,lastRenderedState:e}).dispatch=lo.bind(null,La,e),[t.memoizedState,e]},useDebugValue:io},co={readContext:Wo,useCallback:function(e,t){var n=Za();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ga(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Wo,useEffect:function(e,t){return ao(516,Aa|_a,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ao(4,Oa|Na,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ao(4,Oa|Na,e,t)},useMemo:function(e,t){var n=Za();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ga(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:to,useRef:function(){return Za().memoizedState},useState:function(e){return to(eo)},useDebugValue:io},fo=null,po=null,mo=!1;function ho(e,t){var n=Hr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function vo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function yo(e){if(mo){var t=po;if(t){var n=t;if(!vo(e,t)){if(!(t=kr(n))||!vo(e,t))return e.effectTag|=2,mo=!1,void(fo=e);ho(fo,n)}fo=e,po=Sr(t)}else e.effectTag|=2,mo=!1,fo=e}}function bo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fo=e}function go(e){if(e!==fo)return!1;if(!mo)return bo(e),mo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!br(t,e.memoizedProps))for(t=po;t;)ho(e,t),t=kr(t);return bo(e),po=fo?kr(e.stateNode):null,!0}function xo(){po=fo=null,mo=!1}var wo=Ke.ReactCurrentOwner,Eo=!1;function ko(e,t,n,r){t.child=null===e?va(t,null,n,r):ha(t,e.child,n,r)}function So(e,t,n,r,a){n=n.render;var o=t.ref;return Uo(t,a),r=Ja(e,t,n,r,o,a),null===e||Eo?(t.effectTag|=1,ko(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),Ao(e,t,a))}function Co(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||$r(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Xr(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,To(e,t,i,r,a,o))}return i=e.child,a<o&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:en)(a,r)&&e.ref===t.ref)?Ao(e,t,o):(t.effectTag|=1,(e=qr(i,r)).ref=t.ref,e.return=t,t.child=e)}function To(e,t,n,r,a,o){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(Eo=!1,a<o)?Ao(e,t,o):Oo(e,t,n,r,o)}function Po(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Oo(e,t,n,r,a){var o=Mr(n)?_r:Rr.current;return o=Ar(t,o),Uo(t,a),n=Ja(e,t,n,r,o,a),null===e||Eo?(t.effectTag|=1,ko(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),Ao(e,t,a))}function jo(e,t,n,r,a){if(Mr(n)){var o=!0;Fr(t)}else o=!1;if(Uo(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ua(t,n,r),ca(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=Wo(s):s=Ar(t,s=Mr(n)?_r:Rr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&sa(t,i,r,s),qo=!1;var d=t.memoizedState;u=i.state=d;var p=t.updateQueue;null!==p&&(ni(t,p,r,i,a),u=t.memoizedState),l!==r||d!==u||Nr.current||qo?("function"==typeof c&&(oa(t,n,c,r),u=t.memoizedState),(l=qo||la(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,l=t.memoizedProps,i.props=t.type===t.elementType?l:ra(t.type,l),u=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=Wo(s):s=Ar(t,s=Mr(n)?_r:Rr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&sa(t,i,r,s),qo=!1,u=t.memoizedState,d=i.state=u,null!==(p=t.updateQueue)&&(ni(t,p,r,i,a),d=t.memoizedState),l!==r||u!==d||Nr.current||qo?("function"==typeof c&&(oa(t,n,c,r),d=t.memoizedState),(c=qo||la(t,n,l,r,u,d,s))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ro(e,t,n,r,o,a)}function Ro(e,t,n,r,a,o){Po(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return a&&Br(t,n,!1),Ao(e,t,o);r=t.stateNode,wo.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=ha(t,e.child,null,o),t.child=ha(t,null,l,o)):ko(e,t,l,o),t.memoizedState=r.state,a&&Br(t,n,!0),t.child}function No(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),Ea(e,t.containerInfo)}function _o(e,t,n){var r=t.mode,a=t.pendingProps,o=t.memoizedState;if(0==(64&t.effectTag)){o=null;var i=!1}else o={timedOutAt:null!==o?o.timedOutAt:0},i=!0,t.effectTag&=-65;if(null===e)if(i){var l=a.fallback;e=Gr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Gr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=va(t,null,a.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,i?(n=a.fallback,a=qr(r,r.pendingProps),0==(1&t.mode)&&((i=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(a.child=i)),r=a.sibling=qr(l,n,l.expirationTime),n=a,a.childExpirationTime=0,n.return=r.return=t):n=r=ha(t,r.child,a.children,n)):(l=e.child,i?(i=a.fallback,(a=Gr(null,r,0,null)).child=l,0==(1&t.mode)&&(a.child=null!==t.memoizedState?t.child.child:t.child),(r=a.sibling=Gr(i,r,n,null)).effectTag|=2,n=a,a.childExpirationTime=0,n.return=r.return=t):r=n=ha(t,l,a.children,n)),t.stateNode=e.stateNode;return t.memoizedState=o,t.child=n,r}function Ao(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&i("153"),null!==t.child){for(n=qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Mo(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Nr.current)Eo=!0;else if(r<n){switch(Eo=!1,t.tag){case 3:No(t),xo();break;case 5:Sa(t);break;case 1:Mr(t.type)&&Fr(t);break;case 4:Ea(t,t.stateNode.containerInfo);break;case 10:Fo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?_o(e,t,n):null!==(t=Ao(e,t,n))?t.sibling:null}return Ao(e,t,n)}}else Eo=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var a=Ar(t,Rr.current);if(Uo(t,n),a=Ja(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,Qa(),Mr(r)){var o=!0;Fr(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&oa(t,r,l,e),a.updater=ia,t.stateNode=a,a._reactInternalFiber=t,ca(t,r,e,n),t=Ro(null,t,r,!0,o,n)}else t.tag=0,ko(null,t,a,n),t=t.child;return t;case 16:switch(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),o=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(a),t.type=e,a=t.tag=function(e){if("function"==typeof e)return $r(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),o=ra(e,o),l=void 0,a){case 0:l=Oo(null,t,e,o,n);break;case 1:l=jo(null,t,e,o,n);break;case 11:l=So(null,t,e,o,n);break;case 14:l=Co(null,t,e,ra(e.type,o),r,n);break;default:i("306",e,"")}return l;case 0:return r=t.type,a=t.pendingProps,Oo(e,t,r,a=t.elementType===r?a:ra(r,a),n);case 1:return r=t.type,a=t.pendingProps,jo(e,t,r,a=t.elementType===r?a:ra(r,a),n);case 3:return No(t),null===(r=t.updateQueue)&&i("282"),a=null!==(a=t.memoizedState)?a.element:null,ni(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===a?(xo(),t=Ao(e,t,n)):(a=t.stateNode,(a=(null===e||null===e.child)&&a.hydrate)&&(po=Sr(t.stateNode.containerInfo),fo=t,a=mo=!0),a?(t.effectTag|=2,t.child=va(t,null,r,n)):(ko(e,t,r,n),xo()),t=t.child),t;case 5:return Sa(t),null===e&&yo(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,br(r,a)?l=null:null!==o&&br(r,o)&&(t.effectTag|=16),Po(e,t),1!==n&&1&t.mode&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ko(e,t,l,n),t=t.child),t;case 6:return null===e&&yo(t),null;case 13:return _o(e,t,n);case 4:return Ea(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ha(t,null,r,n):ko(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,So(e,t,r,a=t.elementType===r?a:ra(r,a),n);case 7:return ko(e,t,t.pendingProps,n),t.child;case 8:case 12:return ko(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,Fo(t,o=a.value),null!==l){var u=l.value;if(0===(o=Yt(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!Nr.current){t=Ao(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.contextDependencies;if(null!==s){l=u.child;for(var c=s.first;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=Jo(n)).tag=Ho,Yo(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),c=n;for(var f=u.return;null!==f;){var d=f.alternate;if(f.childExpirationTime<c)f.childExpirationTime=c,null!==d&&d.childExpirationTime<c&&(d.childExpirationTime=c);else{if(!(null!==d&&d.childExpirationTime<c))break;d.childExpirationTime=c}f=f.return}s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}ko(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,Uo(t,n),r=r(a=Wo(a,o.unstable_observedBits)),t.effectTag|=1,ko(e,t,r,n),t.child;case 14:return o=ra(a=t.type,t.pendingProps),Co(e,t,a,o=ra(a.type,o),r,n);case 15:return To(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ra(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Mr(r)?(e=!0,Fr(t)):e=!1,Uo(t,n),ua(t,r,a),ca(t,r,a,n),Ro(null,t,r,!0,e,n)}i("156")}var Io={current:null},Lo=null,Do=null,zo=null;function Fo(e,t){var n=e.type._context;Or(Io,n._currentValue),n._currentValue=t}function Bo(e){var t=Io.current;Pr(Io),e.type._context._currentValue=t}function Uo(e,t){Lo=e,zo=Do=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(Eo=!0),e.contextDependencies=null}function Wo(e,t){return zo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Do?(null===Lo&&i("308"),Do=t,Lo.contextDependencies={first:t,expirationTime:0}):Do=Do.next=t),e._currentValue}var Vo=0,Ko=1,Ho=2,$o=3,qo=!1;function Xo(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Go(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Jo(e){return{expirationTime:e,tag:Vo,payload:null,callback:null,next:null,nextEffect:null}}function Qo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Yo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,a=null;null===r&&(r=e.updateQueue=Xo(e.memoizedState))}else r=e.updateQueue,a=n.updateQueue,null===r?null===a?(r=e.updateQueue=Xo(e.memoizedState),a=n.updateQueue=Xo(n.memoizedState)):r=e.updateQueue=Go(a):null===a&&(a=n.updateQueue=Go(r));null===a||r===a?Qo(r,t):null===r.lastUpdate||null===a.lastUpdate?(Qo(r,t),Qo(a,t)):(Qo(r,t),a.lastUpdate=t)}function Zo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Xo(e.memoizedState):ei(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ei(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Go(t)),t}function ti(e,t,n,r,o,i){switch(n.tag){case Ko:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case $o:e.effectTag=-2049&e.effectTag|64;case Vo:if(null==(o="function"==typeof(e=n.payload)?e.call(i,r,o):e))break;return a({},r,o);case Ho:qo=!0}return r}function ni(e,t,n,r,a){qo=!1;for(var o=(t=ei(e,t)).baseState,i=null,l=0,u=t.firstUpdate,s=o;null!==u;){var c=u.expirationTime;c<a?(null===i&&(i=u,o=s),l<c&&(l=c)):(s=ti(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<a?(null===c&&(c=u,null===i&&(o=s)),l<f&&(l=f)):(s=ti(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(o=s),t.baseState=o,t.firstUpdate=i,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function ri(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ai(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ai(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ai(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&i("191",n),n.call(r)}e=e.nextEffect}}function oi(e,t){return{value:e,source:t,stack:ut(t)}}function ii(e){e.effectTag|=4}var li=void 0,ui=void 0,si=void 0,ci=void 0;li=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ui=function(){},si=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var l=t.stateNode;switch(wa(ba.current),e=null,n){case"input":i=gt(l,i),r=gt(l,r),e=[];break;case"option":i=qn(l,i),r=qn(l,r),e=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":i=Gn(l,i),r=Gn(l,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(l.onclick=mr)}fr(n,r),l=n=void 0;var u=null;for(n in i)if(!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&null!=i[n])if("style"===n){var s=i[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(g.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=i?i[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(g.hasOwnProperty(n)?(null!=c&&pr(o,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),o=e,(t.updateQueue=o)&&ii(t)}},ci=function(e,t,n,r){n!==r&&ii(t)};var fi="function"==typeof WeakSet?WeakSet:Set;function di(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ut(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Xi(e,t)}else t.current=null}function mi(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Ta){var a=r.destroy;r.destroy=void 0,void 0!==a&&a()}(r.tag&t)!==Ta&&(a=r.create,r.destroy=a()),r=r.next}while(r!==n)}}function hi(e){switch("function"==typeof Wr&&Wr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var a=e;try{r()}catch(e){Xi(a,e)}}n=n.next}while(n!==t)}break;case 1:if(pi(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Xi(e,t)}break;case 5:pi(e);break;case 4:bi(e)}}function vi(e){return 5===e.tag||3===e.tag||4===e.tag}function yi(e){e:{for(var t=e.return;null!==t;){if(vi(t)){var n=t;break e}t=t.return}i("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:i("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var a=e;;){if(5===a.tag||6===a.tag)if(n)if(r){var o=t,l=a.stateNode,u=n;8===o.nodeType?o.parentNode.insertBefore(l,u):o.insertBefore(l,u)}else t.insertBefore(a.stateNode,n);else r?(l=t,u=a.stateNode,8===l.nodeType?(o=l.parentNode).insertBefore(u,l):(o=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=mr)):t.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===e)break;for(;null===a.sibling;){if(null===a.return||a.return===e)return;a=a.return}a.sibling.return=a.return,a=a.sibling}}function bi(e){for(var t=e,n=!1,r=void 0,a=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&i("160"),n.tag){case 5:r=n.stateNode,a=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,a=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var o=t,l=o;;)if(hi(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===o)break;for(;null===l.sibling;){if(null===l.return||l.return===o)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}a?(o=r,l=t.stateNode,8===o.nodeType?o.parentNode.removeChild(l):o.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,a=!0,t.child.return=t,t=t.child;continue}}else if(hi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function gi(e,t){switch(t.tag){case 0:case 11:case 14:case 15:mi(Oa,ja,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var a=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&function(e,t,n,r,a){e[M]=a,"input"===n&&"radio"===a.type&&null!=a.name&&wt(e,a),dr(n,r),r=dr(n,a);for(var o=0;o<t.length;o+=2){var i=t[o],l=t[o+1];"style"===i?sr(e,l):"dangerouslySetInnerHTML"===i?ar(e,l):"children"===i?or(e,l):yt(e,i,l,r)}switch(n){case"input":Et(e,a);break;case"textarea":Qn(e,a);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!a.multiple,null!=(n=a.value)?Xn(e,!!a.multiple,n,!1):t!==!!a.multiple&&(null!=a.defaultValue?Xn(e,!!a.multiple,a.defaultValue,!0):Xn(e,!!a.multiple,a.multiple?[]:"",!1))}}(n,o,a,e,r)}break;case 6:null===t.stateNode&&i("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=El())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=ur("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new fi),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Gi(t=El(),e),null!==(e=Qi(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&kl(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:i("163")}}var xi="function"==typeof WeakMap?WeakMap:Map;function wi(e,t,n){(n=Jo(n)).tag=$o,n.payload={element:null};var r=t.value;return n.callback=function(){_l(r),di(e,t)},n}function Ei(e,t,n){(n=Jo(n)).tag=$o;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zi?zi=new Set([this]):zi.add(this));var n=t.value,a=t.stack;di(e,t),this.componentDidCatch(n,{componentStack:null!==a?a:""})}),n}function ki(e){switch(e.tag){case 1:Mr(e.type)&&Ir();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return ka(),Lr(),0!=(64&(t=e.effectTag))&&i("285"),e.effectTag=-2049&t|64,e;case 5:return Ca(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return ka(),null;case 10:return Bo(e),null;default:return null}}var Si=Ke.ReactCurrentDispatcher,Ci=Ke.ReactCurrentOwner,Ti=1073741822,Pi=!1,Oi=null,ji=null,Ri=0,Ni=-1,_i=!1,Ai=null,Mi=!1,Ii=null,Li=null,Di=null,zi=null;function Fi(){if(null!==Oi)for(var e=Oi.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Ir();break;case 3:ka(),Lr();break;case 5:Ca(t);break;case 4:ka();break;case 10:Bo(t)}e=e.return}ji=null,Ri=0,Ni=-1,_i=!1,Oi=null}function Bi(){for(;null!==Ai;){var e=Ai.effectTag;if(16&e&&or(Ai.stateNode,""),128&e){var t=Ai.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:yi(Ai),Ai.effectTag&=-3;break;case 6:yi(Ai),Ai.effectTag&=-3,gi(Ai.alternate,Ai);break;case 4:gi(Ai.alternate,Ai);break;case 8:bi(e=Ai),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Ai=Ai.nextEffect}}function Ui(){for(;null!==Ai;){if(256&Ai.effectTag)e:{var e=Ai.alternate,t=Ai;switch(t.tag){case 0:case 11:case 15:mi(Pa,Ta,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ra(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:i("163")}}Ai=Ai.nextEffect}}function Wi(e,t){for(;null!==Ai;){var n=Ai.effectTag;if(36&n){var r=Ai.alternate,a=Ai,o=t;switch(a.tag){case 0:case 11:case 15:mi(Ra,Na,a);break;case 1:var l=a.stateNode;if(4&a.effectTag)if(null===r)l.componentDidMount();else{var u=a.elementType===a.type?r.memoizedProps:ra(a.type,r.memoizedProps);l.componentDidUpdate(u,r.memoizedState,l.__reactInternalSnapshotBeforeUpdate)}null!==(r=a.updateQueue)&&ri(0,r,l);break;case 3:if(null!==(r=a.updateQueue)){if(l=null,null!==a.child)switch(a.child.tag){case 5:l=a.child.stateNode;break;case 1:l=a.child.stateNode}ri(0,r,l)}break;case 5:o=a.stateNode,null===r&&4&a.effectTag&&yr(a.type,a.memoizedProps)&&o.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:i("163")}}128&n&&(null!==(a=Ai.ref)&&(o=Ai.stateNode,"function"==typeof a?a(o):a.current=o)),512&n&&(Ii=e),Ai=Ai.nextEffect}}function Vi(){null!==Li&&Er(Li),null!==Di&&Di()}function Ki(e,t){Mi=Pi=!0,e.current===t&&i("177");var n=e.pendingCommitExpirationTime;0===n&&i("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,a=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}na(0,e)}(e,a>r?a:r),Ci.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Sn,vr=function(){var e=Ln();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,a=n.focusNode;n=n.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var o=0,i=-1,l=-1,u=0,s=0,c=e,f=null;t:for(;;){for(var d;c!==t||0!==r&&3!==c.nodeType||(i=o+r),c!==a||0!==n&&3!==c.nodeType||(l=o+n),3===c.nodeType&&(o+=c.nodeValue.length),null!==(d=c.firstChild);)f=c,c=d;for(;;){if(c===e)break t;if(f===t&&++u===r&&(i=o),f===a&&++s===n&&(l=o),null!==(d=c.nextSibling))break;f=(c=f).parentNode}c=d}t=-1===i||-1===l?null:{start:i,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),Sn=!1,Ai=r;null!==Ai;){a=!1;var l=void 0;try{Ui()}catch(e){a=!0,l=e}a&&(null===Ai&&i("178"),Xi(Ai,l),null!==Ai&&(Ai=Ai.nextEffect))}for(Ai=r;null!==Ai;){a=!1,l=void 0;try{Bi()}catch(e){a=!0,l=e}a&&(null===Ai&&i("178"),Xi(Ai,l),null!==Ai&&(Ai=Ai.nextEffect))}for(zn(vr),vr=null,Sn=!!hr,hr=null,e.current=t,Ai=r;null!==Ai;){a=!1,l=void 0;try{Wi(e,n)}catch(e){a=!0,l=e}a&&(null===Ai&&i("178"),Xi(Ai,l),null!==Ai&&(Ai=Ai.nextEffect))}if(null!==r&&null!==Ii){var u=function(e,t){Di=Li=Ii=null;var n=al;al=!0;do{if(512&t.effectTag){var r=!1,a=void 0;try{var o=t;mi(Aa,Ta,o),mi(Ta,_a,o)}catch(e){r=!0,a=e}r&&Xi(t,a)}t=t.nextEffect}while(null!==t);al=n,0!==(n=e.expirationTime)&&kl(e,n),cl||al||Ol(1073741823,!1)}.bind(null,e,r);Li=o.unstable_runWithPriority(o.unstable_NormalPriority,function(){return wr(u)}),Di=u}Pi=Mi=!1,"function"==typeof Ur&&Ur(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(zi=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Hi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Oi=e;e:{var o=t,l=Ri,u=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Mr(t.type)&&Ir();break;case 3:ka(),Lr(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==o&&null!==o.child||(go(t),t.effectTag&=-3),ui(t);break;case 5:Ca(t);var s=wa(xa.current);if(l=t.type,null!==o&&null!=t.stateNode)si(o,t,l,u,s),o.ref!==t.ref&&(t.effectTag|=128);else if(u){var c=wa(ba.current);if(go(t)){o=(u=t).stateNode;var f=u.type,d=u.memoizedProps,p=s;switch(o[A]=u,o[M]=d,l=void 0,s=f){case"iframe":case"object":Cn("load",o);break;case"video":case"audio":for(f=0;f<te.length;f++)Cn(te[f],o);break;case"source":Cn("error",o);break;case"img":case"image":case"link":Cn("error",o),Cn("load",o);break;case"form":Cn("reset",o),Cn("submit",o);break;case"details":Cn("toggle",o);break;case"input":xt(o,d),Cn("invalid",o),pr(p,"onChange");break;case"select":o._wrapperState={wasMultiple:!!d.multiple},Cn("invalid",o),pr(p,"onChange");break;case"textarea":Jn(o,d),Cn("invalid",o),pr(p,"onChange")}for(l in fr(s,d),f=null,d)d.hasOwnProperty(l)&&(c=d[l],"children"===l?"string"==typeof c?o.textContent!==c&&(f=["children",c]):"number"==typeof c&&o.textContent!==""+c&&(f=["children",""+c]):g.hasOwnProperty(l)&&null!=c&&pr(p,l));switch(s){case"input":We(o),kt(o,d,!0);break;case"textarea":We(o),Yn(o);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(o.onclick=mr)}l=f,u.updateQueue=l,(u=null!==l)&&ii(t)}else{d=t,p=l,o=u,f=9===s.nodeType?s:s.ownerDocument,c===Zn.html&&(c=er(p)),c===Zn.html?"script"===p?((o=f.createElement("div")).innerHTML="<script><\/script>",f=o.removeChild(o.firstChild)):"string"==typeof o.is?f=f.createElement(p,{is:o.is}):(f=f.createElement(p),"select"===p&&(p=f,o.multiple?p.multiple=!0:o.size&&(p.size=o.size))):f=f.createElementNS(c,p),(o=f)[A]=d,o[M]=u,li(o,t,!1,!1),p=o;var m=s,h=dr(f=l,d=u);switch(f){case"iframe":case"object":Cn("load",p),s=d;break;case"video":case"audio":for(s=0;s<te.length;s++)Cn(te[s],p);s=d;break;case"source":Cn("error",p),s=d;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),s=d;break;case"form":Cn("reset",p),Cn("submit",p),s=d;break;case"details":Cn("toggle",p),s=d;break;case"input":xt(p,d),s=gt(p,d),Cn("invalid",p),pr(m,"onChange");break;case"option":s=qn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},s=a({},d,{value:void 0}),Cn("invalid",p),pr(m,"onChange");break;case"textarea":Jn(p,d),s=Gn(p,d),Cn("invalid",p),pr(m,"onChange");break;default:s=d}fr(f,s),c=void 0;var v=f,y=p,b=s;for(c in b)if(b.hasOwnProperty(c)){var x=b[c];"style"===c?sr(y,x):"dangerouslySetInnerHTML"===c?null!=(x=x?x.__html:void 0)&&ar(y,x):"children"===c?"string"==typeof x?("textarea"!==v||""!==x)&&or(y,x):"number"==typeof x&&or(y,""+x):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(g.hasOwnProperty(c)?null!=x&&pr(m,c):null!=x&&yt(y,c,x,h))}switch(f){case"input":We(p),kt(p,d,!1);break;case"textarea":We(p),Yn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+bt(d.value));break;case"select":(s=p).multiple=!!d.multiple,null!=(p=d.value)?Xn(s,!!d.multiple,p,!1):null!=d.defaultValue&&Xn(s,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof s.onClick&&(p.onclick=mr)}(u=yr(l,u))&&ii(t),t.stateNode=o}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&i("166");break;case 6:o&&null!=t.stateNode?ci(o,t,o.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&i("166")),o=wa(xa.current),wa(ba.current),go(t)?(l=(u=t).stateNode,o=u.memoizedProps,l[A]=u,(u=l.nodeValue!==o)&&ii(t)):(l=t,(u=(9===o.nodeType?o:o.ownerDocument).createTextNode(u))[A]=t,l.stateNode=u));break;case 11:break;case 13:if(u=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Oi=t;break e}u=null!==u,l=null!==o&&null!==o.memoizedState,null!==o&&!u&&l&&(null!==(o=o.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=o,o.nextEffect=s):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(u||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:ka(),ui(t);break;case 10:Bo(t);break;case 9:case 14:break;case 17:Mr(t.type)&&Ir();break;case 18:break;default:i("156")}Oi=null}if(t=e,1===Ri||1!==t.childExpirationTime){for(u=0,l=t.child;null!==l;)(o=l.expirationTime)>u&&(u=o),(s=l.childExpirationTime)>u&&(u=s),l=l.sibling;t.childExpirationTime=u}if(null!==Oi)return Oi;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=ki(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function $i(e){var t=Mo(e.alternate,e,Ri);return e.memoizedProps=e.pendingProps,null===t&&(t=Hi(e)),Ci.current=null,t}function qi(e,t){Pi&&i("243"),Vi(),Pi=!0;var n=Si.current;Si.current=uo;var r=e.nextExpirationTimeToWorkOn;r===Ri&&e===ji&&null!==Oi||(Fi(),Ri=r,Oi=qr((ji=e).current,null),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(t)for(;null!==Oi&&!Tl();)Oi=$i(Oi);else for(;null!==Oi;)Oi=$i(Oi)}catch(t){if(zo=Do=Lo=null,Qa(),null===Oi)a=!0,_l(t);else{null===Oi&&i("271");var o=Oi,l=o.return;if(null!==l){e:{var u=e,s=l,c=o,f=t;if(l=Ri,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var d=f;f=s;var p=-1,m=-1;do{if(13===f.tag){var h=f.alternate;if(null!==h&&null!==(h=h.memoizedState)){m=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=f.pendingProps.maxDuration)&&(0>=h?p=0:(-1===p||h<p)&&(p=h))}f=f.return}while(null!==f);f=s;do{if((h=13===f.tag)&&(h=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),h){if(null===(s=f.updateQueue)?((s=new Set).add(d),f.updateQueue=s):s.add(d),0==(1&f.mode)){f.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((l=Jo(1073741823)).tag=Ho,Yo(c,l))),c.expirationTime=1073741823;break e}s=l;var v=(c=u).pingCache;null===v?(v=c.pingCache=new xi,h=new Set,v.set(d,h)):void 0===(h=v.get(d))&&(h=new Set,v.set(d,h)),h.has(s)||(h.add(s),c=Ji.bind(null,c,d,s),d.then(c,c)),-1===p?u=1073741823:(-1===m&&(m=10*(1073741822-ta(u,l))-5e3),u=m+p),0<=u&&Ni<u&&(Ni=u),f.effectTag|=2048,f.expirationTime=l;break e}f=f.return}while(null!==f);f=Error((lt(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ut(c))}_i=!0,f=oi(f,c),u=s;do{switch(u.tag){case 3:u.effectTag|=2048,u.expirationTime=l,Zo(u,l=wi(u,f,l));break e;case 1:if(p=f,m=u.type,c=u.stateNode,0==(64&u.effectTag)&&("function"==typeof m.getDerivedStateFromError||null!==c&&"function"==typeof c.componentDidCatch&&(null===zi||!zi.has(c)))){u.effectTag|=2048,u.expirationTime=l,Zo(u,l=Ei(u,p,l));break e}}u=u.return}while(null!==u)}Oi=Hi(o);continue}a=!0,_l(t)}}break}if(Pi=!1,Si.current=n,zo=Do=Lo=null,Qa(),a)ji=null,e.finishedWork=null;else if(null!==Oi)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&i("281"),ji=null,_i){if(a=e.latestPendingTime,o=e.latestSuspendedTime,l=e.latestPingedTime,0!==a&&a<r||0!==o&&o<r||0!==l&&l<r)return ea(e,r),void wl(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void wl(e,n,r,t,-1)}t&&-1!==Ni?(ea(e,r),(t=10*(1073741822-ta(e,r)))<Ni&&(Ni=t),t=10*(1073741822-El()),t=Ni-t,wl(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Xi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zi||!zi.has(r)))return Yo(n,e=Ei(n,e=oi(t,e),1073741823)),void Yi(n,1073741823);break;case 3:return Yo(n,e=wi(n,e=oi(t,e),1073741823)),void Yi(n,1073741823)}n=n.return}3===e.tag&&(Yo(e,n=wi(e,n=oi(t,e),1073741823)),Yi(e,1073741823))}function Gi(e,t){var n=o.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Pi&&!Mi)r=Ri;else{switch(n){case o.unstable_ImmediatePriority:r=1073741823;break;case o.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case o.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case o.unstable_LowPriority:case o.unstable_IdlePriority:r=1;break;default:i("313")}null!==ji&&r===Ri&&--r}return n===o.unstable_UserBlockingPriority&&(0===ll||r<ll)&&(ll=r),r}function Ji(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==ji&&Ri===n?ji=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),na(n,e),0!==(n=e.expirationTime)&&kl(e,n)))}function Qi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return a}function Yi(e,t){null!==(e=Qi(e,t))&&(!Pi&&0!==Ri&&t>Ri&&Fi(),Zr(e,t),Pi&&!Mi&&ji===e||kl(e,e.expirationTime),yl>vl&&(yl=0,i("185")))}function Zi(e,t,n,r,a){return o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){return e(t,n,r,a)})}var el=null,tl=null,nl=0,rl=void 0,al=!1,ol=null,il=0,ll=0,ul=!1,sl=null,cl=!1,fl=!1,dl=null,pl=o.unstable_now(),ml=1073741822-(pl/10|0),hl=ml,vl=50,yl=0,bl=null;function gl(){ml=1073741822-((o.unstable_now()-pl)/10|0)}function xl(e,t){if(0!==nl){if(t<nl)return;null!==rl&&o.unstable_cancelCallback(rl)}nl=t,e=o.unstable_now()-pl,rl=o.unstable_scheduleCallback(Pl,{timeout:10*(1073741822-t)-e})}function wl(e,t,n,r,a){e.expirationTime=r,0!==a||Tl()?0<a&&(e.timeoutHandle=gr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,gl(),hl=ml,jl(e,n)}.bind(null,e,t,n),a)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function El(){return al?hl:(Sl(),0!==il&&1!==il||(gl(),hl=ml),hl)}function kl(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tl?(el=tl=e,e.nextScheduledRoot=e):(tl=tl.nextScheduledRoot=e).nextScheduledRoot=el):t>e.expirationTime&&(e.expirationTime=t),al||(cl?fl&&(ol=e,il=1073741823,Rl(e,1073741823,!1)):1073741823===t?Ol(1073741823,!1):xl(e,t))}function Sl(){var e=0,t=null;if(null!==tl)for(var n=tl,r=el;null!==r;){var a=r.expirationTime;if(0===a){if((null===n||null===tl)&&i("244"),r===r.nextScheduledRoot){el=tl=r.nextScheduledRoot=null;break}if(r===el)el=a=r.nextScheduledRoot,tl.nextScheduledRoot=a,r.nextScheduledRoot=null;else{if(r===tl){(tl=n).nextScheduledRoot=el,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(a>e&&(e=a,t=r),r===tl)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ol=t,il=e}var Cl=!1;function Tl(){return!!Cl||!!o.unstable_shouldYield()&&(Cl=!0)}function Pl(){try{if(!Tl()&&null!==el){gl();var e=el;do{var t=e.expirationTime;0!==t&&ml<=t&&(e.nextExpirationTimeToWorkOn=ml),e=e.nextScheduledRoot}while(e!==el)}Ol(0,!0)}finally{Cl=!1}}function Ol(e,t){if(Sl(),t)for(gl(),hl=ml;null!==ol&&0!==il&&e<=il&&!(Cl&&ml>il);)Rl(ol,il,ml>il),Sl(),gl(),hl=ml;else for(;null!==ol&&0!==il&&e<=il;)Rl(ol,il,!1),Sl();if(t&&(nl=0,rl=null),0!==il&&xl(ol,il),yl=0,bl=null,null!==dl)for(e=dl,dl=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ul||(ul=!0,sl=e)}}if(ul)throw e=sl,sl=null,ul=!1,e}function jl(e,t){al&&i("253"),ol=e,il=t,Rl(e,t,!1),Ol(1073741823,!1)}function Rl(e,t,n){if(al&&i("245"),al=!0,n){var r=e.finishedWork;null!==r?Nl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),qi(e,n),null!==(r=e.finishedWork)&&(Tl()?e.finishedWork=r:Nl(e,r,t)))}else null!==(r=e.finishedWork)?Nl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,xr(r)),qi(e,n),null!==(r=e.finishedWork)&&Nl(e,r,t));al=!1}function Nl(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===dl?dl=[r]:dl.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===bl?yl++:(bl=e,yl=0),o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){Ki(e,t)})}function _l(e){null===ol&&i("246"),ol.expirationTime=0,ul||(ul=!0,sl=e)}function Al(e,t){var n=cl;cl=!0;try{return e(t)}finally{(cl=n)||al||Ol(1073741823,!1)}}function Ml(e,t){if(cl&&!fl){fl=!0;try{return e(t)}finally{fl=!1}}return e(t)}function Il(e,t,n){cl||al||0===ll||(Ol(ll,!1),ll=0);var r=cl;cl=!0;try{return o.unstable_runWithPriority(o.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(cl=r)||al||Ol(1073741823,!1)}}function Ll(e,t,n,r,a){var o=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||i("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Mr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);i("171"),l=void 0}if(1===n.tag){var u=n.type;if(Mr(u)){n=zr(n,u,l);break e}}n=l}else n=jr;return null===t.context?t.context=n:t.pendingContext=n,t=a,(a=Jo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(a.callback=t),Vi(),Yo(o,a),Yi(o,r),r}function Dl(e,t,n,r){var a=t.current;return Ll(e,t,n,a=Gi(El(),a),r)}function zl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fl(e){var t=1073741822-25*(1+((1073741822-El()+500)/25|0));t>=Ti&&(t=Ti-1),this._expirationTime=Ti=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Bl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ul(e,t,n){e={current:t=Hr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Wl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Vl(e,t,n,r,a){var o=n._reactRootContainer;if(o){if("function"==typeof a){var i=a;a=function(){var e=zl(o._internalRoot);i.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,a):o.render(t,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ul(e,!1,t)}(n,r),"function"==typeof a){var l=a;a=function(){var e=zl(o._internalRoot);l.call(e)}}Ml(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,a):o.render(t,a)})}return zl(o._internalRoot)}function Kl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Wl(t)||i("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Xe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=z(r);a||i("90"),Ve(r),Et(r,a)}}}break;case"textarea":Qn(e,n);break;case"select":null!=(t=n.value)&&Xn(e,!!n.multiple,t,!1)}},Fl.prototype.render=function(e){this._defer||i("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Bl;return Ll(e,t,null,n,r._onCommit),r},Fl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||i("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,a=t;a!==this;)r=a,a=a._next;null===r&&i("251"),r._next=a._next,this._next=t,e.firstBatch=this}this._defer=!1,jl(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Bl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Bl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&i("191",n),n()}}},Ul.prototype.render=function(e,t){var n=this._internalRoot,r=new Bl;return null!==(t=void 0===t?null:t)&&r.then(t),Dl(e,n,null,r._onCommit),r},Ul.prototype.unmount=function(e){var t=this._internalRoot,n=new Bl;return null!==(e=void 0===e?null:e)&&n.then(e),Dl(null,t,null,n._onCommit),n},Ul.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,a=new Bl;return null!==(n=void 0===n?null:n)&&a.then(n),Dl(t,r,e,a._onCommit),a},Ul.prototype.createBatch=function(){var e=new Fl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},_e=Al,Ae=Il,Me=function(){al||0===ll||(Ol(ll,!1),ll=0)};var Hl={createPortal:Kl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?i("188"):i("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Wl(t)||i("200"),Vl(null,e,t,!0,n)},render:function(e,t,n){return Wl(t)||i("200"),Vl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Wl(n)||i("200"),(null==e||void 0===e._reactInternalFiber)&&i("38"),Vl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Wl(e)||i("40"),!!e._reactRootContainer&&(Ml(function(){Vl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Kl.apply(void 0,arguments)},unstable_batchedUpdates:Al,unstable_interactiveUpdates:Il,flushSync:function(e,t){al&&i("187");var n=cl;cl=!0;try{return Zi(e,t)}finally{cl=n,Ol(1073741823,!1)}},unstable_createRoot:function(e,t){return Wl(e)||i("299","unstable_createRoot"),new Ul(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=cl;cl=!0;try{Zi(e)}finally{(cl=t)||al||Ol(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[L,D,z,j.injectEventPluginsByName,b,K,function(e){T(e,V)},Re,Ne,On,N]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ur=Vr(function(e){return t.onCommitFiberRoot(n,e)}),Wr=Vr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(a({},e,{overrideProps:null,currentDispatcherRef:Ke.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:I,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var $l={default:Hl},ql=$l&&Hl||$l;e.exports=ql.default||ql},function(e,t,n){"use strict";e.exports=n(102)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,a=3,o=-1,i=-1,l=!1,u=!1;function s(){if(!l){var e=n.expirationTime;u?k():u=!0,E(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=a,l=i;a=e,i=t;try{var u=r()}finally{a=o,i=l}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=u.next=u.previous=u;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=u,s()),(t=r.previous).next=r.previous=u,u.next=r,u.previous=t}}function f(){if(-1===o&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?s():u=!1}}}function d(e){l=!0;var a=r;r=e;try{if(e)for(;null!==n;){var o=t.unstable_now();if(!(n.expirationTime<=o))break;do{c()}while(null!==n&&n.expirationTime<=o)}else if(null!==n)do{c()}while(null!==n&&!S())}finally{l=!1,r=a,null!==n?s():u=!1,f()}}var p,m,h=Date,v="function"==typeof setTimeout?setTimeout:void 0,y="function"==typeof clearTimeout?clearTimeout:void 0,b="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,g="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function x(e){p=b(function(t){y(m),e(t)}),m=v(function(){g(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var w=performance;t.unstable_now=function(){return w.now()}}else t.unstable_now=function(){return h.now()};var E,k,S,C=null;if("undefined"!=typeof window?C=window:void 0!==e&&(C=e),C&&C._schedMock){var T=C._schedMock;E=T[0],k=T[1],S=T[2],t.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var P=null,O=function(e){if(null!==P)try{P(e)}finally{P=null}};E=function(e){null!==P?setTimeout(E,0,e):(P=e,setTimeout(O,0,!1))},k=function(){P=null},S=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof b&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var j=null,R=!1,N=-1,_=!1,A=!1,M=0,I=33,L=33;S=function(){return M<=t.unstable_now()};var D=new MessageChannel,z=D.port2;D.port1.onmessage=function(){R=!1;var e=j,n=N;j=null,N=-1;var r=t.unstable_now(),a=!1;if(0>=M-r){if(!(-1!==n&&n<=r))return _||(_=!0,x(F)),j=e,void(N=n);a=!0}if(null!==e){A=!0;try{e(a)}finally{A=!1}}};var F=function(e){if(null!==j){x(F);var t=e-M+L;t<L&&I<L?(8>t&&(t=8),L=t<I?I:t):I=t,M=e+L,R||(R=!0,z.postMessage(void 0))}else _=!1};E=function(e,t){j=e,N=t,A||0>t?z.postMessage(void 0):_||(_=!0,x(F))},k=function(){j=null,R=!1,N=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=a,i=o;a=e,o=t.unstable_now();try{return n()}finally{a=r,o=i,f()}},t.unstable_next=function(e){switch(a){case 1:case 2:case 3:var n=3;break;default:n=a}var r=a,i=o;a=n,o=t.unstable_now();try{return e()}finally{a=r,o=i,f()}},t.unstable_scheduleCallback=function(e,r){var i=-1!==o?o:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=i+r.timeout;else switch(a){case 1:r=i+-1;break;case 2:r=i+250;break;case 5:r=i+1073741823;break;case 4:r=i+1e4;break;default:r=i+5e3}if(e={callback:e,priorityLevel:a,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{i=null;var l=n;do{if(l.expirationTime>r){i=l;break}l=l.next}while(l!==n);null===i?i=n:i===n&&(n=e,s()),(r=i.previous).next=i.previous=e,e.next=i,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=a;return function(){var r=a,i=o;a=n,o=t.unstable_now();try{return e.apply(this,arguments)}finally{a=r,o=i,f()}}},t.unstable_getCurrentPriorityLevel=function(){return a},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<i||S())},t.unstable_continueExecution=function(){null!==n&&s()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(56))},function(e,t,n){var r=n(104);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".LoginScreen {\n    width:100%;\n    min-height: 100vh;\n    background-color:grey;\n}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(a=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(e,t,n){"use strict";var r=n(107);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case f:case d:case i:case u:case l:case m:return e;default:switch(e=e&&e.$$typeof){case c:case p:case s:return e;default:return t}}case v:case h:case o:return t}}}function b(e){return y(e)===d}t.typeOf=y,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=a,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=h,t.Portal=o,t.Profiler=u,t.StrictMode=l,t.Suspense=m,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===u||e===l||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p)},t.isAsyncMode=function(e){return b(e)||y(e)===f},t.isConcurrentMode=b,t.isContextConsumer=function(e){return y(e)===c},t.isContextProvider=function(e){return y(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return y(e)===p},t.isFragment=function(e){return y(e)===i},t.isLazy=function(e){return y(e)===v},t.isMemo=function(e){return y(e)===h},t.isPortal=function(e){return y(e)===o},t.isProfiler=function(e){return y(e)===u},t.isStrictMode=function(e){return y(e)===l},t.isSuspense=function(e){return y(e)===m}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),a=(i(r),i(n(4))),o=i(n(119));i(n(120));function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c=1073741823;t.default=function(e,t){var n,i,f="__create-react-context-"+(0,o.default)()+"__",d=function(e){function n(){var t,r,a,o;l(this,n);for(var i=arguments.length,s=Array(i),c=0;c<i;c++)s[c]=arguments[c];return t=r=u(this,e.call.apply(e,[this].concat(s))),r.emitter=(a=r.props.value,o=[],{on:function(e){o.push(e)},off:function(e){o=o.filter(function(t){return t!==e})},get:function(){return a},set:function(e,t){a=e,o.forEach(function(e){return e(a,t)})}}),u(r,t)}return s(n,e),n.prototype.getChildContext=function(){var e;return(e={})[f]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,a=void 0;((o=n)===(i=r)?0!==o||1/o==1/i:o!=o&&i!=i)?a=0:(a="function"==typeof t?t(n,r):c,0!=(a|=0)&&this.emitter.set(e.value,a))}var o,i},n.prototype.render=function(){return this.props.children},n}(r.Component);d.childContextTypes=((n={})[f]=a.default.object.isRequired,n);var p=function(t){function n(){var e,r;l(this,n);for(var a=arguments.length,o=Array(a),i=0;i<a;i++)o[i]=arguments[i];return e=r=u(this,t.call.apply(t,[this].concat(o))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},u(r,e)}return s(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?c:t},n.prototype.componentDidMount=function(){this.context[f]&&this.context[f].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?c:e},n.prototype.componentWillUnmount=function(){this.context[f]&&this.context[f].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[f]?this.context[f].get():e},n.prototype.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return p.contextTypes=((i={})[f]=a.default.object,i),{Provider:d,Consumer:p}},e.exports=t.default},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(56))},function(e,t,n){"use strict";var r=n(121);e.exports=r},function(e,t,n){"use strict";function r(e){return function(){return e}}var a=function(){};a.thatReturns=r,a.thatReturnsFalse=r(!1),a.thatReturnsTrue=r(!0),a.thatReturnsNull=r(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){var r=n(124);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".RegisterScreen {\n    width:100%;\n    min-height: 100vh;\n    background-color:grey;\n}",""])},function(e,t,n){e.exports=n(126)},function(e,t,n){"use strict";var r=n(15),a=n(66),o=n(128),i=n(72);function l(e){var t=new o(e),n=a(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var u=l(n(69));u.Axios=o,u.create=function(e){return l(i(u.defaults,e))},u.Cancel=n(73),u.CancelToken=n(141),u.isCancel=n(68),u.all=function(e){return Promise.all(e)},u.spread=n(142),e.exports=u,e.exports.default=u},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(15),a=n(67),o=n(129),i=n(130),l=n(72);function u(e){this.defaults=e,this.interceptors={request:new o,response:new o}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}}),r.forEach(["post","put","patch"],function(e){u.prototype[e]=function(t,n,a){return this.request(r.merge(a||{},{method:e,url:t,data:n}))}}),e.exports=u},function(e,t,n){"use strict";var r=n(15);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=a},function(e,t,n){"use strict";var r=n(15),a=n(131),o=n(68),i=n(69),l=n(139),u=n(140);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.baseURL&&!l(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return s(e),t.data=a(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(s(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t){var n,r,a=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,s=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&p())}function p(){if(!c){var e=l(d);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new m(e,t)),1!==s.length||c||l(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=h,a.addListener=h,a.once=h,a.off=h,a.removeListener=h,a.removeAllListeners=h,a.emit=h,a.prependListener=h,a.prependOnceListener=h,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(71);e.exports=function(e,t,n){var a=n.config.validateStatus;!a||a(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(15),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,i={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(i[t]&&a.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(15);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(15);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(a)&&l.push("path="+a),r.isString(o)&&l.push("domain="+o),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(73);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a(function(t){e=t}),cancel:e}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var r=n(144);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".Navigation {\n  padding: 20px 30px;\n}",""])},function(e,t,n){var r=n(146);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".AdminDashboardScreen {\n    width:100%;\n    min-height: 100vh;\n    background-color:grey;\n}\n\n.AdminDashboardScreen .Top {\n    padding: 20px 30px;\n}\n\n.AdminDashboardScreen .ButtonsContainer .Button:first-child {\n    margin-right: 40px;\n}\n\n.AdminDashboardScreen .ButtonsContainer .Button:last-child {\n    margin-left: 40px;\n}\n\n.AdminDashboardScreen .ButtonsContainer .Button {\n    background-color: white;\n    padding: 40px 30px;\n    border: solid black;\n    border-radius: 10%;\n}\n\n@media only screen and (max-width: 768px) {\n    .AdminDashboardScreen .ButtonsContainer .Button:first-child {\n        margin-bottom: 40px;\n        margin-right:0;\n    }\n    \n    .AdminDashboardScreen .ButtonsContainer .Button:last-child {\n        margin-top: 40px;\n        margin-left:0;\n    }   \n}",""])},function(e,t,n){var r=n(148);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".AdminDatabaseTable .Main {\n  padding: 0 30px;\n}\n\n.AdminDatabaseTable .Main .Tools {\n  margin-bottom: 20px;\n}\n\n.AdminDatabaseTable .Main .TableBodyContainer {\n  height: 72vh;\n  max-height: 72vh;\n  overflow: scroll;\n}\n\n.AdminDatabaseTable .Main .TableBodyContainer .HeadRow {\n  background-color: lightgray;\n}\n\n@media only screen and (max-width: 768px) {\n  .AdminDatabaseTable .Main .TableContainer {\n    max-height: 65vh;\n  }\n}",""])},function(e,t,n){var r=n(150);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".PromotorDatabaseScreen {\n  width:100%;\n  min-height: 100vh;\n  background-color:grey;\n}\n",""])},function(e,t,n){var r=n(152);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".SellerDatabaseScreen {\n  width:100%;\n  min-height: 100vh;\n  background-color:grey;\n}\n",""])},function(e,t,n){var r=n(154);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".AdminKelolaKontenViral {\n  width:100%;\n  min-height: 100vh;\n  background-color:grey;\n}\n\n.Tabel {\n  padding: 0 40px;\n  max-height: 40vh;\n  overflow:scroll;\n}",""])},function(e,t,n){var r=n(156);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,".App {\n  text-align: center;\n}",""])},function(e,t,n){var r=n(158);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(20)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n}",""])},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(10),i=n.n(o),l=n(12),u=n(76),s=n.n(u),c=n(4),f=n.n(c),d=n(6);function p(e){return"/"===e.charAt(0)}function m(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],a=e&&p(e),o=t&&p(t),i=a||o;if(e&&p(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var l=void 0;if(r.length){var u=r[r.length-1];l="."===u||".."===u||""===u}else l=!1;for(var s=0,c=r.length;c>=0;c--){var f=r[c];"."===f?m(r,c):".."===f?(m(r,c),s++):s&&(m(r,c),s--)}if(!i)for(;s--;s)r.unshift("..");!i||""===r[0]||r[0]&&p(r[0])||r.unshift("");var d=r.join("/");return l&&"/"!==d.substr(-1)&&(d+="/"),d},v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var y=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":v(t);if(r!==(void 0===n?"undefined":v(n)))return!1;if("object"===r){var a=t.valueOf(),o=n.valueOf();if(a!==t||o!==n)return e(a,o);var i=Object.keys(t),l=Object.keys(n);return i.length===l.length&&i.every(function(r){return e(t[r],n[r])})}return!1},b=!0,g="Invariant failed";var x=function(e,t){if(!e)throw b?new Error(g):new Error(g+": "+(t||""))};function w(e){return"/"===e.charAt(0)?e:"/"+e}function E(e){return"/"===e.charAt(0)?e.substr(1):e}function k(e,t){return function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)}(e,t)?e.substr(t.length):e}function S(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function C(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function T(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=Object(d.a)({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=h(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function P(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&y(e.state,t.state)}function O(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}var j=!("undefined"==typeof window||!window.document||!window.document.createElement);function R(e,t){t(window.confirm(e))}var N="popstate",_="hashchange";function A(){try{return window.history.state||{}}catch(e){return{}}}function M(e){void 0===e&&(e={}),j||x(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,i=o.forceRefresh,l=void 0!==i&&i,u=o.getUserConfirmation,s=void 0===u?R:u,c=o.keyLength,f=void 0===c?6:c,p=e.basename?S(w(e.basename)):"";function m(e){var t=e||{},n=t.key,r=t.state,a=window.location,o=a.pathname+a.search+a.hash;return p&&(o=k(o,p)),T(o,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var v=O();function y(e){Object(d.a)(U,e),U.length=n.length,v.notifyListeners(U.location,U.action)}function b(e){(function(e){void 0===e.state&&navigator.userAgent.indexOf("CriOS")})(e)||P(m(e.state))}function g(){P(m(A()))}var E=!1;function P(e){if(E)E=!1,y();else{v.confirmTransitionTo(e,"POP",s,function(t){t?y({action:"POP",location:e}):function(e){var t=U.location,n=I.indexOf(t.key);-1===n&&(n=0);var r=I.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(E=!0,D(a))}(e)})}}var M=m(A()),I=[M.key];function L(e){return p+C(e)}function D(e){n.go(e)}var z=0;function F(e){1===(z+=e)&&1===e?(window.addEventListener(N,b),a&&window.addEventListener(_,g)):0===z&&(window.removeEventListener(N,b),a&&window.removeEventListener(_,g))}var B=!1;var U={length:n.length,action:"POP",location:M,createHref:L,push:function(e,t){var a=T(e,t,h(),U.location);v.confirmTransitionTo(a,"PUSH",s,function(e){if(e){var t=L(a),o=a.key,i=a.state;if(r)if(n.pushState({key:o,state:i},null,t),l)window.location.href=t;else{var u=I.indexOf(U.location.key),s=I.slice(0,-1===u?0:u+1);s.push(a.key),I=s,y({action:"PUSH",location:a})}else window.location.href=t}})},replace:function(e,t){var a=T(e,t,h(),U.location);v.confirmTransitionTo(a,"REPLACE",s,function(e){if(e){var t=L(a),o=a.key,i=a.state;if(r)if(n.replaceState({key:o,state:i},null,t),l)window.location.replace(t);else{var u=I.indexOf(U.location.key);-1!==u&&(I[u]=a.key),y({action:"REPLACE",location:a})}else window.location.replace(t)}})},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=v.setPrompt(e);return B||(F(1),B=!0),function(){return B&&(B=!1,F(-1)),t()}},listen:function(e){var t=v.appendListener(e);return F(1),function(){F(-1),t()}}};return U}var I="hashchange",L={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+E(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:E,decodePath:w},slash:{encodePath:w,decodePath:w}};function D(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function z(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)}function F(e){void 0===e&&(e={}),j||x(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?R:r,o=n.hashType,i=void 0===o?"slash":o,l=e.basename?S(w(e.basename)):"",u=L[i],s=u.encodePath,c=u.decodePath;function f(){var e=c(D());return l&&(e=k(e,l)),T(e)}var p=O();function m(e){Object(d.a)(B,e),B.length=t.length,p.notifyListeners(B.location,B.action)}var h=!1,v=null;function y(){var e=D(),t=s(e);if(e!==t)z(t);else{var n=f(),r=B.location;if(!h&&P(r,n))return;if(v===C(n))return;v=null,function(e){if(h)h=!1,m();else{p.confirmTransitionTo(e,"POP",a,function(t){t?m({action:"POP",location:e}):function(e){var t=B.location,n=N.lastIndexOf(C(t));-1===n&&(n=0);var r=N.lastIndexOf(C(e));-1===r&&(r=0);var a=n-r;a&&(h=!0,_(a))}(e)})}}(n)}}var b=D(),g=s(b);b!==g&&z(g);var E=f(),N=[C(E)];function _(e){t.go(e)}var A=0;function M(e){1===(A+=e)&&1===e?window.addEventListener(I,y):0===A&&window.removeEventListener(I,y)}var F=!1;var B={length:t.length,action:"POP",location:E,createHref:function(e){return"#"+s(l+C(e))},push:function(e,t){var n=T(e,void 0,void 0,B.location);p.confirmTransitionTo(n,"PUSH",a,function(e){if(e){var t=C(n),r=s(l+t);if(D()!==r){v=t,function(e){window.location.hash=e}(r);var a=N.lastIndexOf(C(B.location)),o=N.slice(0,-1===a?0:a+1);o.push(t),N=o,m({action:"PUSH",location:n})}else m()}})},replace:function(e,t){var n=T(e,void 0,void 0,B.location);p.confirmTransitionTo(n,"REPLACE",a,function(e){if(e){var t=C(n),r=s(l+t);D()!==r&&(v=t,z(r));var a=N.indexOf(C(B.location));-1!==a&&(N[a]=t),m({action:"REPLACE",location:n})}})},go:_,goBack:function(){_(-1)},goForward:function(){_(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return F||(M(1),F=!0),function(){return F&&(F=!1,M(-1)),t()}},listen:function(e){var t=p.appendListener(e);return M(1),function(){M(-1),t()}}};return B}function B(e,t,n){return Math.min(Math.max(e,t),n)}var U=n(57),W=n.n(U);n(44);function V(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n(77);var K=function(e){var t=s()();return t.Provider.displayName=e+".Provider",t.Consumer.displayName=e+".Consumer",t}("Router"),H=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen(function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e})),n}Object(l.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return a.a.createElement(K.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(a.a.Component);a.a.Component;a.a.Component;var $={},q=1e4,X=0;function G(e,t){void 0===t&&(t={}),"string"==typeof t&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,l=void 0!==i&&i,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce(function(t,n){if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=$[n]||($[n]={});if(r[e])return r[e];var a=[],o={regexp:W()(e,a,t),keys:a};return X<q&&(r[e]=o,X++),o}(n,{end:o,strict:l,sensitive:s}),a=r.regexp,i=r.keys,u=a.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return o&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:i.reduce(function(e,t,n){return e[t.name]=f[n],e},{})}},null)}var J=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(K.Consumer,null,function(t){t||x(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?G(n.pathname,e.props):t.match,o=Object(d.a)({},t,{location:n,match:r}),i=e.props,l=i.children,u=i.component,s=i.render;(Array.isArray(l)&&0===l.length&&(l=null),"function"==typeof l)&&(void 0===(l=l(o))&&(l=null));return a.a.createElement(K.Provider,{value:o},l&&!function(e){return 0===a.a.Children.count(e)}(l)?l:o.match?u?a.a.createElement(u,o):s?s(o):null:null)})},t}(a.a.Component);function Q(e){return"/"===e.charAt(0)?e:"/"+e}function Y(e,t){if(!e)return t;var n=Q(e);return 0!==t.pathname.indexOf(n)?t:Object(d.a)({},t,{pathname:t.pathname.substr(n.length)})}function Z(e){return"string"==typeof e?e:C(e)}function ee(e){return function(){x(!1)}}function te(){}a.a.Component;a.a.Component;var ne=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).history=M(t.props),t}return Object(l.a)(t,e),t.prototype.render=function(){return a.a.createElement(H,{history:this.history,children:this.props.children})},t}(a.a.Component);a.a.Component;var re=function(e){function t(){return e.apply(this,arguments)||this}Object(l.a)(t,e);var n=t.prototype;return n.handleClick=function(e,t){(this.props.onClick&&this.props.onClick(e),e.defaultPrevented||0!==e.button||this.props.target&&"_self"!==this.props.target||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))||(e.preventDefault(),(this.props.replace?t.replace:t.push)(this.props.to))},n.render=function(){var e=this,t=this.props,n=t.innerRef,r=(t.replace,t.to),o=V(t,["innerRef","replace","to"]);return a.a.createElement(K.Consumer,null,function(t){t||x(!1);var i="string"==typeof r?T(r,null,null,t.location):r,l=i?t.history.createHref(i):"";return a.a.createElement("a",Object(d.a)({},o,{onClick:function(n){return e.handleClick(n,t.history)},href:l,ref:n}))})},t}(a.a.Component);var ae,oe=n(1),ie=n.n(oe),le=n(2),ue=n.n(le),se=n(23),ce=n.n(se),fe=n(24),de=n.n(fe),pe=n(29),me=n.n(pe),he=n(30),ve=n.n(he),ye=n(31),be=n.n(ye),ge=n(9),xe=n.n(ge),we=(n(13),n(3)),Ee=n(75),ke=n.n(Ee),Se=n(25),Ce=n.n(Se),Te=!("undefined"==typeof window||!window.document||!window.document.createElement);function Pe(){if(ae)return ae;if(!Te||!window.document.body)return"indeterminate";var e=window.document.createElement("div");return e.appendChild(document.createTextNode("ABCD")),e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e),ae="reverse",e.scrollLeft>0?ae="default":(e.scrollLeft=1,0===e.scrollLeft&&(ae="negative")),document.body.removeChild(e),ae}function Oe(e,t){var n=e.scrollLeft;if("rtl"!==t)return n;var r=Pe();if("indeterminate"===r)return Number.NaN;switch(r){case"negative":return e.scrollWidth-e.clientWidth+n;case"reverse":return e.scrollWidth-e.clientWidth-n}return n}function je(e){return(1+Math.sin(Math.PI*e-Math.PI/2))/2}var Re=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){},o=r.ease,i=void 0===o?je:o,l=r.duration,u=void 0===l?300:l,s=null,c=t[e],f=!1,d=function(){f=!0};return c===n?(a(new Error("Element already at target position")),d):(requestAnimationFrame(function r(o){if(f)a(new Error("Animation cancelled"));else{null===s&&(s=o);var l=Math.min(1,(o-s)/u);t[e]=i(l)*(n-c)+c,l>=1?requestAnimationFrame(function(){a(null)}):requestAnimationFrame(r)}}),d)},Ne={width:99,height:99,position:"absolute",top:-9999,overflow:"scroll"};function _e(e){var t=e.onChange,n=ue()(e,["onChange"]),r=a.a.useRef(),o=a.a.useRef(null),i=function(){r.current=o.current.offsetHeight-o.current.clientHeight};return a.a.useEffect(function(){var e=Ce()(function(){var e=r.current;i(),e!==r.current&&t(r.current)},166);return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[t]),a.a.useEffect(function(){i(),t(r.current)},[t]),a.a.createElement("div",ie()({style:Ne,ref:o},n))}var Ae=n(5),Me=n(7),Ie=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,i=ue()(e,["classes","className","color"]);return a.a.createElement("span",ie()({className:Object(we.a)(n.root,n["color".concat(Object(Me.a)(o))],r),ref:t},i))}),Le=Object(Ae.a)(function(e){return{root:{position:"absolute",height:2,bottom:0,width:"100%",transition:e.transitions.create()},colorPrimary:{backgroundColor:e.palette.primary.main},colorSecondary:{backgroundColor:e.palette.secondary.main}}},{name:"PrivateTabIndicator"})(Ie),De=n(64);function ze(e,t){var n=a.a.memo(a.a.forwardRef(function(t,n){return a.a.createElement(De.a,ie()({},t,{ref:n}),e)}));return n.muiName=De.a.muiName,n}var Fe=ze(a.a.createElement("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"})),Be=ze(a.a.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"})),Ue=n(8),We=n.n(Ue);function Ve(e,t){return a.a.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}function Ke(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function He(e,t){return a.a.useMemo(function(){return null==e&&null==t?null:function(n){Ke(e,n),Ke(t,n)}},[e,t])}var $e="undefined"!=typeof window?a.a.useLayoutEffect:a.a.useEffect;var qe=function(e){var t=e.children,n=e.defer,r=void 0!==n&&n,o=e.fallback,i=void 0===o?null:o,l=a.a.useState(!1),u=We()(l,2),s=u[0],c=u[1];return $e(function(){r||c(!0)},[r]),a.a.useEffect(function(){r&&c(!0)},[r]),a.a.createElement(a.a.Fragment,null,s?t:i)},Xe=!0,Ge=!1,Je=null,Qe={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Ye(){Xe=!0}function Ze(){Xe=!1}function et(){"hidden"===this.visibilityState&&Ge&&(Xe=!0)}function tt(e){var t,n,r,a=e.target;try{return a.matches(":focus-visible")}catch(e){}return Xe||(n=(t=a).type,!("INPUT"!==(r=t.tagName)||!Qe[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function nt(){Ge=!0,window.clearTimeout(Je),Je=window.setTimeout(function(){Ge=!1,window.clearTimeout(Je)},100)}function rt(){return{isFocusVisible:tt,onBlurVisible:nt,ref:a.a.useCallback(function(e){var t=i.a.findDOMNode(e);null!=t&&function(e){e.addEventListener("keydown",Ye,!0),e.addEventListener("mousedown",Ze,!0),e.addEventListener("pointerdown",Ze,!0),e.addEventListener("touchstart",Ze,!0),e.addEventListener("visibilitychange",et,!0)}(t.ownerDocument)},[])}}var at=n(26),ot=n.n(at),it=n(38),lt=a.a.createContext(null);function ut(e,t){var n=Object.create(null);return e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&Object(r.isValidElement)(e)?t(e):e}(e)}),n}function st(e,t,n){return null!=n[t]?n[t]:e.props[t]}function ct(e,t,n){var a=ut(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,a=Object.create(null),o=[];for(var i in e)i in t?o.length&&(a[i]=o,o=[]):o.push(i);var l={};for(var u in t){if(a[u])for(r=0;r<a[u].length;r++){var s=a[u][r];l[a[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<o.length;r++)l[o[r]]=n(o[r]);return l}(t,a);return Object.keys(o).forEach(function(i){var l=o[i];if(Object(r.isValidElement)(l)){var u=i in t,s=i in a,c=t[i],f=Object(r.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&Object(r.isValidElement)(c)&&(o[i]=Object(r.cloneElement)(l,{onExited:n.bind(null,l),in:c.props.in,exit:st(l,"exit",e),enter:st(l,"enter",e)})):o[i]=Object(r.cloneElement)(l,{in:!1}):o[i]=Object(r.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:st(l,"exit",e),enter:st(l,"enter",e)})}}),o}var ft=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},dt=function(e){function t(t,n){var r,a=(r=e.call(this,t,n)||this).handleExited.bind(Object(it.a)(Object(it.a)(r)));return r.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},r}Object(l.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,a,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,a=i,ut(n.children,function(e){return Object(r.cloneElement)(e,{onExited:a.bind(null,e),in:!0,appear:st(e,"appear",n),enter:st(e,"enter",n),exit:st(e,"exit",n)})})):ct(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=ut(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState(function(t){var n=Object(d.a)({},t.children);return delete n[e.key],{children:n}}))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=V(e,["component","childFactory"]),o=this.state.contextValue,i=ft(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?a.a.createElement(lt.Provider,{value:o},i):a.a.createElement(lt.Provider,{value:o},a.a.createElement(t,r,i))},t}(a.a.Component);dt.propTypes={},dt.defaultProps={component:"div",childFactory:function(e){return e}};var pt=dt,mt=!1,ht="unmounted",vt="exited",yt="entering",bt="entered",gt=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a=vt,r.appearStatus=yt):a=bt:a=t.unmountOnExit||t.mountOnEnter?ht:vt,r.state={status:a},r.nextCallback=null,r}Object(l.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===ht?{status:vt}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==yt&&n!==bt&&(t=yt):n!==yt&&n!==bt||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=i.a.findDOMNode(this);t===yt?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===vt&&this.setState({status:ht})},n.performEnter=function(e,t){var n=this,r=this.props.enter,a=this.context?this.context.isMounting:t,o=this.getTimeouts(),i=a?o.appear:o.enter;!t&&!r||mt?this.safeSetState({status:bt},function(){n.props.onEntered(e)}):(this.props.onEnter(e,a),this.safeSetState({status:yt},function(){n.props.onEntering(e,a),n.onTransitionEnd(e,i,function(){n.safeSetState({status:bt},function(){n.props.onEntered(e,a)})})}))},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n&&!mt?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:vt},function(){t.props.onExited(e)})})})):this.safeSetState({status:vt},function(){t.props.onExited(e)})},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===ht)return null;var t=this.props,n=t.children,r=V(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return a.a.createElement(lt.Provider,{value:null},n(e,r));var o=a.a.Children.only(n);return a.a.createElement(lt.Provider,{value:null},a.a.cloneElement(o,r))},t}(a.a.Component);function xt(){}gt.contextType=lt,gt.propTypes={},gt.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:xt,onEntering:xt,onEntered:xt,onExit:xt,onExiting:xt,onExited:xt},gt.UNMOUNTED=0,gt.EXITED=1,gt.ENTERING=2,gt.ENTERED=3,gt.EXITING=4;var wt=gt;var Et=function(e){var t=e.classes,n=e.className,r=e.pulsate,o=void 0!==r&&r,i=e.rippleX,l=e.rippleY,u=e.rippleSize,s=ue()(e,["classes","className","pulsate","rippleX","rippleY","rippleSize"]),c=a.a.useState(!1),f=We()(c,2),d=f[0],p=f[1],m=a.a.useState(!1),h=We()(m,2),v=h[0],y=h[1],b=Object(we.a)(t.ripple,n,d&&t.rippleVisible,o&&t.ripplePulsate),g={width:u,height:u,top:-u/2+l,left:-u/2+i},x=Object(we.a)(t.child,v&&t.childLeaving,o&&t.childPulsate);return a.a.createElement(wt,ie()({onEnter:function(){p(!0)},onExit:function(){y(!0)}},s),a.a.createElement("span",{className:b,style:g},a.a.createElement("span",{className:x})))},kt=550,St=80,Ct=function(e){function t(){var e,n;ce()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=me()(this,(e=ve()(t)).call.apply(e,[this].concat(o)))).state={nextKey:0,ripples:[]},n.container=a.a.createRef(),n.pulsate=function(){n.start({},{pulsate:!0})},n.start=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0,a=t.pulsate,o=void 0!==a&&a,i=t.center,l=void 0===i?n.props.center||t.pulsate:i,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&n.ignoringMouseDown)n.ignoringMouseDown=!1;else{"touchstart"===e.type&&(n.ignoringMouseDown=!0);var c,f,d,p=s?null:n.container.current,m=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(m.width/2),f=Math.round(m.height/2);else{var h=e.clientX?e.clientX:e.touches[0].clientX,v=e.clientY?e.clientY:e.touches[0].clientY;c=Math.round(h-m.left),f=Math.round(v-m.top)}if(l)(d=Math.sqrt((2*Math.pow(m.width,2)+Math.pow(m.height,2))/3))%2==0&&(d+=1);else{var y=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,b=2*Math.max(Math.abs((p?p.clientHeight:0)-f),f)+2;d=Math.sqrt(Math.pow(y,2)+Math.pow(b,2))}e.touches?(n.startTimerCommit=function(){n.startCommit({pulsate:o,rippleX:c,rippleY:f,rippleSize:d,cb:r})},n.startTimer=setTimeout(function(){n.startTimerCommit&&(n.startTimerCommit(),n.startTimerCommit=null)},St)):n.startCommit({pulsate:o,rippleX:c,rippleY:f,rippleSize:d,cb:r})}},n.startCommit=function(e){var t=e.pulsate,r=e.rippleX,o=e.rippleY,i=e.rippleSize,l=e.cb;n.setState(function(e){return{nextKey:e.nextKey+1,ripples:[].concat(ot()(e.ripples),[a.a.createElement(Et,{key:e.nextKey,classes:n.props.classes,timeout:{exit:kt,enter:kt},pulsate:t,rippleX:r,rippleY:o,rippleSize:i})])}},l)},n.stop=function(e,t){clearTimeout(n.startTimer);var r=n.state.ripples;if("touchend"===e.type&&n.startTimerCommit)return e.persist(),n.startTimerCommit(),n.startTimerCommit=null,void(n.startTimer=setTimeout(function(){n.stop(e,t)}));n.startTimerCommit=null,r&&r.length&&n.setState({ripples:r.slice(1)},t)},n}return be()(t,e),de()(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.startTimer)}},{key:"render",value:function(){var e=this.props,t=(e.center,e.classes),n=e.className,r=ue()(e,["center","classes","className"]);return a.a.createElement("span",ie()({className:Object(we.a)(t.root,n),ref:this.container},r),a.a.createElement(pt,{component:null,enter:!0,exit:!0},this.state.ripples))}}]),t}(a.a.PureComponent);Ct.defaultProps={center:!1};var Tt=Object(Ae.a)(function(e){return{root:{display:"block",position:"absolute",overflow:"hidden",borderRadius:"inherit",width:"100%",height:"100%",left:0,top:0,pointerEvents:"none",zIndex:0},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"mui-ripple-enter ".concat(kt,"ms ").concat(e.transitions.easing.easeInOut),animationName:"$mui-ripple-enter"},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"mui-ripple-exit ".concat(kt,"ms ").concat(e.transitions.easing.easeInOut),animationName:"$mui-ripple-exit"},childPulsate:{position:"absolute",left:0,top:0,animation:"mui-ripple-pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite"),animationName:"$mui-ripple-pulsate"},"@keyframes mui-ripple-enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes mui-ripple-exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes mui-ripple-pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}},{flip:!1,name:"MuiTouchRipple"})(Ct),Pt="undefined"!=typeof window?a.a.useLayoutEffect:a.a.useEffect;function Ot(e){var t=a.a.useRef(e);return Pt(function(){t.current=e}),a.a.useCallback(function(e){return(0,t.current)(e)},[])}var jt=a.a.forwardRef(function(e,t){var n=e.action,r=e.buttonRef,o=e.centerRipple,l=void 0!==o&&o,u=e.children,s=e.classes,c=e.className,f=e.component,d=void 0===f?"button":f,p=e.disabled,m=e.disableRipple,h=void 0!==m&&m,v=e.disableTouchRipple,y=void 0!==v&&v,b=e.focusRipple,g=void 0!==b&&b,x=e.focusVisibleClassName,w=e.onBlur,E=e.onClick,k=e.onFocus,S=e.onFocusVisible,C=e.onKeyDown,T=e.onKeyUp,P=e.onMouseDown,O=e.onMouseLeave,j=e.onMouseUp,R=e.onTouchEnd,N=e.onTouchMove,_=e.onTouchStart,A=e.onDragEnd,M=e.tabIndex,I=void 0===M?0:M,L=e.TouchRippleProps,D=e.type,z=void 0===D?"button":D,F=ue()(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragEnd","tabIndex","TouchRippleProps","type"]),B=a.a.useRef(null);var U=a.a.useRef(null),W=a.a.useState(!1),V=We()(W,2),K=V[0],H=V[1];p&&K&&H(!1);var $=rt(),q=$.isFocusVisible,X=$.onBlurVisible,G=$.ref;function J(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:y;return Ot(function(r){return t&&t(r),!(r.defaultPrevented||n)&&U.current&&U.current[e](r),!0})}a.a.useImperativeHandle(n,function(){return{focusVisible:function(){H(!0),B.current.focus()}}},[]),a.a.useEffect(function(){K&&g&&!h&&U.current.pulsate()},[h,g,K]);var Q=J("start",P),Y=J("stop",A),Z=J("stop",j),ee=J("stop",function(e){K&&e.preventDefault(),O&&O(e)}),te=J("start",_),ne=J("stop",R),re=J("stop",N),ae=J("stop",function(e){K&&(X(e),H(!1)),w&&w(e)},!1),oe=Ot(function(e){p||(B.current||(B.current=e.currentTarget),q(e)&&(H(!0),S&&S(e)),k&&k(e))}),le=a.a.useRef(!1),se=Ot(function(e){g&&!le.current&&K&&U.current&&" "===e.key&&(le.current=!0,e.persist(),U.current.stop(e,function(){U.current.start(e)})),C&&C(e);var t=i.a.findDOMNode(B.current);e.target!==e.currentTarget||!d||"button"===d||" "!==e.key&&"Enter"!==e.key||"A"===t.tagName&&t.href||(e.preventDefault(),E&&E(e))}),ce=Ot(function(e){g&&" "===e.key&&U.current&&K&&(le.current=!1,e.persist(),U.current.stop(e,function(){U.current.pulsate(e)})),T&&T(e)}),fe=Object(we.a)(s.root,c,K&&[s.focusVisible,x],p&&s.disabled),de=d;"button"===de&&F.href&&(de="a");var pe={};"button"===de?(pe.type=z,pe.disabled=p):(pe.role="button",pe["aria-disabled"]=p);var me=He(r,t),he=He(G,B),ve=He(me,he);return a.a.createElement(de,ie()({className:fe,onBlur:ae,onClick:E,onFocus:oe,onKeyDown:se,onKeyUp:ce,onMouseDown:Q,onMouseLeave:ee,onMouseUp:Z,onDragEnd:Y,onTouchEnd:ne,onTouchMove:re,onTouchStart:te,ref:ve,tabIndex:p?-1:I},pe,F),u,h||p?null:a.a.createElement(qe,null,a.a.createElement(Tt,ie()({ref:U,center:l},L))))}),Rt=Object(Ae.a)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(jt),Nt=a.a.createElement(Fe,{fontSize:"small"}),_t=a.a.createElement(Be,{fontSize:"small"}),At=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.direction,i=e.onClick,l=e.visible,u=void 0===l||l,s=ue()(e,["classes","className","direction","onClick","visible"]),c=Object(we.a)(n.root,r);return u?a.a.createElement(Rt,ie()({component:"div",className:c,onClick:i,ref:t,role:null,tabIndex:null},s),"left"===o?Nt:_t):a.a.createElement("div",{className:c})}),Mt=Object(Ae.a)({root:{color:"inherit",width:40,flexShrink:0}},{name:"PrivateTabScrollButton"})(At),It=n(47),Lt=n.n(It);function Dt(e){var t=a.a.forwardRef(function(t,n){return a.a.createElement(e,ie()({},t,{innerRef:n}))});return Lt()(t,e)}var zt=function(e){function t(){var e;return ce()(this,t),(e=me()(this,ve()(t).call(this))).state={indicatorStyle:{},scrollerStyle:{overflow:"hidden",marginBottom:null},showLeftScroll:!1,showRightScroll:!1,mounted:!1},e.getConditionalElements=function(){var t=e.props,n=t.classes,r=t.ScrollButtonComponent,o=t.scrollButtons,i=t.theme,l=t.variant,u=e.state,s=u.showLeftScroll,c=u.showRightScroll,f={},d="scrollable"===l;f.scrollbarSizeListener=d?a.a.createElement(_e,{className:n.scrollable,onChange:e.handleScrollbarSizeChange}):null;var p=d&&("auto"===o&&(s||c)||"desktop"===o||"on"===o);return f.scrollButtonLeft=p?a.a.createElement(r,{direction:"rtl"===i.direction?"right":"left",onClick:e.handleLeftScrollClick,visible:s,className:Object(we.a)(n.scrollButtons,"on"!==o&&n.scrollButtonsDesktop)}):null,f.scrollButtonRight=p?a.a.createElement(r,{direction:"rtl"===i.direction?"left":"right",onClick:e.handleRightScrollClick,visible:c,className:Object(we.a)(n.scrollButtons,"on"!==o&&n.scrollButtonsDesktop)}):null,f},e.getTabsMeta=function(t,n){var r,a;if(e.tabsRef){var o=e.tabsRef.getBoundingClientRect();r={clientWidth:e.tabsRef.clientWidth,scrollLeft:e.tabsRef.scrollLeft,scrollLeftNormalized:Oe(e.tabsRef,n),scrollWidth:e.tabsRef.scrollWidth,left:o.left,right:o.right}}if(e.tabsRef&&!1!==t){var i=e.tabsRef.children[0].children;if(i.length>0){var l=i[e.valueToIndex.get(t)];a=l?l.getBoundingClientRect():null}}return{tabsMeta:r,tabMeta:a}},e.handleLeftScrollClick=function(){e.moveTabsScroll(-e.tabsRef.clientWidth)},e.handleRightScrollClick=function(){e.moveTabsScroll(e.tabsRef.clientWidth)},e.handleScrollbarSizeChange=function(t){e.setState({scrollerStyle:{overflow:null,marginBottom:-t}})},e.handleTabsRef=function(t){e.tabsRef=t},e.moveTabsScroll=function(t){var n=e.props.theme,r="rtl"===n.direction?-1:1,a=e.tabsRef.scrollLeft+t*r,o="rtl"===n.direction&&"reverse"===Pe()?-1:1;e.scroll(o*a)},e.scrollSelectedIntoView=function(){var t=e.props,n=t.theme,r=t.value,a=e.getTabsMeta(r,n.direction),o=a.tabsMeta,i=a.tabMeta;if(i&&o)if(i.left<o.left){var l=o.scrollLeft+(i.left-o.left);e.scroll(l)}else if(i.right>o.right){var u=o.scrollLeft+(i.right-o.right);e.scroll(u)}},e.scroll=function(t){Re("scrollLeft",e.tabsRef,t)},e.updateScrollButtonState=function(){var t=e.props,n=t.scrollButtons,r=t.theme;if("scrollable"===t.variant&&"off"!==n){var a=e.tabsRef,o=a.scrollWidth,i=a.clientWidth,l=Oe(e.tabsRef,r.direction),u="rtl"===r.direction?l<o-i-1:l>1,s="rtl"!==r.direction?l<o-i-1:l>1;u===e.state.showLeftScroll&&s===e.state.showRightScroll||e.setState({showLeftScroll:u,showRightScroll:s})}},"undefined"!=typeof window&&(e.handleResize=Ce()(function(){e.updateIndicatorState(e.props),e.updateScrollButtonState()},166),e.handleTabsScroll=Ce()(function(){e.updateScrollButtonState()},166)),e}return be()(t,e),de()(t,[{key:"componentDidMount",value:function(){this.setState({mounted:!0}),this.updateIndicatorState(this.props),this.updateScrollButtonState(),this.props.action&&this.props.action({updateIndicator:this.handleResize})}},{key:"componentDidUpdate",value:function(e,t){this.updateIndicatorState(this.props),this.updateScrollButtonState(),this.state.indicatorStyle!==t.indicatorStyle&&this.scrollSelectedIntoView()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear(),this.handleTabsScroll.clear()}},{key:"updateIndicatorState",value:function(e){var t=e.theme,n=e.value,r=this.getTabsMeta(n,t.direction),a=r.tabsMeta,o=r.tabMeta,i=0;if(o&&a){var l="rtl"===t.direction?a.scrollLeftNormalized+a.clientWidth-a.scrollWidth:a.scrollLeft;i=Math.round(o.left-a.left+l)}var u={left:i,width:o?Math.round(o.width):0};u.left===this.state.indicatorStyle.left&&u.width===this.state.indicatorStyle.width||isNaN(u.left)||isNaN(u.width)||this.setState({indicatorStyle:u})}},{key:"render",value:function(){var e=this,t=this.props,n=(t.action,t.centered),r=t.children,o=t.classes,i=t.className,l=t.component,u=t.indicatorColor,s=t.innerRef,c=t.onChange,f=(t.ScrollButtonComponent,t.scrollButtons,t.TabIndicatorProps),d=void 0===f?{}:f,p=t.textColor,m=(t.theme,t.value),h=t.variant,v=ue()(t,["action","centered","children","classes","className","component","indicatorColor","innerRef","onChange","ScrollButtonComponent","scrollButtons","TabIndicatorProps","textColor","theme","value","variant"]),y="scrollable"===h,b=a.a.createElement(Le,ie()({className:o.indicator,color:u},d,{style:ie()({},this.state.indicatorStyle,d.style)}));this.valueToIndex=new Map;var g=0,x=a.a.Children.map(r,function(t){if(!a.a.isValidElement(t))return null;var n=void 0===t.props.value?g:t.props.value;e.valueToIndex.set(n,g);var r=n===m;return g+=1,a.a.cloneElement(t,{fullWidth:"fullWidth"===h,indicator:r&&!e.state.mounted&&b,selected:r,onChange:c,textColor:p,value:n})}),w=this.getConditionalElements();return a.a.createElement(l,ie()({className:Object(we.a)(o.root,i),ref:s},v),a.a.createElement(ke.a,{target:"window",onResize:this.handleResize}),a.a.createElement("div",{className:o.flexContainer},w.scrollButtonLeft,w.scrollbarSizeListener,a.a.createElement("div",{className:Object(we.a)(o.scroller,y?o.scrollable:o.fixed),style:this.state.scrollerStyle,ref:this.handleTabsRef,role:"tablist",onScroll:this.handleTabsScroll},a.a.createElement("div",{className:Object(we.a)(o.flexContainer,n&&!y&&o.centered)},x),this.state.mounted&&b),w.scrollButtonRight))}}]),t}(a.a.Component);zt.defaultProps={centered:!1,component:"div",indicatorColor:"secondary",ScrollButtonComponent:Mt,scrollButtons:"auto",textColor:"inherit",variant:"standard"};var Ft=Object(Ae.a)(function(e){return{root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch"},flexContainer:{display:"flex"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:xe()({},e.breakpoints.down("xs"),{display:"none"}),indicator:{}}},{name:"MuiTabs",withTheme:!0})(Dt(zt)),Bt=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.disabled,i=void 0!==o&&o,l=e.disableFocusRipple,u=void 0!==l&&l,s=e.fullWidth,c=e.icon,f=e.indicator,d=e.label,p=e.onChange,m=e.onClick,h=e.selected,v=e.textColor,y=void 0===v?"inherit":v,b=e.value,g=e.wrapped,x=void 0!==g&&g,w=ue()(e,["classes","className","disabled","disableFocusRipple","fullWidth","icon","indicator","label","onChange","onClick","selected","textColor","value","wrapped"]);return a.a.createElement(Rt,ie()({focusRipple:!u,className:Object(we.a)(n.root,n["textColor".concat(Object(Me.a)(y))],r,i&&n.disabled,h&&n.selected,d&&c&&n.labelIcon,s&&n.fullWidth,x&&n.wrapped),ref:t,role:"tab","aria-selected":h,disabled:i,onClick:function(e){p&&p(e,b),m&&m(e)}},w),a.a.createElement("span",{className:n.wrapper},c,d),f)}),Ut=Object(Ae.a)(function(e){var t;return{root:ie()({},e.typography.button,(t={maxWidth:264,minWidth:72,position:"relative",boxSizing:"border-box",minHeight:48,flexShrink:0,padding:"6px 12px"},xe()(t,e.breakpoints.up("md"),{padding:"6px 24px"}),xe()(t,"overflow","hidden"),xe()(t,"whiteSpace","normal"),xe()(t,"textAlign","center"),xe()(t,e.breakpoints.up("md"),{fontSize:e.typography.pxToRem(13),minWidth:160}),t)),labelIcon:{minHeight:72,paddingTop:9,"& $wrapper > *:first-child":{marginBottom:6}},textColorInherit:{color:"inherit",opacity:.7,"&$selected":{opacity:1},"&$disabled":{opacity:.4}},textColorPrimary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled}},textColorSecondary:{color:e.palette.text.secondary,"&$selected":{color:e.palette.secondary.main},"&$disabled":{color:e.palette.text.disabled}},selected:{},disabled:{},fullWidth:{flexShrink:1,flexGrow:1,flexBasis:0,maxWidth:"none"},wrapped:{fontSize:e.typography.pxToRem(12),lineHeight:1.5},wrapper:{display:"inline-flex",alignItems:"center",justifyContent:"center",width:"100%",flexDirection:"column"}}},{name:"MuiTab"})(Bt),Wt=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"div":o,l=e.square,u=void 0!==l&&l,s=e.elevation,c=void 0===s?1:s,f=ue()(e,["classes","className","component","square","elevation"]),d=Object(we.a)(n.root,n["elevation".concat(c)],r,!u&&n.rounded);return a.a.createElement(i,ie()({className:d,ref:t},f))}),Vt=Object(Ae.a)(function(e){var t={};return e.shadows.forEach(function(e,n){t["elevation".concat(n)]={boxShadow:e}}),ie()({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius}},t)},{name:"MuiPaper"})(Wt),Kt=n(45),Ht=[0,1,2,3,4,5,6,7,8,9,10],$t=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];var qt=a.a.forwardRef(function(e,t){var n=e.alignContent,r=void 0===n?"stretch":n,o=e.alignItems,i=void 0===o?"stretch":o,l=e.classes,u=e.className,s=e.component,c=void 0===s?"div":s,f=e.container,d=void 0!==f&&f,p=e.direction,m=void 0===p?"row":p,h=e.item,v=void 0!==h&&h,y=e.justify,b=void 0===y?"flex-start":y,g=e.lg,x=void 0!==g&&g,w=e.md,E=void 0!==w&&w,k=e.sm,S=void 0!==k&&k,C=e.spacing,T=void 0===C?0:C,P=e.wrap,O=void 0===P?"wrap":P,j=e.xl,R=void 0!==j&&j,N=e.xs,_=void 0!==N&&N,A=e.zeroMinWidth,M=void 0!==A&&A,I=ue()(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),L=Object(we.a)(l.root,u,d&&[l.container,0!==T&&l["spacing-xs-".concat(String(T))]],v&&l.item,M&&l.zeroMinWidth,"row"!==m&&l["direction-xs-".concat(String(m))],"wrap"!==O&&l["wrap-xs-".concat(String(O))],"stretch"!==i&&l["align-items-xs-".concat(String(i))],"stretch"!==r&&l["align-content-xs-".concat(String(r))],"flex-start"!==b&&l["justify-xs-".concat(String(b))],!1!==_&&l["grid-xs-".concat(String(_))],!1!==S&&l["grid-sm-".concat(String(S))],!1!==E&&l["grid-md-".concat(String(E))],!1!==x&&l["grid-lg-".concat(String(x))],!1!==R&&l["grid-xl-".concat(String(R))]);return a.a.createElement(c,ie()({className:L,ref:t},I))});var Xt=Object(Ae.a)(function(e){return ie()({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return Ht.forEach(function(r){var a=e.spacing(r);0!==a&&(n["spacing-".concat(t,"-").concat(r)]={margin:-a/2,width:"calc(100% + ".concat(a,"px)"),"& > $item":{padding:a/2}})}),n}(e,"xs"),Kt.b.reduce(function(t,n){return function(e,t,n){var r={};$t.forEach(function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var a="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:a,flexGrow:0,maxWidth:a}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}}),"xs"===n?ie()(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t},{}))},{name:"MuiGrid"})(qt),Gt=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"div":o,l=e.fixed,u=void 0!==l&&l,s=e.maxWidth,c=void 0===s?"lg":s,f=ue()(e,["classes","className","component","fixed","maxWidth"]);return a.a.createElement(i,ie()({className:Object(we.a)(n.root,r,u&&n.fixed,!1!==c&&n["maxWidth".concat(Object(Me.a)(String(c)))]),ref:t},f))}),Jt=Object(Ae.a)(function(e){var t;return{root:(t={width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},xe()(t,e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),xe()(t,e.breakpoints.up("md"),{paddingLeft:e.spacing(4),paddingRight:e.spacing(4)}),t),fixed:Object.keys(e.breakpoints.values).reduce(function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t},{}),maxWidthXs:xe()({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:xe()({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:xe()({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:xe()({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:xe()({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}},{name:"MuiContainer"})(Gt),Qt=n(22),Yt=n.n(Qt);var Zt=function(e,t){return t?Yt()(e,t,{clone:!1}):e};var en=function(e){var t=function(t){var n=e(t);return t.css?ie()({},Zt(n,e(ie()({theme:t.theme},t.css))),function(e,t){var n={};return Object.keys(e).forEach(function(r){-1===t.indexOf(r)&&(n[r]=e[r])}),n}(t.css,[e.filterProps])):n};return t.propTypes={},t.filterProps=["css"].concat(ot()(e.filterProps)),t};var tn=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return t.reduce(function(t,n){var r=n(e);return r?Zt(t,r):t},{})};return r.propTypes={},r.filterProps=t.reduce(function(e,t){return e.concat(t.filterProps)},[]),r},nn=n(28),rn=n.n(nn),an=(n(65),{xs:0,sm:600,md:960,lg:1280,xl:1920}),on={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(an[e],"px)")}};function ln(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||on;return t.reduce(function(e,a,o){return e[r.up(r.keys[o])]=n(t[o]),e},{})}if("object"===rn()(t)){var a=e.theme.breakpoints||on;return Object.keys(t).reduce(function(e,r){return e[a.up(r)]=n(t[r]),e},{})}return n(t)}function un(e,t){return t&&"string"==typeof t?t.split(".").reduce(function(e,t){return e&&e[t]?e[t]:null},e):null}var sn=function(e){var t=e.prop,n=e.cssProperty,r=void 0===n?e.prop:n,a=e.themeKey,o=e.transform,i=function(e){if(null==e[t])return null;var n=e[t],i=un(e.theme,a)||{};return ln(e,n,function(e){var t;return"function"==typeof i?t=i(e):Array.isArray(i)?t=i[e]:(t=un(i,e)||e,o&&(t=o(t))),!1===r?t:xe()({},r,t)})};return i.propTypes={},i.filterProps=[t],i};function cn(e){return"number"!=typeof e?e:"".concat(e,"px solid").concat(0===e?" !important":"")}var fn=tn(sn({prop:"border",themeKey:"borders",transform:cn}),sn({prop:"borderTop",themeKey:"borders",transform:cn}),sn({prop:"borderRight",themeKey:"borders",transform:cn}),sn({prop:"borderBottom",themeKey:"borders",transform:cn}),sn({prop:"borderLeft",themeKey:"borders",transform:cn}),sn({prop:"borderColor",themeKey:"palette",transform:function(e){return"".concat(e," !important")}}),sn({prop:"borderRadius",themeKey:"shape"})),dn=tn(sn({prop:"display"}),sn({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}}),sn({prop:"overflow"}),sn({prop:"textOverflow"}),sn({prop:"whiteSpace"})),pn=tn(sn({prop:"flexBasis"}),sn({prop:"flexDirection"}),sn({prop:"flexWrap"}),sn({prop:"justifyContent"}),sn({prop:"alignItems"}),sn({prop:"alignContent"}),sn({prop:"order"}),sn({prop:"flex"}),sn({prop:"flexGrow"}),sn({prop:"flexShrink"}),sn({prop:"alignSelf"}),sn({prop:"justifyItems"}),sn({prop:"justifySelf"})),mn=tn(sn({prop:"position"}),sn({prop:"zIndex",themeKey:"zIndex"}),sn({prop:"top"}),sn({prop:"right"}),sn({prop:"bottom"}),sn({prop:"left"})),hn=tn(sn({prop:"color",themeKey:"palette"}),sn({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"})),vn=sn({prop:"boxShadow",themeKey:"shadows"});function yn(e){return e<=1?"".concat(100*e,"%"):e}var bn=sn({prop:"width",transform:yn}),gn=sn({prop:"maxWidth",transform:yn}),xn=sn({prop:"minWidth",transform:yn}),wn=sn({prop:"height",transform:yn}),En=sn({prop:"maxHeight",transform:yn}),kn=sn({prop:"minHeight",transform:yn}),Sn=(sn({prop:"size",cssProperty:"width",transform:yn}),sn({prop:"size",cssProperty:"height",transform:yn}),tn(bn,gn,xn,wn,En,kn));var Cn={m:"margin",p:"padding"},Tn={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Pn=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}(function(e){if(e.length>3)return[e];var t=e.split(""),n=We()(t,2),r=n[0],a=n[1],o=Cn[r],i=Tn[a]||"";return Array.isArray(i)?i.map(function(e){return o+e}):[o+i]}),On=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginLeft","marginTop","marginRight","marginBottom","padding","paddingTop","paddingRight","paddingBottom","paddingLeft"];function jn(e,t){return function(n){return e.reduce(function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e},{})}}function Rn(e){var t=function(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}(e.theme);return Object.keys(e).map(function(n){if(-1===On.indexOf(n))return null;var r=jn(Pn(n),t),a=e[n];return ln(e,a,r)}).reduce(Zt,{})}Rn.propTypes={},Rn.filterProps=On;var Nn=Rn,_n=tn(sn({prop:"fontFamily",themeKey:"typography"}),sn({prop:"fontSize",themeKey:"typography"}),sn({prop:"fontStyle",themeKey:"typography"}),sn({prop:"fontWeight",themeKey:"typography"}),sn({prop:"letterSpacing"}),sn({prop:"lineHeight"}),sn({prop:"textAlign"})),An=n(35),Mn=n.n(An),In=n(186);var Ln=function(e){return function(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=r.name,i=ue()(r,["name"]),l=o,u="function"==typeof t?function(e){return{root:function(n){return t(ie()({theme:e},n))}}}:{root:t},s=Object(In.a)(u,ie()({Component:e,name:o||e.displayName,classNamePrefix:l},i));t.filterProps&&(n=t.filterProps,delete t.filterProps),t.propTypes&&(t.propTypes,delete t.propTypes);var c=a.a.forwardRef(function(t,r){var o=t.children,i=t.className,l=t.clone,u=t.component,c=ue()(t,["children","className","clone","component"]),f=s(t),d=Object(we.a)(f.root,i);if(l)return a.a.cloneElement(o,{className:Object(we.a)(o.props.className,d)});var p,m,h,v=c;if(n&&(p=v,m=n,h={},Object.keys(p).forEach(function(e){-1===m.indexOf(e)&&(h[e]=p[e])}),v=h),"function"==typeof o)return o(ie()({className:d},v));var y=u||e;return a.a.createElement(y,ie()({ref:r,className:d},v),o)});return Mn()(c,e),c}},Dn=n(36),zn=function(e){var t=Ln(e);return function(e,n){return t(e,ie()({defaultTheme:Dn.a},n))}},Fn=en(tn(fn,dn,pn,mn,hn,vn,Sn,Nn,_n)),Bn=zn("div")(Fn,{name:"MuiBox"}),Un={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},Wn=a.a.forwardRef(function(e,t){var n=e.align,r=void 0===n?"inherit":n,o=e.classes,i=e.className,l=e.color,u=void 0===l?"initial":l,s=e.component,c=e.display,f=void 0===c?"initial":c,d=e.gutterBottom,p=void 0!==d&&d,m=e.noWrap,h=void 0!==m&&m,v=e.paragraph,y=void 0!==v&&v,b=(e.theme,e.variant),g=void 0===b?"body1":b,x=e.variantMapping,w=void 0===x?Un:x,E=ue()(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","theme","variant","variantMapping"]),k=s||(y?"p":w[g]||Un[g])||"span";return a.a.createElement(k,ie()({className:Object(we.a)(o.root,i,"inherit"!==g&&o[g],"initial"!==u&&o["color".concat(Object(Me.a)(u))],h&&o.noWrap,p&&o.gutterBottom,y&&o.paragraph,"inherit"!==r&&o["align".concat(Object(Me.a)(r))],"initial"!==f&&o["display".concat(Object(Me.a)(f))]),ref:t},E))}),Vn=Object(Ae.a)(function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}},{name:"MuiTypography",withTheme:!0})(Wn);function Kn(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce(function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e},{})}var Hn=a.a.createContext();function $n(e,t){return parseInt(e[t],10)||0}var qn="undefined"!=typeof window?a.a.useLayoutEffect:a.a.useEffect,Xn={visibility:"hidden",position:"absolute",overflow:"hidden",height:"0"},Gn=a.a.forwardRef(function(e,t){var n=e.onChange,r=e.rows,o=e.rowsMax,i=e.style,l=e.value,u=ue()(e,["onChange","rows","rowsMax","style","value"]),s=a.a.useRef(null!=l).current,c=a.a.useRef(null),f=a.a.useState({}),d=We()(f,2),p=d[0],m=d[1],h=a.a.useRef(null),v=He(t,c),y=a.a.useCallback(function(){var t=c.current,n=h.current,a=window.getComputedStyle(t);n.style.width=a.width,n.value=t.value||e.placeholder||"x";var i=n.scrollHeight,l=a["box-sizing"];n.value="x";var u=n.scrollHeight,s=i;null!=r&&(s=Math.max(Number(r)*u,s)),null!=o&&(s=Math.min(Number(o)*u,s)),s=Math.max(s,u),"content-box"===l?s-=$n(a,"padding-bottom")+$n(a,"padding-top"):"border-box"===l&&(s+=$n(a,"border-bottom-width")+$n(a,"border-top-width")),m(function(e){return i>0&&Math.abs((e.innerHeight||0)-i)>1?{innerHeight:i,outerHeight:s}:e})},[m,r,o,e.placeholder]);a.a.useEffect(function(){var e=Ce()(function(){y()},166);return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[y]),qn(function(){y()});return a.a.createElement(a.a.Fragment,null,a.a.createElement("textarea",ie()({value:l,onChange:function(e){s||y(),n&&n(e)},ref:v,style:ie()({height:p.outerHeight,overflow:p.outerHeight===p.innerHeight?"hidden":null},i)},u)),a.a.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:h,tabIndex:-1,style:ie()({},Xn,i)}))});function Jn(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Qn(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(Jn(e.value)&&""!==e.value||t&&Jn(e.defaultValue)&&""!==e.defaultValue)}var Yn=a.a.forwardRef(function(e,t){var n=e["aria-describedby"],r=e.autoComplete,o=e.autoFocus,i=e.classes,l=e.className,u=e.defaultValue,s=e.disabled,c=e.endAdornment,f=(e.error,e.fullWidth),d=void 0!==f&&f,p=e.id,m=e.inputComponent,h=void 0===m?"input":m,v=e.inputProps,y=(v=void 0===v?{}:v).className,b=ue()(v,["className"]),g=e.inputRef,x=(e.margin,e.multiline),w=void 0!==x&&x,E=e.name,k=e.onBlur,S=e.onChange,C=e.onClick,T=e.onEmpty,P=e.onFilled,O=e.onFocus,j=e.onKeyDown,R=e.onKeyUp,N=e.placeholder,_=e.readOnly,A=e.renderPrefix,M=e.rows,I=e.rowsMax,L=e.startAdornment,D=e.type,z=void 0===D?"text":D,F=e.value,B=ue()(e,["aria-describedby","autoComplete","autoFocus","classes","className","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onEmpty","onFilled","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderPrefix","rows","rowsMax","startAdornment","type","value"]),U=a.a.useRef(null!=F).current,W=a.a.useRef(),V=a.a.useCallback(function(e){},[]),K=He(b.ref,V),H=He(g,K),$=He(W,H),q=a.a.useState(!1),X=We()(q,2),G=X[0],J=X[1],Q=a.a.useContext(Hn),Y=Kn({props:e,muiFormControl:Q,states:["disabled","error","margin","required","filled"]});Y.focused=Q?Q.focused:G,a.a.useEffect(function(){!Q&&s&&G&&(J(!1),k&&k())},[Q,s,G,k]);var Z=a.a.useCallback(function(e){if(Qn(e))return Q&&Q.onFilled&&Q.onFilled(),void(P&&P());Q&&Q.onEmpty&&Q.onEmpty(),T&&T()},[Q,T,P]);a.a.useEffect(function(){U&&Z({value:F})},[F,Z,U]),a.a.useEffect(function(){U||Z(W.current)},[Z,U]);var ee=h,te=ie()({},b,{ref:$});return"string"!=typeof ee?te=ie()({inputRef:$,type:z},te,{ref:null}):w?M&&!I?ee="textarea":(te=ie()({rows:M,rowsMax:I},te),ee=Gn):te=ie()({type:z},te),a.a.createElement("div",ie()({className:Object(we.a)(i.root,l,Y.disabled&&i.disabled,Y.error&&i.error,d&&i.fullWidth,Y.focused&&i.focused,Q&&i.formControl,"dense"===Y.margin&&i.marginDense,w&&i.multiline,L&&i.adornedStart,c&&i.adornedEnd),onClick:function(e){W.current&&e.currentTarget===e.target&&W.current.focus(),C&&C(e)},ref:t},B),A?A(ie()({},Y,{startAdornment:L})):null,L,a.a.createElement(Hn.Provider,{value:null},a.a.createElement(ee,ie()({"aria-invalid":Y.error,"aria-describedby":n,autoComplete:r,autoFocus:o,className:Object(we.a)(i.input,y,Y.disabled&&i.disabled,"search"===z&&i.inputTypeSearch,w&&i.inputMultiline,"dense"===Y.margin&&i.inputMarginDense,L&&i.inputAdornedStart,c&&i.inputAdornedEnd),defaultValue:u,disabled:Y.disabled,id:p,name:E,onBlur:function(e){k&&k(e),Q&&Q.onBlur?Q.onBlur(e):J(!1)},onChange:function(e){if(U||Z({value:(e.target||W.current).value}),S){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];S.apply(void 0,[e].concat(n))}},onFocus:function(e){Y.disabled?e.stopPropagation():(O&&O(e),Q&&Q.onFocus?Q.onFocus(e):J(!0))},onKeyDown:j,onKeyUp:R,placeholder:N,readOnly:_,required:Y.required,rows:M,value:F},te))),c)}),Zn=Object(Ae.a)(function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},a={opacity:t?.42:.5};return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.primary,fontSize:e.typography.pxToRem(16),lineHeight:"1.1875em",boxSizing:"border-box",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}},formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},fullWidth:{width:"100%"},input:{font:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1875em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},"&$disabled":{opacity:1}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{}}},{name:"MuiInputBase"})(Yn),er=a.a.forwardRef(function(e,t){var n=e.disableUnderline,r=e.classes,o=e.fullWidth,i=void 0!==o&&o,l=e.inputComponent,u=void 0===l?"input":l,s=e.multiline,c=void 0!==s&&s,f=e.type,d=void 0===f?"text":f,p=ue()(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return a.a.createElement(Zn,ie()({classes:ie()({},r,{root:Object(we.a)(r.root,!n&&r.underline),underline:null}),fullWidth:i,inputComponent:u,multiline:c,ref:t,type:d},p))});er.muiName="Input";var tr=Object(Ae.a)(function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(n)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}},{name:"MuiInput"})(er),nr=a.a.forwardRef(function(e,t){var n=e.disableUnderline,r=e.classes,o=e.fullWidth,i=void 0!==o&&o,l=e.inputComponent,u=void 0===l?"input":l,s=e.multiline,c=void 0!==s&&s,f=e.type,d=void 0===f?"text":f,p=ue()(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return a.a.createElement(Zn,ie()({classes:ie()({},r,{root:Object(we.a)(r.root,!n&&r.underline),underline:null}),fullWidth:i,inputComponent:u,multiline:c,ref:t,type:d},p))});nr.muiName="Input";var rr=Object(Ae.a)(function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px"},inputMarginDense:{paddingTop:23,paddingBottom:6},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}},{name:"MuiFilledInput"})(nr),ar=a.a.forwardRef(function(e,t){e.children;var n=e.classes,r=e.className,o=e.labelWidth,i=e.notched,l=e.style,u=e.theme,s=ue()(e,["children","classes","className","labelWidth","notched","style","theme"]),c="rtl"===u.direction?"right":"left",f=o>0?.75*o+8:0;return a.a.createElement("fieldset",ie()({"aria-hidden":!0,style:ie()(xe()({},"padding".concat(Object(Me.a)(c)),8+(i?0:f/2)),l),className:Object(we.a)(n.root,r),ref:t},s),a.a.createElement("legend",{className:n.legend,style:{width:i?f:.01}},a.a.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}),or=Object(Ae.a)(function(e){var t="rtl"===e.direction?"right":"left";return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:0,pointerEvents:"none",borderRadius:e.shape.borderRadius,borderStyle:"solid",borderWidth:1,transition:e.transitions.create(["padding-".concat(t),"border-color","border-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}}},{name:"PrivateNotchedOutline",withTheme:!0})(ar),ir=a.a.forwardRef(function(e,t){var n=e.classes,r=e.fullWidth,o=void 0!==r&&r,i=e.inputComponent,l=void 0===i?"input":i,u=e.labelWidth,s=void 0===u?0:u,c=e.multiline,f=void 0!==c&&c,d=e.notched,p=e.type,m=void 0===p?"text":p,h=ue()(e,["classes","fullWidth","inputComponent","labelWidth","multiline","notched","type"]);return a.a.createElement(Zn,ie()({renderPrefix:function(e){return a.a.createElement(or,{className:n.notchedOutline,labelWidth:s,notched:void 0!==d?d:Boolean(e.startAdornment||e.filled||e.focused)})},classes:ie()({},n,{root:Object(we.a)(n.root,n.underline),notchedOutline:null}),fullWidth:o,inputComponent:l,multiline:f,ref:t,type:m},h))});ir.muiName="Input";var lr=Object(Ae.a)(function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative","& $notchedOutline":{borderColor:t},"&:hover $notchedOutline":{borderColor:e.palette.text.primary,"@media (hover: none)":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{},input:{padding:"18.5px 14px"},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}},{name:"MuiOutlinedInput"})(ir);function ur(e){var t=a.a.forwardRef(function(t,n){return a.a.createElement(Hn.Consumer,null,function(r){return a.a.createElement(e,ie()({muiFormControl:r,ref:n},t))})});return Lt()(t,e),t}var sr=a.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,i=e.component,l=void 0===i?"label":i,u=(e.disabled,e.error,e.filled,e.focused,e.muiFormControl),s=(e.required,ue()(e,["children","classes","className","component","disabled","error","filled","focused","muiFormControl","required"])),c=Kn({props:e,muiFormControl:u,states:["required","focused","disabled","error","filled"]});return a.a.createElement(l,ie()({className:Object(we.a)(r.root,o,c.disabled&&r.disabled,c.error&&r.error,c.filled&&r.filled,c.focused&&r.focused,c.required&&r.required),ref:t},s),n,c.required&&a.a.createElement("span",{className:Object(we.a)(r.asterisk,c.error&&r.error)}," ","*"))}),cr=Object(Ae.a)(function(e){return{root:ie()({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary["light"===e.palette.type?"dark":"light"]},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}},{name:"MuiFormLabel"})(ur(sr)),fr=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.disableAnimation,i=void 0!==o&&o,l=(e.margin,e.muiFormControl),u=e.shrink,s=(e.variant,ue()(e,["classes","className","disableAnimation","margin","muiFormControl","shrink","variant"])),c=u;void 0===c&&l&&(c=l.filled||l.focused||l.adornedStart);var f=Kn({props:e,muiFormControl:l,states:["margin","variant"]});return a.a.createElement(cr,ie()({"data-shrink":c,className:Object(we.a)(n.root,r,l&&n.formControl,!i&&n.animated,c&&n.shrink,"dense"===f.margin&&n.marginDense,"filled"===f.variant&&n.filled,"outlined"===f.variant&&n.outlined),classes:{focused:n.focused,disabled:n.disabled,error:n.error,required:n.required,asterisk:n.asterisk},ref:t},s))}),dr=Object(Ae.a)(function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}},{name:"MuiInputLabel"})(ur(fr)),pr=a.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,i=e.component,l=void 0===i?"div":i,u=e.disabled,s=void 0!==u&&u,c=e.error,f=void 0!==c&&c,d=e.fullWidth,p=void 0!==d&&d,m=e.margin,h=void 0===m?"none":m,v=e.required,y=void 0!==v&&v,b=e.variant,g=void 0===b?"standard":b,x=ue()(e,["children","classes","className","component","disabled","error","fullWidth","margin","required","variant"]),w=a.a.useState(function(){var e=!1;return n&&a.a.Children.forEach(n,function(t){if(Ve(t,["Input","Select"])){var n=Ve(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)}}),e}),E=We()(w,1)[0],k=a.a.useState(function(){var e=!1;return n&&a.a.Children.forEach(n,function(t){Ve(t,["Input","Select"])&&Qn(t.props,!0)&&(e=!0)}),e}),S=We()(k,2),C=S[0],T=S[1],P=a.a.useState(!1),O=We()(P,2),j=O[0],R=O[1];s&&j&&R(!1);var N={adornedStart:E,disabled:s,error:f,filled:C,focused:j,margin:h,onBlur:function(){R(!1)},onEmpty:function(){C&&T(!1)},onFilled:function(){C||T(!0)},onFocus:function(){R(!0)},required:y,variant:g};return a.a.createElement(Hn.Provider,{value:N},a.a.createElement(l,ie()({className:Object(we.a)(r.root,o,"none"!==h&&r["margin".concat(Object(Me.a)(h))],p&&r.fullWidth),ref:t},x),n))}),mr=Object(Ae.a)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(pr),hr=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"p":o,l=(e.disabled,e.error,e.filled,e.focused,e.margin,e.muiFormControl),u=(e.required,e.variant,ue()(e,["classes","className","component","disabled","error","filled","focused","margin","muiFormControl","required","variant"])),s=Kn({props:e,muiFormControl:l,states:["variant","margin","disabled","error","filled","focused","required"]});return a.a.createElement(i,ie()({className:Object(we.a)(n.root,("filled"===s.variant||"outlined"===s.variant)&&n.contained,r,"dense"===s.margin&&n.marginDense,s.disabled&&n.disabled,s.error&&n.error,s.filled&&n.filled,s.focused&&n.focused,s.required&&n.required),ref:t},u))}),vr=Object(Ae.a)(function(e){return{root:ie()({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:8,lineHeight:"1em",minHeight:"1em",margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{margin:"8px 12px 0"},focused:{},filled:{},required:{}}},{name:"MuiFormHelperText"})(ur(hr)),yr=n(185);var br=function(e){return e&&e.ownerDocument||document};var gr=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window,n=br(e);return n.defaultView||n.parentView||t},xr=n(32),wr=n.n(xr);var Er="undefined"!=typeof window?a.a.useLayoutEffect:a.a.useEffect,kr=a.a.forwardRef(function(e,t){var n=e.children,r=e.container,o=e.disablePortal,l=e.onRendered,u=a.a.useState(null),s=We()(u,2),c=s[0],f=s[1],d=a.a.useRef(null),p=He(n.ref,d);return Er(function(){o||f(function(e){return e="function"==typeof e?e():e,i.a.findDOMNode(e)}(r)||document.body)},[r,o]),Er(function(){l&&c&&l()},[c,l]),a.a.useImperativeHandle(t,function(){return c||d.current},[c]),o?(a.a.Children.only(n),a.a.cloneElement(n,{ref:p})):c?i.a.createPortal(n,c):c});kr.defaultProps={disablePortal:!1};var Sr=kr,Cr=n(187);function Tr(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).defaultTheme;return function(t){var n=a.a.forwardRef(function(n,r){var o=n.innerRef,i=ue()(n,["innerRef"]),l=Object(Cr.a)()||e;return a.a.createElement(t,ie()({theme:l,ref:o||r},i))});return Mn()(n,t),n}}var Pr=Tr(),Or=n(46);var jr=function(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t};function Rr(e){var t=br(e),n=gr(t);return t.body===e?n.innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}var Nr=["template","script","style"];function _r(e,t,n,r){var a=[t,n];[].forEach.call(e.children,function(e){-1===a.indexOf(e)&&function(e){return 1===e.nodeType&&-1===Nr.indexOf(e.tagName.toLowerCase())}(e)&&r(e)})}function Ar(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Mr(e,t,n,r){_r(e,t,n,function(e){return Ar(e,r)})}function Ir(e,t){var n=-1;return e.some(function(e,r){return!!t(e)&&(n=r,!0)}),n}function Lr(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}var Dr=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};ce()(this,e);var n=t.hideSiblingNodes,r=void 0===n||n,a=t.handleContainerOverflow,o=void 0===a||a;this.hideSiblingNodes=r,this.handleContainerOverflow=o,this.modals=[],this.data=[]}return de()(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Ar(e.modalRef,!1),this.hideSiblingNodes&&Mr(t,e.mountNode,e.modalRef,!0);var r=Ir(this.data,function(e){return e.container===t});if(-1!==r)return this.data[r].modals.push(e),n;var a={modals:[e],container:t,overflowing:Rr(t),prevPaddings:[]};return this.data.push(a),n}},{key:"mount",value:function(e){var t=Ir(this.data,function(t){return-1!==t.modals.indexOf(e)}),n=this.data[t];!n.style&&this.handleContainerOverflow&&function(e){e.style={overflow:e.container.style.overflow,paddingRight:e.container.style.paddingRight};var t={overflow:"hidden"};if(e.overflowing){var n=jr();t.paddingRight="".concat(Lr(e.container)+n,"px");for(var r=br(e.container).querySelectorAll(".mui-fixed"),a=0;a<r.length;a+=1){var o=Lr(r[a]);e.prevPaddings.push(o),r[a].style.paddingRight="".concat(o+n,"px")}}Object.keys(t).forEach(function(n){e.container.style[n]=t[n]})}(n)}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=Ir(this.data,function(t){return-1!==t.modals.indexOf(e)}),r=this.data[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)this.handleContainerOverflow&&function(e){e.style&&Object.keys(e.style).forEach(function(t){e.container.style[t]=e.style[t]});for(var t=br(e.container).querySelectorAll(".mui-fixed"),n=0;n<t.length;n+=1)t[n].style.paddingRight="".concat(e.prevPaddings[n],"px")}(r),e.modalRef&&Ar(e.modalRef,!0),this.hideSiblingNodes&&Mr(r.container,e.mountNode,e.modalRef,!1),this.data.splice(n,1);else if(this.hideSiblingNodes){var a=r.modals[r.modals.length-1];a.modalRef&&Ar(a.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e}}]),e}();var zr=function(e){var t=e.children,n=e.disableAutoFocus,r=void 0!==n&&n,o=e.disableEnforceFocus,l=void 0!==o&&o,u=e.disableRestoreFocus,s=void 0!==u&&u,c=e.getDoc,f=e.isEnabled,d=e.open,p=a.a.useRef(),m=a.a.useRef(null),h=a.a.useRef(null),v=a.a.useRef(),y=a.a.useRef(null),b=a.a.useCallback(function(e){y.current=i.a.findDOMNode(e)},[]),g=He(t.ref,b);return a.a.useMemo(function(){d&&(v.current=c().activeElement)},[d]),a.a.useEffect(function(){if(d){var e=br(y.current);r||!y.current||y.current.contains(e.activeElement)||(y.current.hasAttribute("tabIndex")||y.current.setAttribute("tabIndex",-1),y.current.focus());var t=function(){l||!f()||p.current?p.current=!1:y.current&&!y.current.contains(e.activeElement)&&y.current.focus()},n=function(t){!l&&f()&&9===t.keyCode&&e.activeElement===y.current&&(p.current=!0,t.shiftKey?h.current.focus():m.current.focus())};return e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0),function(){e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),s||(v.current&&v.current.focus&&v.current.focus(),v.current=null)}}},[r,l,s,f,d]),a.a.createElement(a.a.Fragment,null,a.a.createElement("div",{tabIndex:0,ref:m,"data-test":"sentinelStart"}),a.a.cloneElement(t,{ref:g}),a.a.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelEnd"}))},Fr={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",touchAction:"none"},invisible:{backgroundColor:"transparent"}},Br=a.a.forwardRef(function(e,t){var n=e.invisible,r=e.open,o=ue()(e,["invisible","open"]);return r?a.a.createElement("div",ie()({"aria-hidden":!0,ref:t},o,{style:ie()({},Fr.root,n?Fr.invisible:{},o.style)})):null});Br.defaultProps={invisible:!1};var Ur=Br;function Wr(e){return!!e.children&&e.children.props.hasOwnProperty("in")}var Vr=function(e){function t(e){var n;return ce()(this,t),(n=me()(this,ve()(t).call(this))).handleOpen=function(){var e=function(e){return e="function"==typeof e?e():e,i.a.findDOMNode(e)}(n.props.container)||n.getDoc().body;n.props.manager.add(wr()(n),e),n.modalRef&&n.handleOpened()},n.handleRendered=function(){n.props.onRendered&&n.props.onRendered(),n.props.open?n.handleOpened():Ar(n.modalRef,!0)},n.handleOpened=function(){n.props.manager.mount(wr()(n)),n.modalRef.scrollTop=0},n.handleClose=function(e){Wr(n.props)&&n.props.closeAfterTransition&&"unmount"!==e||n.props.manager.remove(wr()(n))},n.handleEnter=function(){n.setState({exited:!1})},n.handleExited=function(){n.props.closeAfterTransition&&n.props.manager.remove(wr()(n)),n.setState({exited:!0})},n.handleBackdropClick=function(e){e.target===e.currentTarget&&(n.props.onBackdropClick&&n.props.onBackdropClick(e),!n.props.disableBackdropClick&&n.props.onClose&&n.props.onClose(e,"backdropClick"))},n.handleKeyDown=function(e){"Escape"===e.key&&n.isTopModal()&&(e.stopPropagation(),n.props.onEscapeKeyDown&&n.props.onEscapeKeyDown(e),!n.props.disableEscapeKeyDown&&n.props.onClose&&n.props.onClose(e,"escapeKeyDown"))},n.handlePortalRef=function(e){n.mountNode=e},n.handleModalRef=function(e){n.modalRef=e,Ke(n.props.innerRef,e)},n.isTopModal=function(){return n.props.manager.isTopModal(wr()(n))},n.getDoc=function(){return br(n.mountNode)},n.state={exited:!e.open},n}return be()(t,e),de()(t,[{key:"componentDidMount",value:function(){this.props.open&&this.handleOpen()}},{key:"componentDidUpdate",value:function(e){e.open&&!this.props.open?this.handleClose():!e.open&&this.props.open&&this.handleOpen()}},{key:"componentWillUnmount",value:function(){(this.props.open||Wr(this.props)&&!this.state.exited)&&this.handleClose("unmount")}},{key:"render",value:function(){var e=this.props,t=e.BackdropComponent,n=e.BackdropProps,r=e.children,o=(e.closeAfterTransition,e.container),i=e.disableAutoFocus,l=(e.disableBackdropClick,e.disableEnforceFocus),u=(e.disableEscapeKeyDown,e.disablePortal),s=e.disableRestoreFocus,c=e.hideBackdrop,f=(e.innerRef,e.keepMounted),d=(e.manager,e.onBackdropClick,e.onClose,e.onEscapeKeyDown,e.onRendered,e.open),p=e.theme,m=ue()(e,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","hideBackdrop","innerRef","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open","theme"]),h=this.state.exited,v=Wr(this.props);if(!f&&!d&&(!v||h))return null;var y={};v&&(y.onEnter=Object(Me.b)(this.handleEnter,r.props.onEnter),y.onExited=Object(Me.b)(this.handleExited,r.props.onExited)),void 0===r.props.role&&(y.role=r.props.role||"document"),void 0===r.props.tabIndex&&(y.tabIndex=r.props.tabIndex||"-1");var b=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(p||{zIndex:Or.a});return a.a.createElement(Sr,{ref:this.handlePortalRef,container:o,disablePortal:u,onRendered:this.handleRendered},a.a.createElement("div",ie()({ref:this.handleModalRef,onKeyDown:this.handleKeyDown,role:"presentation"},m,{style:ie()({},b.root,!d&&h?b.hidden:{},m.style)}),c?null:a.a.createElement(t,ie()({open:d,onClick:this.handleBackdropClick},n)),a.a.createElement(zr,{disableEnforceFocus:l,disableAutoFocus:i,disableRestoreFocus:s,getDoc:this.getDoc,isEnabled:this.isTopModal,open:d},a.a.cloneElement(r,y))))}}]),t}(a.a.Component);Vr.defaultProps={BackdropComponent:Ur,closeAfterTransition:!1,disableAutoFocus:!1,disableBackdropClick:!1,disableEnforceFocus:!1,disableEscapeKeyDown:!1,disablePortal:!1,disableRestoreFocus:!1,hideBackdrop:!1,keepMounted:!1,manager:new Dr};var Kr=Pr(Dt(Vr)),Hr=Tr({defaultTheme:Dn.a});function $r(e,t){var n=e.timeout,r=e.style,a=void 0===r?{}:r;return{duration:a.transitionDuration||"number"==typeof n?n:n[t.mode],delay:a.transitionDelay}}function qr(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var Xr={entering:{opacity:1,transform:qr(1)},entered:{opacity:1,transform:"".concat(qr(1)," translateZ(0)")}},Gr=a.a.forwardRef(function(e,t){var n=e.children,r=e.in,o=e.onEnter,i=e.onExit,l=e.style,u=e.theme,s=e.timeout,c=void 0===s?"auto":s,f=ue()(e,["children","in","onEnter","onExit","style","theme","timeout"]),d=a.a.useRef(),p=a.a.useRef(),m=He(n.ref,t);return a.a.useEffect(function(){return function(){clearTimeout(d.current)}},[]),a.a.createElement(wt,ie()({appear:!0,in:r,onEnter:function(e){!function(e){e.scrollTop}(e);var t=$r({style:l,timeout:c},{mode:"enter"}),n=t.duration,r=t.delay,a=0;"auto"===c?(a=u.transitions.getAutoHeightDuration(e.clientHeight),p.current=a):a=n,e.style.transition=[u.transitions.create("opacity",{duration:a,delay:r}),u.transitions.create("transform",{duration:.666*a,delay:r})].join(","),o&&o(e)},onExit:function(e){var t=0,n=$r({style:l,timeout:c},{mode:"exit"}),r=n.duration,a=n.delay;"auto"===c?(t=u.transitions.getAutoHeightDuration(e.clientHeight),p.current=t):t=r,e.style.transition=[u.transitions.create("opacity",{duration:t,delay:a}),u.transitions.create("transform",{duration:.666*t,delay:a||.333*t})].join(","),e.style.opacity="0",e.style.transform=qr(.75),i&&i(e)},addEndListener:function(e,t){"auto"===c&&(d.current=setTimeout(t,p.current||0))},timeout:"auto"===c?null:c},f),function(e,t){return a.a.cloneElement(n,ie()({style:ie()({opacity:0,transform:qr(.75),visibility:"exited"!==e||r?void 0:"hidden"},Xr[e],l,n.props.style),ref:m},t))})});Gr.muiSupportAuto=!0;var Jr=Hr(Gr);function Qr(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Yr(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Zr(e){return[e.horizontal,e.vertical].map(function(e){return"number"==typeof e?"".concat(e,"px"):e}).join(" ")}function ea(e){return"function"==typeof e?e():e}var ta=a.a.forwardRef(function(e,t){var n=e.action,r=e.anchorEl,o=e.anchorOrigin,l=e.anchorPosition,u=e.anchorReference,s=e.children,c=e.classes,f=e.container,d=e.elevation,p=e.getContentAnchorEl,m=e.marginThreshold,h=e.ModalClasses,v=e.onEnter,y=e.onEntered,b=e.onEntering,g=e.onExit,x=e.onExited,w=e.onExiting,E=e.open,k=e.PaperProps,S=void 0===k?{}:k,C=e.transformOrigin,T=e.TransitionComponent,P=e.transitionDuration,O=e.TransitionProps,j=void 0===O?{}:O,R=ue()(e,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","container","elevation","getContentAnchorEl","marginThreshold","ModalClasses","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),N=a.a.useRef(),_=a.a.useRef(function(){});a.a.useImperativeHandle(n,function(){return{updatePosition:_.current}},[]);var A=a.a.useCallback(function(e){if("anchorPosition"===u)return l;var t=ea(r),n=(t instanceof Element?t:br(N.current).body).getBoundingClientRect(),a=0===e?o.vertical:"center";return{top:n.top+Qr(n,a),left:n.left+Yr(n,o.horizontal)}},[r,o.horizontal,o.vertical,l,u]),M=a.a.useCallback(function(e){var t=0;if(p&&"anchorEl"===u){var n=p(e);if(n&&e.contains(n)){var r=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentNode).scrollTop;return r}(e,n);t=n.offsetTop+n.clientHeight/2-r||0}}return t},[o.vertical,u,p]),I=a.a.useCallback(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:Qr(e,C.vertical)+t,horizontal:Yr(e,C.horizontal)}},[C.horizontal,C.vertical]),L=a.a.useCallback(function(e){var t=M(e),n={width:e.offsetWidth,height:e.offsetHeight},a=I(n,t);if("none"===u)return{top:null,left:null,transformOrigin:Zr(a)};var o=A(t),i=o.top-a.vertical,l=o.left-a.horizontal,s=i+n.height,c=l+n.width,f=gr(ea(r)),d=f.innerHeight-m,p=f.innerWidth-m;if(i<m){var h=i-m;i-=h,a.vertical+=h}else if(s>d){var v=s-d;i-=v,a.vertical+=v}if(l<m){var y=l-m;l-=y,a.horizontal+=y}else if(c>p){var b=c-p;l-=b,a.horizontal+=b}return{top:"".concat(i,"px"),left:"".concat(l,"px"),transformOrigin:Zr(a)}},[r,u,A,M,I,m]),D=a.a.useCallback(function(e){var t=L(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin},[L]),z=a.a.useCallback(function(e){N.current=i.a.findDOMNode(e)},[]);a.a.useEffect(function(){return _.current=Ce()(function(){E&&D(N.current)},166),window.addEventListener("resize",_.current),function(){_.current.clear(),window.removeEventListener("resize",_.current)}},[E,D]);var F=P;"auto"!==P||T.muiSupportAuto||(F=void 0);var B=f||(r?br(ea(r)).body:void 0);return a.a.createElement(Kr,ie()({classes:h,container:B,open:E,ref:t,BackdropProps:{invisible:!0}},R),a.a.createElement(T,ie()({appear:!0,in:E,onEnter:v,onEntered:y,onExit:g,onExited:x,onExiting:w,timeout:F},j,{onEntering:Object(Me.b)(function(e){b&&b(e),D(e)},j.onEntering)}),a.a.createElement(Vt,ie()({elevation:d,ref:z},S,{className:Object(we.a)(c.paper,S.className)}),s)))});ta.defaultProps={anchorReference:"anchorEl",anchorOrigin:{vertical:"top",horizontal:"left"},elevation:8,marginThreshold:16,transformOrigin:{vertical:"top",horizontal:"left"},TransitionComponent:Jr,transitionDuration:"auto"};var na=Object(Ae.a)({paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:"none"}},{name:"MuiPopover"})(ta),ra=a.a.createContext({}),aa=a.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,i=e.component,l=void 0===i?"ul":i,u=e.dense,s=void 0!==u&&u,c=e.disablePadding,f=void 0!==c&&c,d=e.subheader,p=ue()(e,["children","classes","className","component","dense","disablePadding","subheader"]),m=a.a.useMemo(function(){return{dense:s}},[s]);return a.a.createElement(ra.Provider,{value:m},a.a.createElement(l,ie()({className:Object(we.a)(r.root,o,s&&r.dense,!f&&r.padding,d&&r.subheader),ref:t},p),d,n))}),oa=Object(Ae.a)({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(aa);function ia(e,t,n){return t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function la(e,t,n){return t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function ua(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),void 0!==n&&(0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join(""))))}function sa(e,t,n,r,a){for(var o=!1,i=r(e,t,!!t&&n);i;){if(i===e.firstChild){if(o)return!1;o=!0}if(i.hasAttribute("tabindex")&&!i.disabled&&"true"!==i.getAttribute("aria-disabled")&&ua(i,a))break;i=r(e,i,n)}return!!i&&(i.focus(),!0)}var ca="undefined"==typeof window?a.a.useEffect:a.a.useLayoutEffect,fa=a.a.forwardRef(function(e,t){var n=e.actions,r=e.autoFocus,o=e.className,l=e.onKeyDown,u=e.disableListWrap,s=void 0!==u&&u,c=ue()(e,["actions","autoFocus","className","onKeyDown","disableListWrap"]),f=a.a.useRef(null),d=a.a.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});ca(function(){r&&f.current.focus()},[r]),a.a.useImperativeHandle(n,function(){return{adjustStyleForScrollbar:function(e,t){var n=!f.current.style.width;if(e.clientHeight<f.current.clientHeight&&n){var r="".concat(jr(!0),"px");f.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,f.current.style.width="calc(100% + ".concat(r,")")}return f.current}}},[]);var p=He(a.a.useCallback(function(e){f.current=i.a.findDOMNode(e)},[]),t);return a.a.createElement(oa,ie()({role:"menu",ref:p,className:o,onKeyDown:function(e){var t=f.current,n=e.key,r=br(t).activeElement;if("ArrowUp"!==n&&"ArrowDown"!==n||r&&(!r||t.contains(r))){if("ArrowDown"===n)e.preventDefault(),sa(t,r,s,ia);else if("ArrowUp"===n)e.preventDefault(),sa(t,r,s,la);else if("Home"===n)e.preventDefault(),sa(t,null,s,ia);else if("End"===n)e.preventDefault(),sa(t,null,s,la);else if(1===n.length){var a=d.current,o=n.toLowerCase(),i=performance.now();a.keys.length>0&&(i-a.lastTime>500?(a.keys=[],a.repeating=!0,a.previousKeyMatched=!0):a.repeating&&o!==a.keys[0]&&(a.repeating=!1)),a.lastTime=i,a.keys.push(o);var u=r&&!a.repeating&&ua(r,a);a.previousKeyMatched&&(u||sa(t,r,!1,ia,a))?e.preventDefault():a.previousKeyMatched=!1}}else sa(t,null,s,ia);l&&l(e)},tabIndex:r?0:-1},c))}),da={vertical:"top",horizontal:"right"},pa={vertical:"top",horizontal:"left"},ma=a.a.forwardRef(function(e,t){var n=e.autoFocus,r=e.children,o=e.classes,l=e.disableAutoFocusItem,u=void 0!==l&&l,s=e.MenuListProps,c=void 0===s?{}:s,f=e.onClose,d=e.onEntering,p=e.open,m=e.PaperProps,h=void 0===m?{}:m,v=e.PopoverClasses,y=e.theme,b=e.transitionDuration,g=void 0===b?"auto":b,x=e.variant,w=void 0===x?"selectedMenu":x,E=ue()(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","theme","transitionDuration","variant"]),k=void 0!==n?n:!u,S=a.a.useRef(null),C=a.a.useRef(null),T=a.a.useRef(null),P=null,O=null,j=a.a.Children.map(r,function(e,t){if(!a.a.isValidElement(e))return null;null===P&&(P=t);var n=null;return"menu"!==w&&null===O&&e.props.selected&&!e.props.disabled?(O=t,n={},k&&(n.autoFocus=!0),void 0===e.props.tabIndex&&(n.tabIndex=0),n.ref=function(t){T.current=i.a.findDOMNode(t),Ke(e.ref,t)}):t===P&&(n={ref:function(t){C.current=i.a.findDOMNode(t),Ke(e.ref,t)}}),null!==n?a.a.cloneElement(e,n):e});return a.a.createElement(na,ie()({getContentAnchorEl:function(){return T.current||C.current},classes:v,onClose:f,onEntering:function(e){S.current&&S.current.adjustStyleForScrollbar(e,y),d&&d(e)},anchorOrigin:"rtl"===y.direction?da:pa,transformOrigin:"rtl"===y.direction?da:pa,PaperProps:ie()({},h,{classes:ie()({},h.classes,{root:o.paper})}),open:p,ref:t,transitionDuration:g},E),a.a.createElement(fa,ie()({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),f&&f(e,"tabKeyDown"))},actions:S,autoFocus:k&&null===O},c,{className:Object(we.a)(o.list,c.className)}),j))}),ha=Object(Ae.a)({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:"none"}},{name:"MuiMenu",withTheme:!0})(ma);function va(e,t){return"object"===rn()(t)&&null!==t?e===t:String(e)===String(t)}var ya=a.a.forwardRef(function(e,t){var n=e.autoFocus,r=e.autoWidth,o=e.children,i=e.classes,l=e.className,u=e.disabled,s=e.displayEmpty,c=e.IconComponent,f=e.inputRef,d=e.MenuProps,p=void 0===d?{}:d,m=e.multiple,h=e.name,v=e.onBlur,y=e.onChange,b=e.onClose,g=e.onFocus,x=e.onOpen,w=e.open,E=e.readOnly,k=e.renderValue,S=(e.required,e.SelectDisplayProps),C=e.tabIndex,T=e.type,P=void 0===T?"hidden":T,O=e.value,j=e.variant,R=ue()(e,["autoFocus","autoWidth","children","classes","className","disabled","displayEmpty","IconComponent","inputRef","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","required","SelectDisplayProps","tabIndex","type","value","variant"]),N=a.a.useRef(null),_=a.a.useRef(!1),A=a.a.useRef(null!=e.open).current,M=a.a.useState(),I=We()(M,2),L=I[0],D=I[1],z=a.a.useState(!1),F=We()(z,2),B=F[0],U=F[1],W=a.a.useState(0),V=We()(W,2)[1],K=He(t,f);a.a.useImperativeHandle(K,function(){return{focus:function(){N.current.focus()},node:f?f.current:null,value:O}},[f,O]),a.a.useEffect(function(){A&&w&&(N.current.focus(),V(function(e){return!e})),n&&N.current.focus()},[n,A,w]);var H,$=function(e,t){e?x&&x(t):b&&b(t),A||(D(r?null:N.current.clientWidth),U(e))},q=function(e){return function(t){if(m||$(!1,t),y){var n;if(m){n=Array.isArray(O)?ot()(O):[];var r=O.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;t.persist(),t.target={value:n,name:h},y(t,e)}}},X=A&&N.current?w:B;delete R["aria-invalid"];var G="",J=[],Q=!1;(Qn(e)||s)&&(k?H=k(O):Q=!0);var Y=a.a.Children.map(o,function(e){if(!a.a.isValidElement(e))return null;var t;if(m){if(!Array.isArray(O))throw new Error("Material-UI: the `value` property must be an array when using the `Select` component with `multiple`.");(t=O.some(function(t){return va(t,e.props.value)}))&&Q&&J.push(e.props.children)}else(t=va(O,e.props.value))&&Q&&(G=e.props.children);return a.a.cloneElement(e,{onClick:q(e),role:"option",selected:t,value:void 0,"data-value":e.props.value})});Q&&(H=m?J.join(", "):G);var Z,ee=L;return!r&&A.current&&N.current&&(ee=N.current.clientWidth),Z=void 0!==C?C:u?null:0,a.a.createElement("div",{className:i.root},a.a.createElement("div",ie()({className:Object(we.a)(i.select,i.selectMenu,l,u&&i.disabled,"filled"===j&&i.filled,"outlined"===j&&i.outlined),ref:N,"aria-pressed":X?"true":"false",tabIndex:Z,role:"button","aria-owns":X?"menu-".concat(h||""):void 0,"aria-haspopup":"true",onKeyDown:function(e){E||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),_.current=!0,$(!0,e))},onBlur:function(e){if(!0===_.current)return e.stopPropagation(),void(_.current=!1);v&&(e.persist(),e.target={value:O,name:h},v(e))},onClick:u||E?null:function(e){_.current=!0,$(!0,e)},onFocus:g,id:h?"select-".concat(h):void 0},S),null!=H?H:a.a.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})),a.a.createElement("input",ie()({value:Array.isArray(O)?O.join(","):O,name:h,ref:K,type:P,autoFocus:n},R)),a.a.createElement(c,{className:i.icon}),a.a.createElement(ha,ie()({id:"menu-".concat(h||""),anchorEl:N.current,open:X,onClose:function(e){$(!1,e)}},p,{MenuListProps:ie()({role:"listbox",disableListWrap:!0},p.MenuListProps),PaperProps:ie()({},p.PaperProps,{style:ie()({minWidth:ee},null!=p.PaperProps?p.PaperProps.style:null)})}),Y))}),ba=ze(a.a.createElement("path",{d:"M7 10l5 5 5-5z"})),ga=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.disabled,i=e.IconComponent,l=e.inputRef,u=e.name,s=e.onChange,c=e.value,f=e.variant,d=ue()(e,["classes","className","disabled","IconComponent","inputRef","name","onChange","value","variant"]);return a.a.createElement("div",{className:n.root},a.a.createElement("select",ie()({className:Object(we.a)(n.select,r,"filled"===f&&n.filled,"outlined"===f&&n.outlined,o&&n.disabled),name:u,disabled:o,onChange:s,value:c,ref:l||t},d)),a.a.createElement(i,{className:n.icon}))}),xa=function(e){return{root:{position:"relative",width:"100%"},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",paddingRight:32,borderRadius:0,width:"calc(100% - 32px)",minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper}},filled:{width:"calc(100% - 44px)"},outlined:{width:"calc(100% - 46px)",borderRadius:e.shape.borderRadius},selectMenu:{width:"auto",height:"auto",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",color:e.palette.action.active,"pointer-events":"none"}}},wa=a.a.createElement(tr,null),Ea=a.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.IconComponent,i=void 0===o?ba:o,l=e.input,u=void 0===l?wa:l,s=e.inputProps,c=e.muiFormControl,f=(e.variant,ue()(e,["children","classes","IconComponent","input","inputProps","muiFormControl","variant"])),d=Kn({props:e,muiFormControl:c,states:["variant"]});return a.a.cloneElement(u,ie()({inputComponent:ga,inputProps:ie()({children:n,classes:r,IconComponent:i,variant:d.variant,type:void 0},s,u?u.props.inputProps:{}),ref:t},f))});Ea.muiName="Select";Object(Ae.a)(xa,{name:"MuiNativeSelect"})(ur(Ea));var ka=xa,Sa=a.a.createElement(tr,null),Ca=a.a.forwardRef(function e(t,n){var r=t.autoWidth,o=void 0!==r&&r,i=t.children,l=t.classes,u=t.displayEmpty,s=void 0!==u&&u,c=t.IconComponent,f=void 0===c?ba:c,d=t.input,p=void 0===d?Sa:d,m=t.inputProps,h=t.MenuProps,v=t.muiFormControl,y=t.multiple,b=void 0!==y&&y,g=t.native,x=void 0!==g&&g,w=t.onClose,E=t.onOpen,k=t.open,S=t.renderValue,C=t.SelectDisplayProps,T=(t.variant,ue()(t,["autoWidth","children","classes","displayEmpty","IconComponent","input","inputProps","MenuProps","muiFormControl","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"])),P=x?ga:ya,O=Kn({props:t,muiFormControl:v,states:["variant"]});return a.a.cloneElement(p,ie()({inputComponent:P,inputProps:ie()({children:i,IconComponent:f,variant:O.variant,type:void 0,multiple:b},x?{}:{autoWidth:o,displayEmpty:s,MenuProps:h,onClose:w,onOpen:E,open:k,renderValue:S,SelectDisplayProps:C},m,{classes:m?Object(yr.a)({baseClasses:l,newClasses:m.classes,Component:e}):l},p?p.props.inputProps:{}),ref:n},T))});Ca.muiName="Select";var Ta=Object(Ae.a)(ka,{name:"MuiSelect"})(ur(Ca)),Pa={standard:tr,filled:rr,outlined:lr},Oa=a.a.forwardRef(function(e,t){var n=e.autoComplete,r=e.autoFocus,o=e.children,l=e.classes,u=e.className,s=e.defaultValue,c=e.error,f=e.FormHelperTextProps,d=e.fullWidth,p=e.helperText,m=e.id,h=e.InputLabelProps,v=e.inputProps,y=e.InputProps,b=e.inputRef,g=e.label,x=e.multiline,w=e.name,E=e.onBlur,k=e.onChange,S=e.onFocus,C=e.placeholder,T=e.required,P=void 0!==T&&T,O=e.rows,j=e.rowsMax,R=e.select,N=void 0!==R&&R,_=e.SelectProps,A=e.type,M=e.value,I=e.variant,L=void 0===I?"standard":I,D=ue()(e,["autoComplete","autoFocus","children","classes","className","defaultValue","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]),z=a.a.useState(0),F=We()(z,2),B=F[0],U=F[1],W=a.a.useRef(null);a.a.useEffect(function(){if("outlined"===L){var e=i.a.findDOMNode(W.current);U(null!=e?e.offsetWidth:0)}},[L,P]);var V={};"outlined"===L&&(h&&void 0!==h.shrink&&(V.notched=h.shrink),V.labelWidth=B);var K=p&&m?"".concat(m,"-helper-text"):void 0,H=Pa[L],$=a.a.createElement(H,ie()({"aria-describedby":K,autoComplete:n,autoFocus:r,defaultValue:s,fullWidth:d,multiline:x,name:w,rows:O,rowsMax:j,type:A,value:M,id:m,inputRef:b,onBlur:E,onChange:k,onFocus:S,placeholder:C,inputProps:v},V,y));return a.a.createElement(mr,ie()({className:Object(we.a)(l.root,u),error:c,fullWidth:d,ref:t,required:P,variant:L},D),g&&a.a.createElement(dr,ie()({htmlFor:m,ref:W},h),g),N?a.a.createElement(Ta,ie()({"aria-describedby":K,value:M,input:$},_),o):$,p&&a.a.createElement(vr,ie()({id:K},f),p))}),ja=Object(Ae.a)({root:{}},{name:"MuiTextField"})(Oa),Ra=n(11),Na=a.a.forwardRef(function(e,t){var n=e.children,r=e.classes,o=e.className,i=e.color,l=void 0===i?"default":i,u=e.component,s=void 0===u?"button":u,c=e.disabled,f=void 0!==c&&c,d=e.disableFocusRipple,p=void 0!==d&&d,m=e.focusVisibleClassName,h=e.fullWidth,v=void 0!==h&&h,y=e.size,b=void 0===y?"medium":y,g=e.type,x=void 0===g?"button":g,w=e.variant,E=void 0===w?"text":w,k=ue()(e,["children","classes","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","fullWidth","size","type","variant"]),S="text"===E,C="outlined"===E,T="contained"===E,P="primary"===l,O="secondary"===l,j=Object(we.a)(r.root,o,S&&[r.text,P&&r.textPrimary,O&&r.textSecondary],C&&[r.outlined,P&&r.outlinedPrimary,O&&r.outlinedSecondary],T&&[r.contained,P&&r.containedPrimary,O&&r.containedSecondary],"medium"!==b&&r["size".concat(Object(Me.a)(b))],f&&r.disabled,v&&r.fullWidth,"inherit"===l&&r.colorInherit);return a.a.createElement(Rt,ie()({className:j,component:s,disabled:f,focusRipple:!p,focusVisibleClassName:Object(we.a)(r.focusVisible,m),ref:t,type:x},k),a.a.createElement("span",{className:r.label},n))}),_a=Object(Ae.a)(function(e){return{root:ie()({lineHeight:1.75},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Object(Ra.b)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(Ra.b)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(Ra.b)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 16px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Object(Ra.b)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Object(Ra.b)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Object(Ra.b)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Object(Ra.b)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},sizeSmall:{padding:"4px 8px",fontSize:e.typography.pxToRem(13)},sizeLarge:{padding:"8px 24px",fontSize:e.typography.pxToRem(15)},fullWidth:{width:"100%"}}},{name:"MuiButton"})(Na);n(103);function Aa(e){var t=e.children;return a.a.createElement(Vn,{component:"div",style:{padding:24}},t)}Aa.propTypes={children:f.a.node.isRequired};var Ma=Aa;function Ia(e){return(Ia="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function La(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Da(e){return(Da=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function za(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Fa(e,t){return(Fa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ba=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Ia(t)&&"function"!=typeof t?za(e):t}(this,Da(t).call(this,e))).state={tabValue:0,username:"",password:""},n.changeTabValue=n.changeTabValue.bind(za(n)),n.changeUsernameValue=n.changeUsernameValue.bind(za(n)),n.changePasswordValue=n.changePasswordValue.bind(za(n)),n.loginButtonClickHandler=n.loginButtonClickHandler.bind(za(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fa(e,t)}(t,a.a.Component),n=t,(r=[{key:"changeTabValue",value:function(e,t){this.setState({tabValue:t})}},{key:"changeUsernameValue",value:function(e){this.setState({username:e.target.value})}},{key:"changePasswordValue",value:function(e){this.setState({password:e.target.value})}},{key:"loginButtonClickHandler",value:function(){var e=this.state,t=(e.username,e.password);switch(e.tabValue){case 0:case 1:break;case 2:!function(e){"asdf"===e?window.location.href="/admin-dashboard":alert("Password salah")}(t)}}},{key:"render",value:function(){var e=this.state,t=e.tabValue,n=e.username,r=e.password;return a.a.createElement("div",{className:"LoginScreen"},a.a.createElement(Xt,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:0},a.a.createElement(Xt,{item:!0,xs:12},a.a.createElement(Vn,{className:"Header",variant:"h1",component:"h2"},"VIRALIN")),a.a.createElement(Xt,{item:!0,xs:12},a.a.createElement("br",null)),a.a.createElement(Xt,{item:!0,xs:3}),a.a.createElement(Xt,{item:!0,xs:12,sm:6},a.a.createElement(Jt,null,a.a.createElement(Vt,{className:"Paper"},a.a.createElement(Ft,{value:t,onChange:this.changeTabValue},a.a.createElement(Ut,{label:"Akun Bisnis"}),a.a.createElement(Ut,{label:"Akun Promotor"}),a.a.createElement(Ut,{label:"Akun Admin"})),a.a.createElement(Ma,null,(0===t||1===t)&&a.a.createElement(ja,{id:"filled-username",label:"Username",className:"TextField",margin:"normal",variant:"filled",fullWidth:!0,value:n,onChange:this.changeUsernameValue}),a.a.createElement(ja,{id:"filled-password",label:"Password",className:"TextField",margin:"normal",variant:"filled",type:"password",fullWidth:!0,value:r,onChange:this.changePasswordValue}),a.a.createElement(_a,{variant:"contained",color:"primary",className:"Button",onClick:this.loginButtonClickHandler},a.a.createElement(Vn,{variant:"subtitle1"},"Login")),(0===t||1===t)&&a.a.createElement(Bn,{component:"span"},a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement(re,{to:"/forgot-password",className:"Button"},"Forgot Password?"),"  |  ",a.a.createElement(re,{to:"/register",className:"Button"},"Register")))),(0===t||1===t)&&a.a.createElement(Vn,{variant:"subtitle1"},a.a.createElement("br",null),"Promosi? Viralin ajaaa.."))),a.a.createElement(Xt,{item:!0,xs:3})))}}])&&La(n.prototype,r),o&&La(n,o),t}(),Ua=(n(123),a.a.forwardRef(function(e,t){var n=e.children,r=e.component,o=void 0===r?"div":r,i=e.classes,l=e.className,u=e.disablePointerEvents,s=void 0!==u&&u,c=e.disableTypography,f=void 0!==c&&c,d=e.muiFormControl,p=e.position,m=e.variant,h=ue()(e,["children","component","classes","className","disablePointerEvents","disableTypography","muiFormControl","position","variant"]),v=m;return d&&!v&&(v=d.variant),a.a.createElement(Hn.Provider,{value:null},a.a.createElement(o,ie()({className:Object(we.a)(i.root,l,"filled"===v&&i.filled,"start"===p&&i.positionStart,"end"===p&&i.positionEnd,s&&i.disablePointerEvents),ref:t},h),"string"!=typeof n||f?n:a.a.createElement(Vn,{color:"textSecondary"},n)))})),Wa=Object(Ae.a)({root:{display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center"},filled:{"&$positionStart":{marginTop:16}},positionStart:{marginRight:8},positionEnd:{marginLeft:8},disablePointerEvents:{pointerEvents:"none"}},{name:"MuiInputAdornment"})(ur(Ua));function Va(e){var t,n,r;return t=e,n=0,r=1,e=(Math.min(Math.max(n,t),r)-n)/(r-n),e=(e-=1)*e*e+1}var Ka=a.a.forwardRef(function(e,t){var n,r=e.classes,o=e.className,i=e.color,l=void 0===i?"primary":i,u=e.disableShrink,s=void 0!==u&&u,c=e.size,f=void 0===c?40:c,d=e.style,p=e.thickness,m=void 0===p?3.6:p,h=e.value,v=void 0===h?0:h,y=e.variant,b=void 0===y?"indeterminate":y,g=ue()(e,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),x={},w={},E={};if("determinate"===b||"static"===b){var k=2*Math.PI*((44-m)/2);x.strokeDasharray=k.toFixed(3),E["aria-valuenow"]=Math.round(v),"static"===b?(x.strokeDashoffset="".concat(((100-v)/100*k).toFixed(3),"px"),w.transform="rotate(-90deg)"):(x.strokeDashoffset="".concat((n=(100-v)/100,n*n*k).toFixed(3),"px"),w.transform="rotate(".concat((270*Va(v/70)).toFixed(3),"deg)"))}return a.a.createElement("div",ie()({className:Object(we.a)(r.root,o,"inherit"!==l&&r["color".concat(Object(Me.a)(l))],"indeterminate"===b&&r.indeterminate,"static"===b&&r.static),style:ie()({width:f,height:f},w,d),ref:t,role:"progressbar"},E,g),a.a.createElement("svg",{className:r.svg,viewBox:"".concat(22," ").concat(22," ").concat(44," ").concat(44)},a.a.createElement("circle",{className:Object(we.a)(r.circle,"indeterminate"===b&&r.circleIndeterminate,"static"===b&&r.circleStatic,s&&r.circleDisableShrink),style:x,cx:44,cy:44,r:(44-m)/2,fill:"none",strokeWidth:m})))}),Ha=Object(Ae.a)(function(e){return{root:{display:"inline-block",lineHeight:1},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"mui-progress-circular-rotate 1.4s linear infinite",animationName:"$mui-progress-circular-rotate"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"mui-progress-circular-dash 1.4s ease-in-out infinite",animationName:"$mui-progress-circular-dash",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},"@keyframes mui-progress-circular-rotate":{"100%":{transform:"rotate(360deg)"}},"@keyframes mui-progress-circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-125px"}},circleDisableShrink:{animation:"none"}}},{name:"MuiCircularProgress",flip:!1})(Ka),$a=fetch("https://cors-anywhere.herokuapp.com/https://dev.farizdotid.com/api/daerahindonesia/provinsi",{crossDomain:!0,method:"GET"}).then(function(e){return e.json()}),qa=function(e){return fetch("".concat("https://cors-anywhere.herokuapp.com/").concat("https://dev.farizdotid.com/api/daerahindonesia/provinsi/").concat(e,"/kabupaten"),{crossDomain:!0,method:"GET"}).then(function(e){return e.json()})};function Xa(e){return(Xa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ga(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ja(e){return(Ja=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qa(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ya(e,t){return(Ya=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Za=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Xa(t)&&"function"!=typeof t?Qa(e):t}(this,Ja(t).call(this,e))).state={namaUsaha:"",submittedNamaUsaha:"",jenisUsaha:"",submittedJenisUsaha:"",namaPebisnis:"",submittedNamaPebisnis:"",email:"",submittedEmail:"",nomorTelepon:"",submittedNomorTelepon:"",tempatLahir:"",submittedTempatLahir:"",tanggalLahir:"",submittedTanggalLahir:"",isLoadingProvinsi:!1,isProvinsiLoaded:!1,provinsiArray:[],provinsi:"",provinsiValue:0,submittedProvinsi:"",isLoadingKabupatenKota:!1,isKabupatenKotaLoaded:!1,kabupatenKotaArray:[],kabupatenKota:"",kabupatenKotaValue:0,submittedKabupatenKota:"",alamat:"",submittedAlamat:"",username:"",submittedUsername:"",password:"",passwordConfirmation:"",submittedPassword:""},n.handleSubmit=n.handleSubmit.bind(Qa(n)),n.changeTanggalLahirValue=n.changeTanggalLahirValue.bind(Qa(n)),n.changeProvinsiValue=n.changeProvinsiValue.bind(Qa(n)),n.changeKabupatenKotaValue=n.changeKabupatenKotaValue.bind(Qa(n)),n.handleInputChange=n.handleInputChange.bind(Qa(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ya(e,t)}(t,a.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){this.fetchProvinsi()}},{key:"handleSubmit",value:function(e){var t=this,n=this.state,r=n.namaUsaha,a=n.jenisUsaha,o=n.namaPebisnis,i=n.email,l=n.nomorTelepon,u=n.tempatLahir,s=n.tanggalLahir,c=n.provinsi,f=n.kabupatenKota,d=n.alamat,p=n.username,m=n.password,h=n.passwordConfirmation;e.preventDefault(),m===h?this.setState({submittedNamaUsaha:r,submittedJenisUsaha:a,submittedNamaPebisnis:o,submittedEmail:i,submittedNomorTelepon:l,submittedTempatLahir:u,submittedTanggalLahir:s,submittedProvinsi:c,submittedKabupatenKota:f,submittedAlamat:d,submittedUsername:p,submittedPassword:m},function(){var e=t.state,n=e.submittedNamaUsaha,r=e.submittedJenisUsaha,a=e.submittedNamaPebisnis,o=e.submittedEmail,i=e.submittedNomorTelepon,l=e.submittedTempatLahir,u=e.submittedTanggalLahir,s=e.submittedProvinsi,c=e.submittedKabupatenKota,f={namaUsaha:n,jenisUsaha:r,namaPebisnis:a,email:o,nomorTelepon:i,alamat:e.submittedAlamat,provinsi:s,kabupatenKota:c,tempatLahir:l,tanggalLahir:u,username:e.submittedUsername,password:e.submittedPassword};console.table(f)}):console.log("password not match")}},{key:"handleInputChange",value:function(e){var t=e.target,n=t.value,r=t.name;this.setState(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},r,n))}},{key:"changeTanggalLahirValue",value:function(e){this.setState({tanggalLahir:e.target.value})}},{key:"changeProvinsiValue",value:function(e){this.fetchKabupatenKota(e.target.value),this.setState({provinsi:e.target.options[e.target.selectedIndex].text,provinsiValue:e.target.value})}},{key:"changeKabupatenKotaValue",value:function(e){this.setState({kabupatenKota:e.target.options[e.target.selectedIndex].text,kabupatenKotaValue:e.target.value})}},{key:"fetchProvinsi",value:function(){var e=this;this.setState({isLoadingProvinsi:!0}),$a.then(function(t){e.setState({isProvinsiLoaded:!0}),t.error||e.setState({provinsiArray:t.semuaprovinsi,isLoadingProvinsi:!1})},function(e){console.log(e)})}},{key:"fetchKabupatenKota",value:function(e){var t=this;this.setState({isLoadingKabupatenKota:!0}),qa(e).then(function(e){t.setState({isKabupatenKotaLoaded:!0}),e.error||t.setState({kabupatenKotaArray:e.kabupatens,isLoadingKabupatenKota:!1})},function(e){console.log(e)})}},{key:"goToDashboard",value:function(){window.location.hash="/seller-dashboard"}},{key:"render",value:function(){var e=this.state,t=e.namaUsaha,n=e.jenisUsaha,r=e.namaPebisnis,o=e.email,i=e.nomorTelepon,l=e.tempatLahir,u=e.tanggalLahir,s=e.isLoadingProvinsi,c=e.isProvinsiLoaded,f=e.provinsiValue,d=e.provinsiArray,p=e.isLoadingKabupatenKota,m=e.isKabupatenKotaLoaded,h=e.kabupatenKotaValue,v=e.kabupatenKotaArray,y=e.alamat,b=e.username,g=e.password,x=e.passwordConfirmation,w=d.map(function(e){return a.a.createElement("option",{key:e.id,value:e.id},e.nama)}),E=v.map(function(e){return a.a.createElement("option",{key:e.id,value:e.id},e.nama)});return a.a.createElement("div",null,a.a.createElement("form",{onSubmit:this.handleSubmit},a.a.createElement(Vn,{variant:"subtitle1"},"Registrasi Akun Bisnis"),a.a.createElement(ja,{id:"filled-namausaha",label:"Nama Usaha",className:"TextField",margin:"normal",variant:"filled",name:"namaUsaha",fullWidth:!0,value:t,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-jenisusaha",label:"Jenis Usaha",className:"TextField",margin:"normal",variant:"filled",name:"jenisUsaha",fullWidth:!0,value:n,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-namapebisnis",label:"Nama Pebisnis",className:"TextField",margin:"normal",variant:"filled",name:"namaPebisnis",fullWidth:!0,value:r,onChange:this.handleInputChange}),a.a.createElement(Vn,{variant:"subtitle1"},"Informasi Kontak"),a.a.createElement(ja,{id:"filled-email-input",label:"Email",className:"TextField",type:"email",name:"email",autoComplete:"email",margin:"normal",variant:"filled",fullWidth:!0,value:o,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-nomorTelepon",label:"Nomor Telepon",name:"nomorTelepon",fullWidth:!0,value:i,onChange:this.handleInputChange,type:"number",className:"TextField",InputLabelProps:{shrink:!0},InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},"+62")},margin:"normal",variant:"filled"}),a.a.createElement(ja,{id:"filled-alamat",label:"Alamat Tinggal",className:"TextField",margin:"normal",variant:"filled",name:"alamat",fullWidth:!0,value:y,onChange:this.handleInputChange}),a.a.createElement("br",null),s&&a.a.createElement("div",null,a.a.createElement(Ha,null),a.a.createElement(Vn,null,"Mengambil data provinsi...")),c&&!s&&a.a.createElement(mr,{className:"FormControl",variant:"filled",fullWidth:!0},a.a.createElement(dr,{htmlFor:"filled-provinsi-native-simple"},"Provinsi Tempat Tinggal"),a.a.createElement(Ta,{native:!0,value:f,onChange:this.changeProvinsiValue,input:a.a.createElement(rr,{name:"age",id:"filled-age-native-simple"})},a.a.createElement("option",{value:""}),w)),a.a.createElement("br",null),a.a.createElement("br",null),p&&a.a.createElement("div",null,a.a.createElement(Ha,null),a.a.createElement(Vn,null,"Mengambil data kabupaten/kota...")),m&&!p&&a.a.createElement(mr,{className:"FormControl",variant:"filled",fullWidth:!0},a.a.createElement(dr,{htmlFor:"filled-provinsi-native-simple"},"Kabupaten / Kota Tempat Tinggal"),a.a.createElement(Ta,{native:!0,value:h,onChange:this.changeKabupatenKotaValue,input:a.a.createElement(rr,{name:"age",id:"filled-age-native-simple"})},a.a.createElement("option",{value:""}),E)),a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement(Vn,{variant:"subtitle1"},"Informasi Kelahiran"),a.a.createElement(ja,{id:"filled-tempatlahir",label:"Tempat Lahir",className:"TextField",margin:"normal",variant:"filled",name:"tempatLahir",fullWidth:!0,value:l,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filledtanggallahir",label:"Tanggal Lahir",type:"date",className:"TextField",margin:"normal",variant:"filled",name:"tanggalLahir",fullWidth:!0,InputLabelProps:{shrink:!0},value:u,onChange:this.changeTanggalLahirValue}),a.a.createElement(Vn,{variant:"subtitle1"},"Informasi Akun"),a.a.createElement(ja,{id:"filled-username",label:"Username",className:"TextField",margin:"normal",variant:"filled",name:"username",fullWidth:!0,value:b,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-password-input",label:"Password",className:"TextField",type:"password",margin:"normal",variant:"filled",name:"password",fullWidth:!0,value:g,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-passwordConfirmation-input",label:"Konfirmasi Password",className:"TextField",type:"password",margin:"normal",variant:"filled",name:"passwordConfirmation",fullWidth:!0,value:x,onChange:this.handleInputChange}),a.a.createElement(_a,{variant:"contained",color:"primary",className:"Button",type:"submit",onClick:this.goToDashboard},a.a.createElement(Vn,{variant:"subtitle1"},"Register"))))}}])&&Ga(n.prototype,r),o&&Ga(n,o),t}();n(125);function eo(e){return(eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function to(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function no(e){return(no=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ro(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ao(e,t){return(ao=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var oo=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==eo(t)&&"function"!=typeof t?ro(e):t}(this,no(t).call(this,e))).state={namaPromotor:"",submittedNamaPromotor:"",email:"",submittedEmail:"",facebook:"",submittedFacebook:"",twitter:"",submittedTwitter:"",instagram:"",submittedInstagram:"",nomorTelepon:"",submittedNomorTelepon:"",tempatLahir:"",submittedTempatLahir:"",tanggalLahir:"",submittedTanggalLahir:"",isLoadingProvinsi:!1,isProvinsiLoaded:!1,provinsiArray:[],provinsi:"",provinsiValue:0,submittedProvinsi:"",isLoadingKabupatenKota:!1,isKabupatenKotaLoaded:!1,kabupatenKotaArray:[],kabupatenKota:"",kabupatenKotaValue:0,submittedKabupatenKota:"",alamat:"",submittedAlamat:"",username:"",submittedUsername:"",password:"",passwordConfirmation:"",submittedPassword:""},n.handleSubmit=n.handleSubmit.bind(ro(n)),n.handleInputChange=n.handleInputChange.bind(ro(n)),n.changeProvinsiValue=n.changeProvinsiValue.bind(ro(n)),n.changeKabupatenKotaValue=n.changeKabupatenKotaValue.bind(ro(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ao(e,t)}(t,a.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){this.fetchProvinsi()}},{key:"handleSubmit",value:function(e){var t=this,n=this.state,r=n.namaPromotor,a=n.email,o=n.facebook,i=n.twitter,l=n.instagram,u=n.nomorTelepon,s=n.tempatLahir,c=n.tanggalLahir,f=n.provinsi,d=n.kabupatenKota,p=n.alamat,m=n.username,h=n.password,v=n.passwordConfirmation;e.preventDefault(),h===v?this.setState({submittedNamaPromotor:r,submittedEmail:a,submittedFacebook:o,submittedTwitter:i,submittedInstagram:l,submittedNomorTelepon:u,submittedTempatLahir:s,submittedTanggalLahir:c,submittedProvinsi:f,submittedKabupatenKota:d,submittedAlamat:p,submittedUsername:m,submittedPassword:h},function(){var e=t.state,n=e.submittedNamaPromotor,r=e.submittedEmail,a=e.submittedFacebook,o=e.submittedTwitter,i=e.submittedInstagram,l=e.submittedNomorTelepon,u=e.submittedTempatLahir,s=e.submittedTanggalLahir,c=e.submittedProvinsi,f=e.submittedKabupatenKota,d={namaPromotor:n,facebook:a,twitter:o,instagram:i,email:r,nomorTelepon:l,alamat:e.submittedAlamat,provinsi:c,kabupatenKota:f,tempatLahir:u,tanggalLahir:s,username:e.submittedUsername,password:e.submittedPassword};console.table(d)}):console.log("password not match")}},{key:"handleInputChange",value:function(e){var t=e.target,n=t.value,r=t.name;this.setState(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},r,n))}},{key:"changeProvinsiValue",value:function(e){this.fetchKabupatenKota(e.target.value),this.setState({provinsi:e.target.options[e.target.selectedIndex].text,provinsiValue:e.target.value})}},{key:"changeKabupatenKotaValue",value:function(e){this.setState({kabupatenKota:e.target.options[e.target.selectedIndex].text,kabupatenKotaValue:e.target.value})}},{key:"fetchProvinsi",value:function(){var e=this;this.setState({isLoadingProvinsi:!0}),$a.then(function(t){e.setState({isProvinsiLoaded:!0}),t.error||e.setState({provinsiArray:t.semuaprovinsi,isLoadingProvinsi:!1})},function(e){console.log(e)})}},{key:"fetchKabupatenKota",value:function(e){var t=this;this.setState({isLoadingKabupatenKota:!0}),qa(e).then(function(e){t.setState({isKabupatenKotaLoaded:!0}),e.error||t.setState({kabupatenKotaArray:e.kabupatens,isLoadingKabupatenKota:!1})},function(e){console.log(e)})}},{key:"render",value:function(){var e=this.state,t=e.namaPromotor,n=e.email,r=e.facebook,o=e.twitter,i=e.instagram,l=e.nomorTelepon,u=e.tempatLahir,s=e.tanggalLahir,c=e.isLoadingProvinsi,f=e.isProvinsiLoaded,d=e.provinsiValue,p=e.provinsiArray,m=e.isLoadingKabupatenKota,h=e.isKabupatenKotaLoaded,v=e.kabupatenKotaValue,y=e.kabupatenKotaArray,b=e.alamat,g=e.username,x=e.password,w=e.passwordConfirmation,E=p.map(function(e){return a.a.createElement("option",{key:e.id,value:e.id},e.nama)}),k=y.map(function(e){return a.a.createElement("option",{key:e.id,value:e.id},e.nama)});return a.a.createElement("div",null,a.a.createElement("form",{onSubmit:this.handleSubmit},a.a.createElement(Vn,{variant:"subtitle1"},"Registrasi Akun Promotor"),a.a.createElement(ja,{id:"filled-namaPromotor",label:"Nama Promotor",className:"TextField",margin:"normal",variant:"filled",name:"namaPromotor",fullWidth:!0,value:t,onChange:this.handleInputChange}),a.a.createElement(Vn,{variant:"subtitle1"},"Informasi Kontak"),a.a.createElement(ja,{id:"filled-email-input",label:"Email",className:"TextField",type:"email",name:"email",autoComplete:"email",margin:"normal",variant:"filled",fullWidth:!0,value:n,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-nomorTelepon",label:"Nomor Telepon",name:"nomorTelepon",fullWidth:!0,value:l,onChange:this.handleInputChange,type:"number",className:"TextField",InputLabelProps:{shrink:!0},InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},"+62")},margin:"normal",variant:"filled"}),a.a.createElement(ja,{id:"filled-alamat",label:"Alamat Tinggal",className:"TextField",margin:"normal",variant:"filled",name:"alamat",fullWidth:!0,value:b,onChange:this.handleInputChange}),a.a.createElement("br",null),c&&a.a.createElement("div",null,a.a.createElement(Ha,null),a.a.createElement(Vn,null,"Mengambil data provinsi...")),f&&!c&&a.a.createElement(mr,{className:"FormControl",variant:"filled",fullWidth:!0},a.a.createElement(dr,{htmlFor:"filled-provinsi-native-simple"},"Provinsi Tempat Tinggal"),a.a.createElement(Ta,{native:!0,value:d,onChange:this.changeProvinsiValue,input:a.a.createElement(rr,{name:"age",id:"filled-age-native-simple"})},a.a.createElement("option",{value:""}),E)),a.a.createElement("br",null),a.a.createElement("br",null),m&&a.a.createElement("div",null,a.a.createElement(Ha,null),a.a.createElement(Vn,null,"Mengambil data kabupaten/kota...")),h&&!m&&a.a.createElement(mr,{className:"FormControl",variant:"filled",fullWidth:!0},a.a.createElement(dr,{htmlFor:"filled-provinsi-native-simple"},"Kabupaten / Kota Tempat Tinggal"),a.a.createElement(Ta,{native:!0,value:v,onChange:this.changeKabupatenKotaValue,input:a.a.createElement(rr,{name:"age",id:"filled-age-native-simple"})},a.a.createElement("option",{value:""}),k)),a.a.createElement("br",null),a.a.createElement(ja,{id:"filled-facebook",label:"Halaman Facebook",name:"facebook",fullWidth:!0,value:r,onChange:this.handleInputChange,type:"text",className:"TextField",InputLabelProps:{shrink:!0},InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},"https://www.facebook.com/")},margin:"normal",variant:"filled"}),a.a.createElement(ja,{id:"filled-twitter",label:"Halaman Twitter",name:"twitter",fullWidth:!0,value:o,onChange:this.handleInputChange,type:"text",className:"TextField",InputLabelProps:{shrink:!0},InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},"@")},margin:"normal",variant:"filled"}),a.a.createElement(ja,{id:"filled-instagram",label:"Halaman Instagram",name:"instagram",fullWidth:!0,value:i,onChange:this.handleInputChange,type:"text",className:"TextField",InputLabelProps:{shrink:!0},InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},"@")},margin:"normal",variant:"filled"}),a.a.createElement(Vn,{variant:"subtitle1"},"Informasi Kelahiran"),a.a.createElement(ja,{id:"filled-tempatlahir",label:"Tempat Lahir",className:"TextField",margin:"normal",variant:"filled",name:"tempatLahir",fullWidth:!0,value:u,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filledtanggallahir",label:"Tanggal Lahir",type:"date",className:"TextField",margin:"normal",variant:"filled",name:"tanggalLahir",fullWidth:!0,InputLabelProps:{shrink:!0},value:s,onChange:this.handleInputChange}),a.a.createElement(Vn,{variant:"subtitle1"},"Informasi Akun"),a.a.createElement(ja,{id:"filled-username",label:"Username",className:"TextField",margin:"normal",variant:"filled",name:"username",fullWidth:!0,value:g,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-password-input",label:"Password",className:"TextField",type:"password",margin:"normal",variant:"filled",name:"password",fullWidth:!0,value:x,onChange:this.handleInputChange}),a.a.createElement(ja,{id:"filled-passwordConfirmation-input",label:"Konfirmasi Password",className:"TextField",type:"password",margin:"normal",variant:"filled",name:"passwordConfirmation",fullWidth:!0,value:w,onChange:this.handleInputChange}),a.a.createElement(_a,{variant:"contained",color:"primary",className:"Button",type:"submit"},a.a.createElement(Vn,{variant:"subtitle1"},"Register"))))}}])&&to(n.prototype,r),o&&to(n,o),t}();function io(e){return(io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function lo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function uo(e){return(uo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function so(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function co(e,t){return(co=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var fo=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==io(t)&&"function"!=typeof t?so(e):t}(this,uo(t).call(this,e))).state={tabValue:0},n.changeTabValue=n.changeTabValue.bind(so(n)),n.registerButtonClickHandler=n.registerButtonClickHandler.bind(so(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&co(e,t)}(t,a.a.Component),n=t,(r=[{key:"changeTabValue",value:function(e,t){this.setState({tabValue:t})}},{key:"registerButtonClickHandler",value:function(){var e=this.state.tabValue;console.log("Register button click handler terpanggil, nilai tab: ".concat(e))}},{key:"render",value:function(){var e=this.state.tabValue;return a.a.createElement("div",{className:"LoginScreen"},a.a.createElement(Xt,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:0},a.a.createElement(Xt,{item:!0,xs:12},a.a.createElement(Vn,{className:"Header",variant:"h1",component:"h2"},"Daftar")),a.a.createElement(Xt,{item:!0,xs:12},a.a.createElement("br",null)),a.a.createElement(Xt,{item:!0,xs:3}),a.a.createElement(Xt,{item:!0,xs:12,sm:6},a.a.createElement(Jt,null,a.a.createElement(Vt,{className:"Paper"},a.a.createElement(Ft,{value:e,onChange:this.changeTabValue},a.a.createElement(Ut,{label:"Akun Bisnis"}),a.a.createElement(Ut,{label:"Akun Promotor"})),a.a.createElement(Ma,null,0===e&&a.a.createElement(Za,null),1===e&&a.a.createElement(oo,null))),a.a.createElement(Vn,{variant:"subtitle1"},a.a.createElement("br",null),"Promosi? Viralin ajaaa.."))),a.a.createElement(Xt,{item:!0,xs:3})))}}])&&lo(n.prototype,r),o&&lo(n,o),t}(),po=n(80),mo=n.n(po),ho=n(81),vo=n.n(ho),yo=n(82),bo=n.n(yo),go=a.a.forwardRef(function(e,t){var n=e.alt,r=e.children,o=e.childrenClassName,i=e.classes,l=e.className,u=e.component,s=void 0===u?"div":u,c=e.imgProps,f=e.sizes,d=e.src,p=e.srcSet,m=ue()(e,["alt","children","childrenClassName","classes","className","component","imgProps","sizes","src","srcSet"]),h=null,v=d||p;return h=v?a.a.createElement("img",ie()({alt:n,src:d,srcSet:p,sizes:f,className:i.img},c)):o&&a.a.isValidElement(r)?a.a.cloneElement(r,{className:Object(we.a)(o,r.props.className)}):r,a.a.createElement(s,ie()({className:Object(we.a)(i.root,i.system,l,!v&&i.colorDefault),ref:t},m),h)}),xo=Object(Ae.a)(function(e){return{root:{position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),borderRadius:"50%",overflow:"hidden",userSelect:"none"},colorDefault:{color:e.palette.background.default,backgroundColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},img:{width:"100%",height:"100%",textAlign:"center",objectFit:"cover"}}},{name:"MuiAvatar"})(go),wo=n(79),Eo=n.n(wo),ko=n(78),So=n.n(ko);n(143);function Co(e){return(Co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function To(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Po(e){return(Po=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function jo(e,t){return(jo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ro=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Co(t)&&"function"!=typeof t?Oo(e):t}(this,Po(t).call(this,e))).state={},n.handleClick=n.handleClick.bind(Oo(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&jo(e,t)}(t,a.a.Component),n=t,(r=[{key:"handleClick",value:function(e){this.setState(),window.location.href="/",console.log(e.target)}},{key:"render",value:function(){var e=this.props,t=e.header,n=e.isWithHomeButton,r=e.username,o=e.imageUrl;return a.a.createElement(Xt,{container:!0,direction:"row",alignItems:"center",spacing:0,className:"Navigation"},a.a.createElement(Xt,{container:!0,item:!0,direction:"row",alignItems:"center",spacing:0,className:"Left",xs:4},n&&a.a.createElement(Rt,{onClick:this.handleClick},a.a.createElement(So.a,null))),a.a.createElement(Xt,{container:!0,item:!0,direction:"row",justify:"center",alignItems:"center",spacing:0,className:"Middle",xs:4},a.a.createElement(Vn,{variant:"h5"},t)),a.a.createElement(Xt,{container:!0,item:!0,direction:"row-reverse",alignItems:"center",spacing:0,className:"Right",xs:4},o?a.a.createElement(xo,{src:o}):a.a.createElement(xo,null,a.a.createElement(Eo.a,null)),a.a.createElement("span",null," "),a.a.createElement("span",null," "),a.a.createElement(Vn,null,r)))}}])&&To(n.prototype,r),o&&To(n,o),t}();Ro.defaultProps={header:"",username:"User",imageUrl:"",isWithHomeButton:!1},Ro.propTypes={header:f.a.string,username:f.a.string,imageUrl:f.a.string,isWithHomeButton:f.a.bool};var No=Ro;n(145);function _o(e){return(_o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ao(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mo(e){return(Mo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Io(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Lo(e,t){return(Lo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Do=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==_o(t)&&"function"!=typeof t?Io(e):t}(this,Mo(t).call(this,e))).state={buttons:[{imageIcon:a.a.createElement(mo.a,{fontSize:"inherit"}),targetUrl:"",name:"Konten",header:"Kelola Konten Viral",count:0,activeCount:0},{imageIcon:a.a.createElement(vo.a,{fontSize:"inherit"}),targetUrl:"",name:"Pebisnis",header:"Database Pebisnis",count:0,activeCount:0},{imageIcon:a.a.createElement(bo.a,{fontSize:"inherit"}),targetUrl:"",name:"Promotor",header:"Database Promotor",count:0,activeCount:0}]},n.handleClick=n.handleClick.bind(Io(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Lo(e,t)}(t,a.a.Component),n=t,(r=[{key:"handleClick",value:function(e){switch(this.setState(),e){case 2:window.location.href="/promotor-database";break;case 1:window.location.href="/seller-database";break;case 0:window.location.href="/admin-kelola-konten-viral"}}},{key:"render",value:function(){var e=this,t=this.state.buttons;return a.a.createElement("div",{className:"AdminDashboardScreen"},a.a.createElement(No,{username:"Admin"}),a.a.createElement(Xt,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:0,className:"ButtonsContainer"},t.map(function(t,n){return a.a.createElement(Rt,{key:t.name,className:"Button",onClick:function(t){return e.handleClick(n,t)}},a.a.createElement(Xt,{container:!0,direction:"column",justify:"center",alignItems:"center",spacing:0,className:"ButtonsContainer"},a.a.createElement(Vn,{variant:"h1"},t.imageIcon),a.a.createElement(Vn,{variant:"h5"},t.header),a.a.createElement(Xt,{container:!0,direction:"column",alignItems:"flex-start",justify:"flex-start"},a.a.createElement(Vn,{variant:"subtitle1"},"Total ".concat(t.name,": ").concat(t.count)),a.a.createElement(Vn,{variant:"subtitle1"},"Total Aktif: ".concat(t.activeCount)))))})))}}])&&Ao(n.prototype,r),o&&Ao(n,o),t}(),zo=a.a.createContext(),Fo=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"table":o,l=e.padding,u=void 0===l?"default":l,s=e.size,c=void 0===s?"medium":s,f=ue()(e,["classes","className","component","padding","size"]),d=a.a.useMemo(function(){return{padding:u,size:c}},[u,c]);return a.a.createElement(zo.Provider,{value:d},a.a.createElement(i,ie()({ref:t,className:Object(we.a)(n.root,r)},f)))}),Bo=Object(Ae.a)({root:{display:"table",width:"100%",borderCollapse:"collapse",borderSpacing:0}},{name:"MuiTable"})(Fo),Uo=a.a.createContext(),Wo={variant:"body"},Vo=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"tbody":o,l=ue()(e,["classes","className","component"]);return a.a.createElement(Uo.Provider,{value:Wo},a.a.createElement(i,ie()({className:Object(we.a)(n.root,r),ref:t},l)))}),Ko=Object(Ae.a)({root:{display:"table-row-group"}},{name:"MuiTableBody"})(Vo),Ho=a.a.forwardRef(function(e,t){var n,r=e.align,o=void 0===r?"inherit":r,i=e.classes,l=e.className,u=e.component,s=e.padding,c=e.scope,f=e.size,d=e.sortDirection,p=e.variant,m=ue()(e,["align","classes","className","component","padding","scope","size","sortDirection","variant"]),h=a.a.useContext(zo),v=a.a.useContext(Uo);n=u||(v&&"head"===v.variant?"th":"td");var y=c;!y&&v&&"head"===v.variant&&(y="col");var b=s||(h&&h.padding?h.padding:"default"),g=f||(h&&h.size?h.size:"medium"),x=null;return d&&(x="asc"===d?"ascending":"descending"),a.a.createElement(n,ie()({ref:t,className:Object(we.a)(i.root,l,(p?"head"===p:v&&"head"===v.variant)&&i.head,(p?"body"===p:v&&"body"===v.variant)&&i.body,(p?"footer"===p:v&&"footer"===v.variant)&&i.footer,"inherit"!==o&&i["align".concat(Object(Me.a)(o))],"default"!==b&&i["padding".concat(Object(Me.a)(b))],"medium"!==g&&i["size".concat(Object(Me.a)(g))]),"aria-sort":x,scope:y},m))}),$o=Object(Ae.a)(function(e){return{root:ie()({},e.typography.body2,{display:"table-cell",verticalAlign:"inherit",borderBottom:"1px solid\n    ".concat("light"===e.palette.type?Object(Ra.d)(Object(Ra.b)(e.palette.divider,1),.88):Object(Ra.a)(Object(Ra.b)(e.palette.divider,1),.68)),textAlign:"left",padding:"14px 40px 14px 16px","&:last-child":{paddingRight:16}}),head:{color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12),lineHeight:e.typography.pxToRem(21),fontWeight:e.typography.fontWeightMedium},body:{color:e.palette.text.primary,fontWeight:e.typography.fontWeightRegular},footer:{color:e.palette.text.secondary,lineHeight:e.typography.pxToRem(21),fontSize:e.typography.pxToRem(12)},sizeSmall:{padding:"6px 24px 6px 16px","&:last-child":{paddingRight:16},"&$paddingCheckbox":{width:24,padding:"0px 12px 0 16px","&:last-child":{paddingLeft:12,paddingRight:16},"& > *":{padding:0}}},paddingCheckbox:{width:48,padding:"0 0 0 4px","&:last-child":{paddingLeft:0,paddingRight:4}},paddingNone:{padding:0,"&:last-child":{padding:0}},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right",flexDirection:"row-reverse"},alignJustify:{textAlign:"justify"}}},{name:"MuiTableCell"})(Ho),qo={variant:"head"},Xo=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"thead":o,l=ue()(e,["classes","className","component"]);return a.a.createElement(Uo.Provider,{value:qo},a.a.createElement(i,ie()({className:Object(we.a)(n.root,r),ref:t},l)))}),Go=Object(Ae.a)({root:{display:"table-header-group"}},{name:"MuiTableHead"})(Xo),Jo=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.component,i=void 0===o?"tr":o,l=e.hover,u=void 0!==l&&l,s=e.selected,c=void 0!==s&&s,f=ue()(e,["classes","className","component","hover","selected"]),d=a.a.useContext(Uo);return a.a.createElement(i,ie()({ref:t,className:Object(we.a)(n.root,r,d&&["head"===d.variant&&n.head,"footer"===d.variant&&n.footer],u&&n.hover,c&&n.selected)},f))}),Qo=Object(Ae.a)(function(e){return{root:{color:"inherit",display:"table-row",verticalAlign:"middle",outline:"none","&$selected":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.04)":"rgba(255, 255, 255, 0.08)"},"&$hover:hover":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.07)":"rgba(255, 255, 255, 0.14)"}},selected:{},hover:{},head:{},footer:{}}},{name:"MuiTableRow"})(Jo),Yo=n(48),Zo=n.n(Yo),ei=n(49),ti=n.n(ei),ni=n(83),ri=n.n(ni);n(147);function ai(e){return(ai="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ii(e,t){return!t||"object"!==ai(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function li(e){return(li=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ui(e,t){return(ui=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var si=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=ii(this,li(t).call(this,e))).state={},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ui(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.name,n=e.columns,r=e.rows;return a.a.createElement("div",{className:"AdminDatabaseTable"},a.a.createElement(Xt,{container:!0,direction:"column",spacing:0,className:"Main"},a.a.createElement(Xt,{container:!0,direction:"row",spacing:2,className:"Tools",alignItems:"center"},a.a.createElement(Xt,{item:!0},a.a.createElement(Vt,null,a.a.createElement(ja,{className:"SearchInput",id:"input-with-icon-searchinput",placeholder:"Cari ".concat(t),InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},a.a.createElement(Zo.a,null))}}))),a.a.createElement(Xt,{item:!0},a.a.createElement(Rt,null,a.a.createElement(ti.a,null))),a.a.createElement(Xt,{item:!0},a.a.createElement(Rt,null,a.a.createElement(ri.a,null))),a.a.createElement(Xt,{item:!0},a.a.createElement(Vn,{variant:"h5"},"Total  ",t,":  ",r.length)),a.a.createElement(Xt,{item:!0},a.a.createElement(Vn,{variant:"h5"},"Total Aktif: ",function(e){var t=0;return e.map(function(e){return Object.keys(e).map(function(n){return"Aktif"===e[n]&&(t+=1),!0}),!0}),t}(r)))),a.a.createElement(Xt,{item:!0,xs:12},a.a.createElement(Vt,{className:"TableBodyContainer"},a.a.createElement(Bo,{className:"Table"},a.a.createElement(Go,null,a.a.createElement(Qo,{className:"HeadRow"},n.map(function(e){return a.a.createElement($o,{key:e.toLowerCase().split(" ").join("-"),variant:"head"},e)}))),a.a.createElement(Ko,{className:"TableBody"},r.map(function(e,t){var n=t;return a.a.createElement(Qo,{key:n},Object.keys(e).map(function(t,r){var o=r;return a.a.createElement($o,{key:"".concat(n).concat(o)},e[t])}))})))))))}}])&&oi(n.prototype,r),o&&oi(n,o),t}();si.defaultProps={name:"",rows:[]},si.propTypes={name:f.a.string,columns:f.a.arrayOf(f.a.string).isRequired,rows:f.a.arrayOf(f.a.object)};var ci=si;n(149);function fi(e){return(fi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function di(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pi(e,t){return!t||"object"!==fi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function mi(e){return(mi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function hi(e,t){return(hi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var vi=function(e,t,n,r,a,o){return{namaPromotor:e,kota:t,tanggalRegistrasi:n,status:r,jumlahKonten:a,namaKonten:o}},yi=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=pi(this,mi(t).call(this,e))).state={rows:[vi("Joko1","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko2","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko3","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko4","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko5","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko6","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko7","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko8","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko9","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko10","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko11","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko12","Bandung","10-06-2019","Aktif","1","Peduli kasih"),vi("Joko13","Bandung","10-06-2019","Aktif","1","Peduli kasih")]},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&hi(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.state.rows;return a.a.createElement("div",{className:"PromotorDatabaseScreen"},a.a.createElement(No,{header:"DATABASE PROMOTOR",isWithHomeButton:!0,username:"Admin"}),a.a.createElement(ci,{name:"Promotor",columns:["Nama Promotor","Kota","Tanggal Registrasi","Status","Jumlah Konten Dishare","Nama Konten Viral"],rows:e}))}}])&&di(n.prototype,r),o&&di(n,o),t}();n(151);function bi(e){return(bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xi(e,t){return!t||"object"!==bi(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function wi(e){return(wi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ei(e,t){return(Ei=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ki=function(e,t,n,r,a,o,i){return{namaPebisnis:e,kota:t,tanggalRegistrasi:n,status:r,jumlahPromotor:a,jumlahIklanAktif:o,namaKonten:i}},Si=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=xi(this,wi(t).call(this,e))).state={rows:[ki("Joko1","Bandung","10-06-2019","Aktif","1","1","Peduli kasih"),ki("Joko2","Bandung","10-06-2019","Aktif","1","1","Peduli kasih")]},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ei(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.state.rows;return a.a.createElement("div",{className:"SellerDatabaseScreen"},a.a.createElement(No,{header:"DATABASE PEBISNIS",isWithHomeButton:!0,username:"Admin"}),a.a.createElement(ci,{name:"Pebisnis",columns:["Nama Pebisnis","Kota","Tanggal Registrasi","Status","Jumlah Promotor","Jumlah Iklan Aktif","Nama Konten Viral"],rows:e}))}}])&&gi(n.prototype,r),o&&gi(n,o),t}(),Ci=a.a.forwardRef(function(e,t){var n=e.classes,r=e.className,o=e.color,i=void 0===o?"primary":o,l=e.theme,u=e.value,s=e.valueBuffer,c=e.variant,f=void 0===c?"indeterminate":c,d=ue()(e,["classes","className","color","theme","value","valueBuffer","variant"]),p=Object(we.a)(n.root,r,"primary"===i?n.colorPrimary:n.colorSecondary,"determinate"===f&&n.determinate,"indeterminate"===f&&n.indeterminate,"buffer"===f&&n.buffer,"query"===f&&n.query),m=Object(we.a)(n.dashed,"primary"===i?n.dashedColorPrimary:n.dashedColorSecondary),h=Object(we.a)(n.bar,("indeterminate"===f||"query"===f)&&n.bar1Indeterminate,"primary"===i?n.barColorPrimary:n.barColorSecondary,"determinate"===f&&n.bar1Determinate,"buffer"===f&&n.bar1Buffer),v=Object(we.a)(n.bar,("indeterminate"===f||"query"===f)&&n.bar2Indeterminate,"buffer"===f?[n.bar2Buffer,"primary"===i?n.colorPrimary:n.colorSecondary]:"primary"===i?n.barColorPrimary:n.barColorSecondary),y={},b={bar1:{},bar2:{}};if(("determinate"===f||"buffer"===f)&&void 0!==u){y["aria-valuenow"]=Math.round(u);var g=u-100;"rtl"===l.direction&&(g=-g),b.bar1.transform="translateX(".concat(g,"%)")}if("buffer"===f&&void 0!==s){var x=(s||0)-100;"rtl"===l.direction&&(x=-x),b.bar2.transform="translateX(".concat(x,"%)")}return a.a.createElement("div",ie()({className:p,role:"progressbar"},y,{ref:t},d),"buffer"===f?a.a.createElement("div",{className:m}):null,a.a.createElement("div",{className:h,style:b.bar1}),"determinate"===f?null:a.a.createElement("div",{className:v,style:b.bar2}))}),Ti=Object(Ae.a)(function(e){return{root:{position:"relative",overflow:"hidden",height:4},colorPrimary:{backgroundColor:Object(Ra.d)(e.palette.primary.light,.6)},colorSecondary:{backgroundColor:Object(Ra.d)(e.palette.secondary.light,.4)},determinate:{},indeterminate:{},buffer:{backgroundColor:"transparent"},query:{transform:"rotate(180deg)"},dashed:{position:"absolute",marginTop:0,height:"100%",width:"100%",animation:"buffer 3s infinite linear",animationName:"$buffer"},dashedColorPrimary:{backgroundImage:"radial-gradient(".concat(Object(Ra.d)(e.palette.primary.light,.6)," 0%, ").concat(Object(Ra.d)(e.palette.primary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},dashedColorSecondary:{backgroundImage:"radial-gradient(".concat(Object(Ra.d)(e.palette.secondary.light,.4)," 0%, ").concat(Object(Ra.d)(e.palette.secondary.light,.6)," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0px -23px"},bar:{width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},barColorPrimary:{backgroundColor:e.palette.primary.main},barColorSecondary:{backgroundColor:e.palette.secondary.main},bar1Indeterminate:{width:"auto",animation:"mui-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite",animationName:"$mui-indeterminate1"},bar1Determinate:{transition:"transform .".concat(4,"s linear")},bar1Buffer:{zIndex:1,transition:"transform .".concat(4,"s linear")},bar2Indeterminate:{width:"auto",animation:"mui-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite",animationName:"$mui-indeterminate2",animationDelay:"1.15s"},bar2Buffer:{transition:"transform .".concat(4,"s linear")},"@keyframes mui-indeterminate1":{"0%":{left:"-35%",right:"100%"},"60%":{left:"100%",right:"-90%"},"100%":{left:"100%",right:"-90%"}},"@keyframes mui-indeterminate2":{"0%":{left:"-200%",right:"100%"},"60%":{left:"107%",right:"-8%"},"100%":{left:"107%",right:"-8%"}},"@keyframes buffer":{"0%":{opacity:1,backgroundPosition:"0px -23px"},"50%":{opacity:0,backgroundPosition:"0px -23px"},"100%":{opacity:1,backgroundPosition:"-200px -23px"}}}},{name:"MuiLinearProgress",withTheme:!0})(Ci),Pi=n(85),Oi=n.n(Pi),ji=n(84),Ri=n.n(ji),Ni=n(86),_i=n.n(Ni);function Ai(e){return(Ai="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Mi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ii(e,t){return!t||"object"!==Ai(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Li(e){return(Li=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Di(e,t){return(Di=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var zi=new Date,Fi=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ii(this,Li(t).call(this,e))).state={},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Di(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.rows,n=e.header,r=e.name,o=e.className,i=e.withSearchBox;return a.a.createElement(Xt,{className:o,container:!0,spacing:2,direction:"column"},a.a.createElement(Xt,{className:"Top",container:!0,item:!0,direction:"row"},a.a.createElement(Xt,{className:"Left",container:!0,item:!0,direction:"row",xs:6},a.a.createElement(Vn,{variant:"subtitle1"},"".concat(n," (").concat(t.length,")"))),a.a.createElement(Xt,{className:"Right",container:!0,item:!0,direction:"row-reverse",alignItems:"center",spacing:2,xs:6},a.a.createElement(Xt,{item:!0},a.a.createElement(Rt,null,a.a.createElement(ti.a,null))),i&&a.a.createElement(Xt,{item:!0},a.a.createElement(Vt,null,a.a.createElement(ja,{className:"SearchInput",id:"input-with-icon-searchinput",placeholder:"Cari ".concat(r),InputProps:{startAdornment:a.a.createElement(Wa,{position:"start"},a.a.createElement(Zo.a,null))}}))))),a.a.createElement(Xt,{item:!0},a.a.createElement(Vt,{className:"TableContainer"},a.a.createElement(Bo,{className:"Table"},a.a.createElement(Ko,{className:"TableBody"},t.map(function(e){var t=new Date(e.duration_start.slice(6,10),parseInt(e.duration_start.slice(3,5),10)-1,e.duration_start.slice(0,2)),n=new Date(e.duration_end.slice(6,10),parseInt(e.duration_end.slice(3,5),10)-1,e.duration_end.slice(0,2)),r="0".concat(n.getDate());r=r.slice(-2);var o="0".concat(n.getMonth()+1);o=o.slice(-2);var i=(zi-t)/(n-t);return a.a.createElement(Qo,{key:"".concat(e.id,"-row")},a.a.createElement($o,null,a.a.createElement(Xt,{container:!0,alignItems:"center",justify:"center",direction:"row",spacing:2},a.a.createElement(Xt,{item:!0,container:!0,md:3,xs:12,justify:"center"},a.a.createElement(Vn,{variant:"subtitle1"},e.title)),a.a.createElement(Xt,{item:!0,md:2,xs:6},a.a.createElement(Vt,null,a.a.createElement(Vn,{variant:"subtitle1"},"Pebisnis: ".concat(e.seller)))),a.a.createElement(Xt,{item:!0,md:2,xs:6},a.a.createElement(Vt,null,a.a.createElement(Vn,{variant:"subtitle1"},"Referral: ".concat(e.referral)))),a.a.createElement(Xt,{item:!0,md:2,xs:8},a.a.createElement(Ti,{variant:"determinate",value:i})),a.a.createElement(Xt,{container:!0,item:!0,md:2,xs:4,direction:"column"},a.a.createElement(Vn,{variant:"subtitle1",align:"center"},"".concat(r,"-").concat(o,"-").concat(n.getFullYear()))),a.a.createElement(Xt,{container:!0,item:!0,md:1,xs:12,justify:"center",alignItems:"center",direction:"column"},a.a.createElement(Xt,{container:!0,item:!0,spacing:1,alignItems:"center",direction:"row"},a.a.createElement(Xt,{item:!0,md:4},a.a.createElement(Rt,null,a.a.createElement(Ri.a,null))),a.a.createElement(Xt,{item:!0,md:4},a.a.createElement(Rt,null,a.a.createElement(Oi.a,null))),a.a.createElement(Xt,{item:!0,md:4},a.a.createElement(Rt,null,a.a.createElement(_i.a,null))))))))}))))))}}])&&Mi(n.prototype,r),o&&Mi(n,o),t}();Fi.defaultProps={name:"",className:"",header:"",rows:[],withSearchBox:!1},Fi.propTypes={name:f.a.string,className:f.a.string,header:f.a.string,rows:f.a.arrayOf(f.a.object),withSearchBox:f.a.bool};var Bi=Fi;n(153);function Ui(e){return(Ui="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Vi(e,t){return!t||"object"!==Ui(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ki(e){return(Ki=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Hi(e,t){return(Hi=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var $i=[{id:"1",title:"Indihome Paket Gamer",seller:"Joko",status:"TRUE",referral:0,duration_start:"01/01/2019",duration_end:"01/02/2019"},{id:"3",title:"Buy 1 Get 1",seller:"Bodo",status:"FALSE",referral:0,duration_start:"01/01/2019",duration_end:"01/02/2019"}],qi=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Vi(this,Ki(t).call(this,e))).state={activeRows:$i.filter(function(e){return"TRUE"===e.status}),nonActiveRows:$i.filter(function(e){return"FALSE"===e.status})},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Hi(e,t)}(t,a.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.state,t=e.activeRows,n=e.nonActiveRows;return a.a.createElement("div",{className:"AdminKelolaKontenViral"},a.a.createElement(No,{username:"Admin",header:"KONTEN VIRAL"}),a.a.createElement(Bi,{className:"Tabel",rows:t,name:"Konten Viral",header:"Konten Viral Aktif",withSearchBox:!0}),a.a.createElement(Bi,{className:"Tabel",rows:n,name:"Konten Viral",header:"Konten Viral Non-Aktif"}))}}])&&Wi(n.prototype,r),o&&Wi(n,o),t}(),Xi=n(87),Gi=n.n(Xi);function Ji(e){return(Ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Yi(e,t){return!t||"object"!==Ji(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Zi(e){return(Zi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function el(e,t){return(el=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var tl=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Yi(this,Zi(t).call(this,e))).state={buttons:[{imageIcon:a.a.createElement(Gi.a,{fontSize:"inherit"}),targetUrl:"",name:"Konten",header:"Kelola Konten Viral",count:0,activeCount:0},{imageIcon:a.a.createElement(GroupIcon,{fontSize:"inherit"}),targetUrl:"",name:"Promotor",header:"Promotor Viralmu",count:0}]},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&el(e,t)}(t,a.a.Component),n=t,(r=[{key:"handleContentFormPopOut",value:function(){event.preventDefault();var e=this.state,t=e.name,n=e.email;alert("Your state values: \n \n            name: ".concat(t," \n \n            email: ").concat(n))}},{key:"handleClick",value:function(e){switch(this.setState(),e){case 1:window.location.href="/promotor-view";break;case 0:window.location.href="/contents-form"}}},{key:"render",value:function(){var e=this,t=this.state.buttons;return a.a.createElement("div",{className:"SellerDashboardScreen"},a.a.createElement(AdminNavigation,{username:"Admin"}),a.a.createElement(Grid,{container:!0,direction:"row",justify:"center",alignItems:"center",spacing:0,className:"ButtonsContainer"},t.map(function(t,n){return a.a.createElement(ButtonBase,{key:t.name,className:"Button",onClick:function(t){return e.handleClick(n,t)}},a.a.createElement(Grid,{container:!0,direction:"column",justify:"center",alignItems:"center",spacing:0,className:"ButtonsContainer"},a.a.createElement(Vn,{variant:"h1"},t.imageIcon),a.a.createElement(Vn,{variant:"h5"},t.header),a.a.createElement(Grid,{container:!0,direction:"column",alignItems:"flex-start",justify:"flex-start"},a.a.createElement(Vn,{variant:"subtitle1"},"Total ".concat(t.name,": ").concat(t.count)),a.a.createElement(Vn,{variant:"subtitle1"},"Total Aktif: ".concat(t.activeCount)))))})))}}])&&Qi(n.prototype,r),o&&Qi(n,o),t}();n(155);function nl(e){return(nl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function rl(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function al(e,t){return!t||"object"!==nl(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ol(e){return(ol=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function il(e,t){return(il=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ll=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=al(this,ol(t).call(this,e))).state={},n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&il(e,t)}(t,r["Component"]),n=t,(o=[{key:"render",value:function(){return a.a.createElement(ne,null,a.a.createElement("div",{className:"App"},a.a.createElement(J,{path:"/",exact:!0,component:Ba}),a.a.createElement(J,{path:"/login",exact:!0,component:Ba}),a.a.createElement(J,{path:"/register",exact:!0,component:fo}),a.a.createElement(J,{path:"/seller-dashboard",exact:!0,component:tl}),a.a.createElement(J,{path:"/admin-dashboard",exact:!0,component:Do}),a.a.createElement(J,{path:"/admin-kelola-konten-viral",exact:!0,component:qi}),a.a.createElement(J,{path:"/seller-database",exact:!0,component:Si}),a.a.createElement(J,{path:"/promotor-database",exact:!0,component:yi})))}}])&&rl(n.prototype,o),i&&rl(n,i),t}();n(157);i.a.render(a.a.createElement(ll,null),document.getElementById("root"))},,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(1),a=n.n(r);n(34);t.a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=a()({},t);return Object.keys(n).forEach(function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))}),r}},function(e,t,n){"use strict";var r=n(2),a=n.n(r),o=n(1),i=n.n(o),l=n(0),u=n.n(l),s=(n(34),n(14)),c=n(185),f={set:function(e,t,n,r){var a=e.get(t);a||(a=new Map,e.set(t,a)),a.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}},d=n(187),p=(n(4),"function"==typeof Symbol?Symbol.for("mui.nested"):"__THEME_NESTED__"),m=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var h=Date.now(),v="fnValues"+h,y="fnStyle"+ ++h;var b=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=Object(s.c)(e,{},n);return r[y]=t,r},onProcessStyle:function(e,t){if(v in t||y in t)return e;var n={};for(var r in e){var a=e[r];"function"==typeof a&&(delete e[r],n[r]=a)}return t[v]=n,e},onUpdate:function(e,t,n,r){var a=t,o=a[y];o&&(a.style=o(e));var i=a[v];if(i)for(var l in i)a.prop(l,i[l](e),r)}}},g=n(6),x="@global",w="@global ",E=function(){function e(e,t,n){for(var r in this.type="global",this.at=x,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new s.a(Object(g.a)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),k=function(){function e(e,t,n){this.type="global",this.at=x,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(w.length);this.rule=n.jss.createRule(r,t,Object(g.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),S=/\s*,\s*/g;function C(e,t){for(var n=e.split(S),r="",a=0;a<n.length;a++)r+=t+" "+n[a].trim(),n[a+1]&&(r+=", ");return r}var T=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===x)return new E(e,t,n);if("@"===e[0]&&e.substr(0,w.length)===w)return new k(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,r=n?n[x]:null;if(r){for(var a in r)t.sheet.addRule(a,r[a],Object(g.a)({},t,{selector:C(a,e.selector)}));delete n[x]}}(e),function(e){var t=e.options,n=e.style;for(var r in n)if("@"===r[0]&&r.substr(0,x.length)===x){var a=C(r.substr(x.length),e.selector);t.sheet.addRule(a,n[r],Object(g.a)({},t,{selector:a})),delete n[r]}}(e))}}},P=/\s*,\s*/g,O=/&/g,j=/\$([\w-]+)/g;var R=function(){function e(e,t){return function(n,r){var a=e.getRule(r)||t&&t.getRule(r);return a?(a=a).selector:r}}function t(e,t){for(var n=t.split(P),r=e.split(P),a="",o=0;o<n.length;o++)for(var i=n[o],l=0;l<r.length;l++){var u=r[l];a&&(a+=", "),a+=-1!==u.indexOf("&")?u.replace(O,i):i+" "+u}return a}function n(e,t,n){if(n)return Object(g.a)({},n,{index:n.index+1});var r=e.options.nestingLevel;return r=void 0===r?1:r+1,Object(g.a)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1})}return{onProcessStyle:function(r,a,o){if("style"!==a.type)return r;var i,l,u=a,s=u.options.parent;for(var c in r){var f=-1!==c.indexOf("&"),d="@"===c[0];if(f||d){if(i=n(u,s,i),f){var p=t(c,u.selector);l||(l=e(s,o)),p=p.replace(j,l),s.addRule(p,r[c],Object(g.a)({},i,{selector:p}))}else d&&s.addRule(c,{},i).addRule(u.key,r[c],{selector:u.selector});delete r[c]}}return r}}},N=/[A-Z]/g,_=/^ms-/,A={};function M(e){return"-"+e.toLowerCase()}var I=function(e){if(A.hasOwnProperty(e))return A[e];var t=e.replace(N,M);return A[e]=_.test(t)?"-"+t:t};function L(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:I(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(L):t.fallbacks=L(e.fallbacks)),t}var D=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=L(e[t]);return e}return L(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=I(t);return t===r?e:(n.prop(r,e),null)}}},z=s.e?window.CSS.px:"px",F=s.e?window.CSS.ms:"ms",B=s.e?window.CSS.percent:"%";function U(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var a in e)r[a]=e[a],r[a.replace(t,n)]=e[a];return r}var W=U({"animation-delay":F,"animation-duration":F,"background-position":z,"background-position-x":z,"background-position-y":z,"background-size":z,border:z,"border-bottom":z,"border-bottom-left-radius":z,"border-bottom-right-radius":z,"border-bottom-width":z,"border-left":z,"border-left-width":z,"border-radius":z,"border-right":z,"border-right-width":z,"border-top":z,"border-top-left-radius":z,"border-top-right-radius":z,"border-top-width":z,"border-width":z,margin:z,"margin-bottom":z,"margin-left":z,"margin-right":z,"margin-top":z,padding:z,"padding-bottom":z,"padding-left":z,"padding-right":z,"padding-top":z,"mask-position-x":z,"mask-position-y":z,"mask-size":z,height:z,width:z,"min-height":z,"max-height":z,"min-width":z,"max-width":z,bottom:z,left:z,top:z,right:z,"box-shadow":z,"text-shadow":z,"column-gap":z,"column-rule":z,"column-rule-width":z,"column-width":z,"font-size":z,"font-size-delta":z,"letter-spacing":z,"text-indent":z,"text-stroke":z,"text-stroke-width":z,"word-spacing":z,motion:z,"motion-offset":z,outline:z,"outline-offset":z,"outline-width":z,perspective:z,"perspective-origin-x":B,"perspective-origin-y":B,"transform-origin":B,"transform-origin-x":B,"transform-origin-y":B,"transform-origin-z":B,"transition-delay":F,"transition-duration":F,"vertical-align":z,"flex-basis":z,"shape-margin":z,size:z,grid:z,"grid-gap":z,"grid-row-gap":z,"grid-column-gap":z,"grid-template-rows":z,"grid-template-columns":z,"grid-auto-rows":z,"grid-auto-columns":z,"box-shadow-x":z,"box-shadow-y":z,"box-shadow-blur":z,"box-shadow-spread":z,"font-line-height":z,"text-shadow-x":z,"text-shadow-y":z,"text-shadow-blur":z});function V(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=V(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var a in t)t[a]=V(a,t[a],n);else for(var o in t)t[o]=V(e+"-"+o,t[o],n);else if("number"==typeof t)return n[e]?""+t+n[e]:W[e]?"function"==typeof W[e]?W[e](t).toString():""+t+W[e]:t.toString();return t}var K=function(e){void 0===e&&(e={});var t=U(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=V(r,e[r],t);return e},onChangeValue:function(e,n){return V(n,e,t)}}},H=n(37);function $(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var q="",X="",G="",J="",Q="ontouchstart"in document.documentElement;if(H.a){var Y={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},Z=document.createElement("p").style;for(var ee in Y)if(ee+"Transform"in Z){q=ee,X=Y[ee];break}"Webkit"===q&&"msHyphens"in Z&&(q="ms",X=Y.ms,J="edge"),"Webkit"===q&&"-apple-trailing-word"in Z&&(G="apple")}var te={js:q,css:X,vendor:G,browser:J,isTouch:Q};var ne={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===te.js?"-webkit-"+e:te.css+e)}},re=/[-\s]+(.)?/g;function ae(e,t){return t?t.toUpperCase():""}function oe(e){return e.replace(re,ae)}function ie(e){return oe("-"+e)}var le,ue={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===te.js?"WebkitColumn"+ie(e)in t&&te.css+"column-"+e:"Moz"===te.js&&("page"+ie(e)in t&&"page-"+e))}},se={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===te.js?te.css+"print-"+e:e)}},ce={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},fe=Object.keys(ce),de=function(e){return te.css+e},pe={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},me=[ne,se,{noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===te.js){if(oe("mask-image")in t)return e;if(te.js+ie("mask-image")in t)return te.css+e}return e}},{noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==te.vendor||te.isTouch?e:te.css+e)}},{noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:te.css+e)}},{noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:te.css+e)}},{noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===te.js||"ms"===te.js?te.css+e:e)}},ue,{supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===te.js)return e;var n=e.replace("-inline","");return te.js+ie(n)in t&&te.css+n}},{supportedProperty:function(e,t){return oe(e)in t&&e}},{supportedProperty:function(e,t){var n=ie(e);return"-"===e[0]?e:"-"===e[0]&&"-"===e[1]?e:te.js+n in t?te.css+e:"Webkit"!==te.js&&"Webkit"+n in t&&"-webkit-"+e}},{supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===te.js?""+te.css+e:e)}},{supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===te.js?te.css+"scroll-chaining":e)}},{supportedProperty:function(e,t){var n=pe[e];return!!n&&(te.js+ie(n)in t&&te.css+n)}},{supportedProperty:function(e,t,n){var r=n.multiple;if(fe.indexOf(e)>-1){var a=ce[e];if(!Array.isArray(a))return te.js+ie(a)in t&&te.css+a;if(!r)return!1;for(var o=0;o<a.length;o++)if(!(te.js+ie(a[0])in t))return!1;return a.map(de)}return!1}}],he=me.filter(function(e){return e.supportedProperty}).map(function(e){return e.supportedProperty}),ve=me.filter(function(e){return e.noPrefill}).reduce(function(e,t){return e.push.apply(e,$(t.noPrefill)),e},[]),ye={};if(H.a){le=document.createElement("p");var be=window.getComputedStyle(document.documentElement,"");for(var ge in be)isNaN(ge)||(ye[be[ge]]=be[ge]);ve.forEach(function(e){return delete ye[e]})}function xe(e,t){if(void 0===t&&(t={}),!le)return e;if(null!=ye[e])return ye[e];"transition"!==e&&"transform"!==e||(t[e]=e in le.style);for(var n=0;n<he.length&&(ye[e]=he[n](e,le.style,t),!ye[e]);n++);try{le.style[e]=""}catch(e){return!1}return ye[e]}var we,Ee={},ke={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Se=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Ce(e,t,n){return"all"===t?"all":"all"===n?", all":t?xe(t):", "+xe(n)}function Te(e,t){var n=t;if(!we)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Ee[r])return Ee[r];try{we.style[e]=n}catch(e){return Ee[r]=!1,!1}if(ke[e])n=n.replace(Se,Ce);else if(""===we.style[e]&&("-ms-flex"===(n=te.css+n)&&(we.style[e]="-ms-flexbox"),we.style[e]=n,""===we.style[e]))return Ee[r]=!1,!1;return we.style[e]="",Ee[r]=n,Ee[r]}H.a&&(we=document.createElement("p"));var Pe=function(){return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]?n:"ms"===te.js?n:"@"+te.css+"keyframes"+n.substr(10)}var n},onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n in e){var r=e[n],a=!1,o=xe(n);o&&o!==n&&(a=!0);var i=!1,l=Te(o,Object(s.f)(r));l&&l!==r&&(i=!0),(a||i)&&(a&&delete e[n],e[o||n]=l||r)}return e},onChangeValue:function(e,t){return Te(t,Object(s.f)(e))||e}}};var Oe=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},a=Object.keys(t).sort(e),o=0;o<a.length;o++)r[a[o]]=t[a[o]];return r}}};var je,Re=function(){return{plugins:[b(),T(),R(),D(),K(),"undefined"==typeof window?null:Pe(),Oe()]}},Ne=Object(s.b)(Re()),_e={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,a=void 0===r?"jss":r,o=e.seed,i=void 0===o?"":o,l=""===i?"":"".concat(i,"-"),u=0;return function(e,t){u+=1;var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==m.indexOf(e.key))return"Mui-".concat(e.key);var o="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[p]&&""===i?"".concat(o,"-").concat(u):o}return"".concat(l).concat(a).concat(u)}}(),jss:Ne,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Ae=u.a.createContext(_e);function Me(e){var t=e.children,n=e.injectFirst,r=a()(e,["children","injectFirst"]),o=u.a.useContext(Ae),l=i()({},o,r);if(!l.jss.options.insertionPoint&&n&&"undefined"!=typeof window){if(!je){var c=document.head;je=document.createComment("mui-inject-first"),c.insertBefore(je,c.firstChild)}l.jss=Object(s.b)({plugins:Re().plugins,insertionPoint:je})}return u.a.createElement(Ae.Provider,{value:l},t)}Me.defaultProps={disableGeneration:!1,injectFirst:!1};var Ie=-1e9;n(28);var Le=n(22),De=n.n(Le);function ze(e,t){return t}var Fe=function(e){var t="function"==typeof e;return{create:function(n,r){var a;try{a=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return a;var o=n.overrides[r],l=i()({},a);return Object.keys(o).forEach(function(e){l[e]=De()(l[e],o[e],{arrayMerge:ze})}),l},options:{},themingEnabled:t}},Be={};t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,o=t.Component,l=t.defaultTheme,p=void 0===l?Be:l,m=a()(t,["name","classNamePrefix","Component","defaultTheme"]),h=Fe(e),v=n||r||"makeStyles";h.options={index:Ie+=1,name:n,meta:v,classNamePrefix:v};var y=h.themingEnabled||"string"==typeof n;return function(){var e,t,r,a,l,v=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},b=(y?Object(d.a)():null)||p,g=i()({},u.a.useContext(Ae),m),x=u.a.useRef(),w=u.a.useRef();return e=function(){var e={name:n,state:{},stylesCreator:h,stylesOptions:g,theme:b};return function(e,t){var n=e.state,r=e.theme,a=e.stylesOptions,o=e.stylesCreator,l=e.name;if(!a.disableGeneration){var u=f.get(a.sheetsManager,o,r);u||(u={refs:0,staticSheet:null,dynamicStyles:null},f.set(a.sheetsManager,o,r,u));var d=i()({},o.options,a,{theme:r,flip:"boolean"==typeof a.flip?a.flip:"rtl"===r.direction});d.generateId=d.serverGenerateClassName||d.generateClassName;var p=a.sheetsRegistry;if(0===u.refs){var m;a.sheetsCache&&(m=f.get(a.sheetsCache,o,r));var h=o.create(r,l);m||((m=a.jss.createStyleSheet(h,i()({link:!1},d))).attach(),a.sheetsCache&&f.set(a.sheetsCache,o,r,m)),p&&p.add(m),u.staticSheet=m,u.dynamicStyles=Object(s.d)(h)}if(u.dynamicStyles){var v=a.jss.createStyleSheet(u.dynamicStyles,i()({link:!0},d));v.update(t).attach(),n.dynamicSheet=v,n.classes=Object(c.a)({baseClasses:u.staticSheet.classes,newClasses:v.classes}),p&&p.add(v)}else n.classes=u.staticSheet.classes;u.refs+=1}}(e,v),w.current=!1,x.current=e,function(){!function(e){var t=e.state,n=e.theme,r=e.stylesOptions,a=e.stylesCreator;if(!r.disableGeneration){var o=f.get(r.sheetsManager,a,n);o.refs-=1;var i=r.sheetsRegistry;0===o.refs&&(f.delete(r.sheetsManager,a,n),r.jss.removeStyleSheet(o.staticSheet),i&&i.remove(o.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),i&&i.remove(t.dynamicSheet))}}(e)}},t=[b,h],a=u.a.useRef([]),l=u.a.useMemo(function(){return{}},t),a.current!==l&&(a.current=l,r=e()),u.a.useEffect(function(){return function(){r&&r()}},[l]),u.a.useEffect(function(){w.current&&function(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}(x.current,v),w.current=!0}),function(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var a=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,a=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,a=!0),a&&(r.cacheClasses.value=Object(c.a)({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}(x.current,v.classes,o)}}},function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=a.a.createContext(null);function i(){return a.a.useContext(o)}n.d(t,"a",function(){return i})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvZGlzdC9qc3MuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvdW1kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJvdW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS13YXJuaW5nL2Rpc3QvdGlueS13YXJuaW5nLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9pcy1wbGFpbi1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9pc29iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvaW5kaWdvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3BpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1pbi1icm93c2VyL2Rpc3QvbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvUmVmcmVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3ZnSWNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvZGlzdC9yZWFjdC1ldmVudC1saXN0ZW5lci5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0hvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9QZXJzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Wb2x1bWVVcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0dyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvQWNjZXNzaWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL1NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9EZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9TdG9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTW9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL0FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Mb2dpblNjcmVlbi9Mb2dpblNjcmVlbi5jc3M/MzhhYiIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Mb2dpblNjcmVlbi9Mb2dpblNjcmVlbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY29udGV4dC9saWIvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2d1ZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1JlZ2lzdGVyU2NyZWVuL1JlZ2lzdGVyU2NyZWVuLmNzcz84NzBmIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1JlZ2lzdGVyU2NyZWVuL1JlZ2lzdGVyU2NyZWVuLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3Mvbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BZG1pbk5hdmlnYXRpb24vQWRtaW5OYXZpZ2F0aW9uLmNzcz81MmMwIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0FkbWluTmF2aWdhdGlvbi9BZG1pbk5hdmlnYXRpb24uY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0FkbWluRGFzaGJvYXJkU2NyZWVuL0FkbWluRGFzaGJvYXJkU2NyZWVuLmNzcz9jYzhhIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0FkbWluRGFzaGJvYXJkU2NyZWVuL0FkbWluRGFzaGJvYXJkU2NyZWVuLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BZG1pbkRhdGFiYXNlVGFibGUvQWRtaW5EYXRhYmFzZVRhYmxlLmNzcz9hMGFkIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0FkbWluRGF0YWJhc2VUYWJsZS9BZG1pbkRhdGFiYXNlVGFibGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1Byb21vdG9yRGF0YWJhc2VTY3JlZW4vUHJvbW90b3JEYXRhYmFzZVNjcmVlbi5jc3M/MTNhYyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Qcm9tb3RvckRhdGFiYXNlU2NyZWVuL1Byb21vdG9yRGF0YWJhc2VTY3JlZW4uY3NzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NlbGxlckRhdGFiYXNlU2NyZWVuL1NlbGxlckRhdGFiYXNlU2NyZWVuLmNzcz9lOWIxIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NlbGxlckRhdGFiYXNlU2NyZWVuL1NlbGxlckRhdGFiYXNlU2NyZWVuLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuL0FkbWluS2Vsb2xhS29udGVuVmlyYWxTY3JlZW4uY3NzPzRiZjAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbi9BZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmNzcz83MDJhIiwid2VicGFjazovLy8uL3NyYy9BcHAuY3NzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5jc3M/ODBkMSIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtc2Nyb2xsLWxlZnQvZXNtL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9hbmltYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9TY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9UYWJJbmRpY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93TGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93UmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9yZWFjdEhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ob1Nzci9Ob1Nzci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9UYWJTY3JvbGxCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy93aXRoRm9yd2FyZGVkUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFicy9UYWJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFiL1RhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vR3JpZC9HcmlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ29udGFpbmVyL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9ib3JkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9mbGV4Ym94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vdHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vc3R5bGVkL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Cb3gvQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS9UZXh0YXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dC9JbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0ZpbGxlZElucHV0L0ZpbGxlZElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vT3V0bGluZWRJbnB1dC9Ob3RjaGVkT3V0bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL091dGxpbmVkSW5wdXQvT3V0bGluZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL3dpdGhGb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtTGFiZWwvRm9ybUxhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXRMYWJlbC9JbnB1dExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtSGVscGVyVGV4dC9Gb3JtSGVscGVyVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lcldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BvcnRhbC9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3dpdGhUaGVtZS93aXRoVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9nZXRTY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvaXNPdmVyZmxvd2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL21hbmFnZUFyaWFIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9Nb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9UcmFwRm9jdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9TaW1wbGVCYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3RyYW5zaXRpb25zL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vR3Jvdy9Hcm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9wb3Zlci9Qb3BvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01lbnVMaXN0L01lbnVMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTWVudS9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU2VsZWN0L1NlbGVjdElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU2VsZWN0L1NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RleHRGaWVsZC9UZXh0RmllbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b24vQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1RhYkNvbnRhaW5lci9UYWJDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvTG9naW5TY3JlZW4vTG9naW5TY3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEFkb3JubWVudC9JbnB1dEFkb3JubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBpL2ZldGNoUHJvdmluc2lBcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwaS9mZXRjaEthYnVwYXRlbktvdGFBcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvUmVnaXN0ZXJTZWxsZXJGb3JtL1JlZ2lzdGVyU2VsbGVyRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9SZWdpc3RlclByb21vdG9yRm9ybS9SZWdpc3RlclByb21vdG9yRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9SZWdpc3RlclNjcmVlbi9SZWdpc3RlclNjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0F2YXRhci9BdmF0YXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQWRtaW5OYXZpZ2F0aW9uL0FkbWluTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BZG1pbkRhc2hib2FyZFNjcmVlbi9BZG1pbkRhc2hib2FyZFNjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlL1RhYmxlQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlL1RhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGUvVGFibGVsdmwyQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlQm9keS9UYWJsZUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UYWJsZUNlbGwvVGFibGVDZWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGFibGVIZWFkL1RhYmxlSGVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RhYmxlUm93L1RhYmxlUm93LmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0FkbWluRGF0YWJhc2VUYWJsZS9BZG1pbkRhdGFiYXNlVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvUHJvbW90b3JEYXRhYmFzZVNjcmVlbi9Qcm9tb3RvckRhdGFiYXNlU2NyZWVuLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NlbGxlckRhdGFiYXNlU2NyZWVuL1NlbGxlckRhdGFiYXNlU2NyZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGluZWFyUHJvZ3Jlc3MvTGluZWFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQWRtaW5Lb250ZW5WaXJhbFRhYmxlL0FkbWluS29udGVuVmlyYWxUYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuL0FkbWluS2Vsb2xhS29udGVuVmlyYWxTY3JlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvU2VsbGVyRGFzaGJvYXJkL1NlbGxlckRhc2hib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWVyZ2VDbGFzc2VzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tdWx0aUtleVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi9kaXN0L2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLW5lc3RlZC9kaXN0L2pzcy1wbHVnaW4tbmVzdGVkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZGVmYXVsdC11bml0L2Rpc3QvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIvZGlzdC9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcHJvcHMtc29ydC9kaXN0L2pzcy1wbHVnaW4tcHJvcHMtc29ydC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL2luZGV4Q291bnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9WYWwiLCJtaXgiLCJrIiwieSIsInN0ciIsInB1c2giLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwieCIsImdldFRoZW1lUHJvcHNfZ2V0VGhlbWVQcm9wcyIsInBhcmFtcyIsInRoZW1lIiwicHJvcHMiLCJwcm9wTmFtZSIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsImVzbV93aXRoU3R5bGVzX3dpdGhTdHlsZXMiLCJzdHlsZXNPckNyZWF0b3IiLCJvcHRpb25zIiwiQ29tcG9uZW50IiwiZGVmYXVsdFRoZW1lIiwiX29wdGlvbnMkd2l0aFRoZW1lIiwid2l0aFRoZW1lIiwic3R5bGVzT3B0aW9ucyIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzX2RlZmF1bHQiLCJjbGFzc05hbWVQcmVmaXgiLCJ1c2VTdHlsZXMiLCJtYWtlU3R5bGVzIiwiZXh0ZW5kc19kZWZhdWx0IiwiZGlzcGxheU5hbWUiLCJXaXRoU3R5bGVzIiwicmVhY3RfZGVmYXVsdCIsImEiLCJmb3J3YXJkUmVmIiwicmVmIiwiY2xhc3NlcyIsImlubmVyUmVmIiwib3RoZXIiLCJtb3JlIiwidXNlVGhlbWUiLCJjcmVhdGVFbGVtZW50IiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJzdHlsZXNfZGVmYXVsdFRoZW1lIiwiY2FwaXRhbGl6ZSIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJfbGVuIiwiZnVuY3MiLCJBcnJheSIsIl9rZXkiLCJyZWR1Y2UiLCJhY2MiLCJmdW5jIiwiX2xlbjIiLCJhcmdzIiwiX2tleTIiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0Iiwibm9uSXRlcmFibGVSZXN0IiwiYXJyIiwib2JqIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImdldENvbnRyYXN0UmF0aW8iLCJmYWRlIiwiZGFya2VuIiwibGlnaHRlbiIsImNsYW1wIiwibWluIiwibWF4IiwiZGVjb21wb3NlQ29sb3IiLCJjb2xvciIsInR5cGUiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbmNhdCIsImNvbG9ycyIsIm1hdGNoIiwibWFwIiwicGFyc2VJbnQiLCJqb2luIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJFcnJvciIsInZhbHVlcyIsInNwbGl0IiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZm9yZWdyb3VuZCIsImJhY2tncm91bmQiLCJsdW1BIiwiZ2V0THVtaW5hbmNlIiwibHVtQiIsIk1hdGgiLCJyZ2IiLCJoIiwiZiIsInJvdW5kIiwiaHNsVG9SZ2IiLCJ2YWwiLCJwb3ciLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiY29lZmZpY2llbnQiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwid2FybmluZyIsImdsb2JhbCIsImhhc0NTU1RPTVN1cHBvcnQiLCJnZXREeW5hbWljU3R5bGVzIiwidG9Dc3NWYWx1ZSIsImNyZWF0ZVJ1bGUiLCJSdWxlTGlzdCIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZXNtX2V4dGVuZHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImlzX2luX2Jyb3dzZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZXNtX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9pbmhlcml0c0xvb3NlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2VzbV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsInBsYWluT2JqZWN0Q29uc3RydXJjdG9yIiwiY2xvbmVTdHlsZSIsInN0eWxlIiwiaXNBcnJheSIsIm5ld1N0eWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInJlc3VsdCIsImlnbm9yZUltcG9ydGFudCIsImNzc1ZhbHVlIiwiaW5kZW50U3RyIiwiaW5kZW50IiwiaW5kZXgiLCJ0b0NzcyIsInNlbGVjdG9yIiwiX29wdGlvbnMkaW5kZW50IiwiZmFsbGJhY2tzIiwiZmFsbGJhY2siLCJwcm9wIiwiX3Byb3AiLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiYWxsb3dFbXB0eSIsImVzY2FwZVJlZ2V4IiwibmF0aXZlRXNjYXBlIiwiQ1NTIiwiZXNjYXBlIiwicmVwbGFjZSIsIkJhc2VTdHlsZVJ1bGUiLCJpc1Byb2Nlc3NlZCIsInJlbmRlcmVyIiwicmVuZGVyYWJsZSIsInNoZWV0IiwiUmVuZGVyZXIiLCJmb3JjZSIsIm5ld1ZhbHVlIiwicHJvY2VzcyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwiU3R5bGVSdWxlIiwiX0Jhc2VTdHlsZVJ1bGUiLCJfdGhpcyIsInNlbGVjdG9yVGV4dCIsImlkIiwic2NvcGVkIiwiZ2VuZXJhdGVJZCIsIl9wcm90bzIiLCJhcHBseVRvIiwianNvbiIsInRvSlNPTiIsInRvU3RyaW5nIiwib3B0cyIsImxpbmsiLCJzZXQiLCJzZXRTZWxlY3RvciIsInJlcGxhY2VSdWxlIiwicGx1Z2luU3R5bGVSdWxlIiwicGFyZW50IiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyIsImNoaWxkcmVuIiwiYXRSZWdFeHAiLCJDb25kaXRpb25hbFJ1bGUiLCJzdHlsZXMiLCJhdCIsInJ1bGVzIiwiYXRNYXRjaCIsImFkZCIsIl9wcm90byIsImdldFJ1bGUiLCJhZGRSdWxlIiwib25Qcm9jZXNzUnVsZSIsImtleVJlZ0V4cCIsInBsdWdpbkNvbmRpdGlvbmFsUnVsZSIsInRlc3QiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwicmVmUmVnRXhwIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlcGxhY2VSZWYiLCJyZWZLZXlmcmFtZSIsInBsdWdpbiIsIm9uUHJvY2Vzc1N0eWxlIiwiS2V5ZnJhbWVSdWxlIiwicGx1Z2luS2V5ZnJhbWVSdWxlIiwiRm9udEZhY2VSdWxlIiwicGx1Z2luRm9udEZhY2VSdWxlIiwiVmlld3BvcnRSdWxlIiwicGx1Z2luVmlld3BvcnRSdWxlIiwiU2ltcGxlUnVsZSIsImtleXNNYXAiLCJAY2hhcnNldCIsIkBpbXBvcnQiLCJAbmFtZXNwYWNlIiwiZGVmYXVsdFVwZGF0ZU9wdGlvbnMiLCJmb3JjZVVwZGF0ZU9wdGlvbnMiLCJyYXciLCJydWxlT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMiLCJyZWdpc3RlciIsInNwbGljZSIsInVucmVnaXN0ZXIiLCJwbHVnaW5zJCQxIiwiZm9yRWFjaCIsInVwZGF0ZSIsImRhdGEiLCJvblVwZGF0ZSIsIl90aGlzJG9wdGlvbnMyIiwic3R5bGVSdWxlIiwibmV4dFZhbHVlIiwiX25leHRWYWx1ZSIsIl9wcmV2VmFsdWUiLCJjc3MiLCJTdHlsZVNoZWV0IiwiZGVwbG95ZWQiLCJxdWV1ZSIsImF0dGFjaCIsImRlcGxveSIsImRldGFjaCIsImluc2VydFJ1bGUiLCJhZGRSdWxlcyIsImFkZGVkIiwiZGVsZXRlUnVsZSIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiaW50ZXJuYWwiLCJleHRlcm5hbCIsInJlZ2lzdHJ5Iiwib25Qcm9jZXNzU2hlZXQiLCJwcm9jZXNzZWRWYWx1ZSIsInVzZSIsIm5ld1BsdWdpbiIsInNoZWV0cyIsIlNoZWV0c1JlZ2lzdHJ5IiwicmVzZXQiLCJmaWx0ZXIiLCJnbG9iYWwkMSIsInNlbGYiLCJ3aW5kb3ciLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJkZWZhdWx0UHJlZml4IiwibWluaWZ5IiwicHJlZml4IiwianNzSWQiLCJtZW1vaXplIiwiZm4iLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3NzUnVsZSIsImF0dHJpYnV0ZVN0eWxlTWFwIiwiZGVsZXRlIiwiZ2V0SGVhZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZpbmRQcmV2Tm9kZSIsImluc2VydGlvblBvaW50IiwiZmluZEhpZ2hlclNoZWV0IiwiZWxlbWVudCIsInBhcmVudE5vZGUiLCJub2RlIiwiZmluZEhpZ2hlc3RTaGVldCIsIm5leHRTaWJsaW5nIiwiY29tbWVudCIsInRleHQiLCJoZWFkIiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwidHJpbSIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiZ2V0QXR0cmlidXRlIiwiX2luc2VydFJ1bGUiLCJjb250YWluZXIiLCJjc3NSdWxlcyIsImFwcGVuZFJ1bGUiLCJjcmVhdGVTdHlsZSIsImVsIiwidGV4dENvbnRlbnQiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJfcmVmIiwibWVkaWEiLCJtZXRhIiwic2V0QXR0cmlidXRlIiwibm9uY2UiLCJuZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwiaW5zZXJ0U3R5bGUiLCJyZW1vdmVDaGlsZCIsImluc2VydFJ1bGVzIiwibmF0aXZlUGFyZW50IiwibGF0ZXN0TmF0aXZlUGFyZW50IiwicnVsZVN0ciIsIm5hdGl2ZVJ1bGUiLCJnZXRSdWxlcyIsImluc3RhbmNlQ291bnRlciIsIkpzcyIsInZlcnNpb24iLCJzZXR1cCIsImNyZWF0ZVN0eWxlU2hlZXQiLCJyZW1vdmVTdHlsZVNoZWV0IiwidG8iLCJleHRyYWN0ZWQiLCJpc0J1ZmZlciIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYiIsInRoaXNBcmciLCJkZWZhdWx0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInBhdGgiLCJfcmVhY3QiLCJtZW1vIiwiX1N2Z0ljb24iLCJfZXh0ZW5kczIiLCJtdWlOYW1lIiwidXNlU291cmNlTWFwIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImlkeCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwibmMiLCJhZGRBdHRycyIsImtleXMiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImNsb25lIiwiZGVlcG1lcmdlIiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJtZXJnZU9iamVjdCIsImRlc3RpbmF0aW9uIiwiY3VzdG9tTWVyZ2UiLCJnZXRNZXJnZUZ1bmN0aW9uIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJ0YXJnZXRJc0FycmF5Iiwic291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCIsImFycmF5IiwicHJldiIsIm5leHQiLCJmYWN0b3J5IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlYm91bmNlIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwidGltZXN0YW1wIiwibGF0ZXIiLCJsYXN0IiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJkZWJvdW5jZWQiLCJjYWxsTm93IiwiY2xlYXIiLCJjbGVhclRpbWVvdXQiLCJmbHVzaCIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJpc1Byb2R1Y3Rpb24iLCJjb25kaXRpb24iLCJtZXNzYWdlIiwid2FybiIsIl90eXBlb2YyIiwiaXRlcmF0b3IiLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIlJlZmVyZW5jZUVycm9yIiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJpc09iamVjdE9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJjdG9yIiwicHJvdCIsImNyZWF0ZU1peGlucyIsImJyZWFrcG9pbnRzIiwic3BhY2luZyIsIl90b29sYmFyIiwiZ3V0dGVycyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsInVwIiwidG9vbGJhciIsIm1pbkhlaWdodCIsImNvbG9yc19pbmRpZ28iLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJjb2xvcnNfcGluayIsImNvbG9yc19ncmV5IiwiY29sb3JzX3JlZCIsImNvbG9yc19jb21tb24iLCJibGFjayIsIndoaXRlIiwibGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJoaW50IiwiZGl2aWRlciIsInBhcGVyIiwiYWN0aW9uIiwiYWN0aXZlIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZCIsImRpc2FibGVkQmFja2dyb3VuZCIsImRhcmsiLCJpY29uIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJkaXJlY3Rpb24iLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwiY29sb3JNYW5pcHVsYXRvciIsIm1haW4iLCJjYXNlQWxsQ2FwcyIsInRleHRUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJwYWxldHRlIiwidHlwb2dyYXBoeSIsIl9yZWYkZm9udEZhbWlseSIsImZvbnRGYW1pbHkiLCJfcmVmJGZvbnRTaXplIiwiZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkZm9udFdlaWdodEJvbGQiLCJmb250V2VpZ2h0Qm9sZCIsIl9yZWYkaHRtbEZvbnRTaXplIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJjb2VmIiwicHhUb1JlbSIsInNpemUiLCJidWlsZFZhcmlhbnQiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJ2YXJpYW50cyIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsInN1YnRpdGxlMSIsInN1YnRpdGxlMiIsImJvZHkxIiwiYm9keTIiLCJidXR0b24iLCJjYXB0aW9uIiwib3ZlcmxpbmUiLCJ1bWRfZGVmYXVsdCIsInNoYWRvd0tleVVtYnJhT3BhY2l0eSIsInNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSIsInNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5IiwiY3JlYXRlU2hhZG93Iiwic3R5bGVzX3NoYWRvd3MiLCJzdHlsZXNfc2hhcGUiLCJib3JkZXJSYWRpdXMiLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJkdXJhdGlvbiIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJ0cmFuc2l0aW9ucyIsIl9vcHRpb25zJGR1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJfb3B0aW9ucyRlYXNpbmciLCJlYXNpbmdPcHRpb24iLCJfb3B0aW9ucyRkZWxheSIsImRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiaGVpZ2h0IiwiY29uc3RhbnQiLCJfb3B0aW9ucyRicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzaGFkb3dzSW5wdXQiLCJzaGFkb3dzIiwic3BhY2luZ0lucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHlJbnB1dCIsIl9wYWxldHRlJHByaW1hcnkiLCJfcGFsZXR0ZSRzZWNvbmRhcnkiLCJfcGFsZXR0ZSRlcnJvciIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsImNvbnRyYXN0VGV4dCIsInR5cGVzIiwiY29tbW9uIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJjcmVhdGVCcmVha3BvaW50cyIsIm11aSIsImZhY3RvciIsIm91dHB1dCIsImNyZWF0ZVNwYWNpbmciLCJvdmVycmlkZXMiLCJzaGFwZSIsInpJbmRleCIsInN0eWxlc19jcmVhdGVNdWlUaGVtZSIsImlzQnJvd3NlciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2V4dGVuZHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZXh0ZW5kc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIl9icmVha3BvaW50cyR2YWx1ZXMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwiX2JyZWFrcG9pbnRzJHVuaXQiLCJ1bml0IiwiX2JyZWFrcG9pbnRzJHN0ZXAiLCJzdGVwIiwiYmV0d2VlbiIsInN0YXJ0IiwiZW5kIiwiZW5kSW5kZXgiLCJkb3duIiwidXBwZXJib3VuZCIsIm9ubHkiLCJ3aWR0aCIsIm1vYmlsZVN0ZXBwZXIiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsIl9kZWZhdWx0IiwiRnJhZ21lbnQiLCJmaWxsIiwiX2NyZWF0ZUNsYXNzIiwiZyIsIkZ1bmN0aW9uIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwib2Zmc2V0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJtYXRjaGVzIiwiZW5jb2RlIiwicHJldHR5IiwidG9rZW4iLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG9PYmplY3QiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiY2xzeF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX3N0eWxlc193aXRoU3R5bGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfdXRpbHNfaGVscGVyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiU3ZnSWNvbiIsImNsYXNzTmFtZSIsIl9wcm9wcyRjb2xvciIsIl9wcm9wcyRjb21wb25lbnQiLCJfcHJvcHMkZm9udFNpemUiLCJodG1sQ29sb3IiLCJ0aXRsZUFjY2VzcyIsIl9wcm9wcyR2aWV3Qm94Iiwidmlld0JveCIsInJvb3QiLCJmb2N1c2FibGUiLCJhcmlhLWhpZGRlbiIsInJvbGUiLCJ1c2VyU2VsZWN0IiwiZGlzcGxheSIsImZsZXhTaHJpbmsiLCJ0cmFuc2l0aW9uIiwiY29sb3JQcmltYXJ5IiwiY29sb3JTZWNvbmRhcnkiLCJjb2xvckFjdGlvbiIsImNvbG9yRXJyb3IiLCJjb2xvckRpc2FibGVkIiwiZm9udFNpemVJbmhlcml0IiwiZm9udFNpemVTbWFsbCIsImZvbnRTaXplTGFyZ2UiLCJ1dGlscyIsInVybCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzZXJpYWxpemVkUGFyYW1zIiwidiIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiQWNjZXB0IiwibWV0aG9kIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJjb25maWcxIiwiY29uZmlnMiIsIkNhbmNlbCIsIl9TdmdJY29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfaW50ZXJvcERlZmF1bHQiLCJleCIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2luaGVyaXRzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiUmVhY3QiLCJjYWNoZSIsInBhc3NpdmVPcHRpb24iLCJhdHRyIiwic3VwcG9ydHNQYXNzaXZlT3B0aW9uIiwiZGVmYXVsdEV2ZW50T3B0aW9ucyIsInBhc3NpdmUiLCJtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMiLCJnZXRFdmVudExpc3RlbmVyQXJncyIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwib24iLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRXZlbnRMaXN0ZW5lciIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwiYXBwbHlMaXN0ZW5lcnMiLCJwcmV2UHJvcHMiLCJvbk9yT2ZmIiwiaXRlcmF0ZWUiLCJldmVudFByb3BzIiwiaGFuZGxlciIsImZvckVhY2hMaXN0ZW5lciIsIlB1cmVDb21wb25lbnQiLCJ3aXRoT3B0aW9ucyIsIl9yZWFjdDIiLCJfaW1wbGVtZW50YXRpb24yIiwiY3JlYXRlQ29udGV4dCIsInEiLCJ1IiwidyIsInoiLCJhYSIsImJhIiwiQSIsIkIiLCJmcmFtZXNUb1BvcCIsImNhIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwiRSIsInVwZGF0ZXIiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsImN1cnJlbnQiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJfb3duZXIiLCJOIiwiTyIsIlAiLCJRIiwicG9wIiwia2V5UHJlZml4IiwiY291bnQiLCJSIiwiVSIsIlMiLCJUIiwiZG9uZSIsIj0iLCI6IiwiZWEiLCJmYSIsIlYiLCJkYSIsIlciLCJYIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY3JlYXRlUmVmIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZIiwiWiIsImhhIiwiaWEiLCJvbkVycm9yIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInVhIiwidmEiLCJ3YSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwicmFuZG9tIiwiRmEiLCJHYSIsIkhhIiwidGFnIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsImFuaW1hdGlvbiIsIlhhIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImliIiwiZXZlbnRQb29sIiwiamIiLCJkZXN0cnVjdG9yIiwiaGIiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiZG9jdW1lbnRNb2RlIiwicGIiLCJxYiIsInJiIiwic2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwidGIiLCJ1YiIsImtleUNvZGUiLCJ2YiIsImRldGFpbCIsIndiIiwiemIiLCJsb2NhbGUiLCJ3aGljaCIsInhiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwieWIiLCJBYiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRpbWUiLCJ3ZWVrIiwiTWIiLCJub2RlTmFtZSIsIk5iIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiT2IiLCJQYiIsIlJiIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJRYiIsIlNiIiwiY2hlY2tlZCIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwia2MiLCJsYyIsIm1jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwiaXNOYU4iLCJxYyIsIm9jIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ1YyIsInZjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJ3YyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJ4YyIsInljIiwiemMiLCJBYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiQmMiLCJjaGFuZ2UiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiZGV0YWNoRXZlbnQiLCJLYyIsIkxjIiwiYXR0YWNoRXZlbnQiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJRYyIsInZpZXciLCJSYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJTYyIsImdldE1vZGlmaWVyU3RhdGUiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIlpjIiwicG9pbnRlcklkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWx0ZXJuYXRlIiwiYmQiLCJjZCIsImRkIiwiZWQiLCJlZmZlY3RUYWciLCJmZCIsImhkIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiamQiLCJjbGlwYm9hcmREYXRhIiwia2QiLCJsZCIsImNoYXJDb2RlIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIm5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIm9kIiwibG9jYXRpb24iLCJwZCIsImRhdGFUcmFuc2ZlciIsInFkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInJkIiwic2QiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsInRkIiwidWQiLCJ2ZCIsIndkIiwiaXNJbnRlcmFjdGl2ZSIsInhkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwieWQiLCJ6ZCIsIkFkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJCZCIsIkNkIiwiRGQiLCJFZCIsIkZkIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJib2R5IiwiS2QiLCJMZCIsIk5kIiwiY29udGVudFdpbmRvdyIsIk9kIiwiY29udGVudEVkaXRhYmxlIiwiUWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiTWQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jdW1lbnRFbGVtZW50Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlJkIiwiU2QiLCJzZWxlY3QiLCJUZCIsIlVkIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJvblNlbGVjdCIsIiRkIiwiWmQiLCJhZSIsImRlZmF1bHRTZWxlY3RlZCIsImJlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjZSIsImRlIiwiZWUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZmUiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiZ2UiLCJoZSIsImllIiwiamUiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwia2UiLCJsYXN0Q2hpbGQiLCJsZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibWUiLCJuZSIsIm9lIiwicGUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJxZSIsImlzIiwic2UiLCJibHVyIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJhdXRvRm9jdXMiLCJ4ZSIsIl9faHRtbCIsInllIiwiemUiLCJBZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCZSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiRGUiLCJFZSIsIlNldCIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJLZSIsIkxlIiwiTWUiLCJOZSIsImdldENoaWxkQ29udGV4dCIsIk9lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlVlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJjb250ZXh0RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJWZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwic3RhdGUiLCJ3ZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInpmIiwiQWYiLCJfc3RyaW5nUmVmIiwiQmYiLCJDZiIsIk1hcCIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibWciLCJiYXNlVXBkYXRlIiwibmciLCJvZyIsInBnIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwicWciLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJUZyIsIlVnIiwiaGYiLCJXZSIsImh5ZHJhdGUiLCJoaWRkZW4iLCJmaXJzdCIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJzdGFjayIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJvbkNsaWNrIiwib25jbGljayIsInBoIiwiV2Vha1NldCIsInFoIiwicmgiLCJzaCIsInRoIiwidmgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndoIiwieGgiLCJ5aCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsInVoIiwiaGkiLCJYaCIsImhhcyIsIkJoIiwiV2Vha01hcCIsIkNoIiwiRGgiLCJFaCIsImNvbXBvbmVudERpZENhdGNoIiwiRmgiLCJjb21wb25lbnRTdGFjayIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVmgiLCJaaCIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImVmIiwiUGQiLCJZaCIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiZmluaXNoZWRXb3JrIiwiJGgiLCJhaSIsImNyZWF0ZUVsZW1lbnROUyIsImJpIiwiY2kiLCJkaSIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwiZWkiLCJmaSIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiZ2kiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1bnN0YWJsZV9ub3ciLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJ0aW1lb3V0SGFuZGxlIiwiQmkiLCJDaSIsIm5leHRTY2hlZHVsZWRSb290IiwiRGkiLCJFaSIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJGaSIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJHaSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJOaSIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiT2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiUGkiLCJfaW50ZXJuYWxSb290IiwiUWkiLCJTaSIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIlJpIiwiVGkiLCJNaSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiVmkiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiVGUiLCJvdmVycmlkZVByb3BzIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiV2kiLCJYaSIsInByZXZpb3VzIiwicHJpb3JpdHlMZXZlbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicGVyZm9ybWFuY2UiLCJfc2NoZWRNb2NrIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwiaG1yIiwibG9jYWxzIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic291cmNlS2V5cyIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJfc2V0UHJvdG90eXBlT2YiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsImFycjIiLCJpdGVyIiwiX3Byb3BUeXBlczIiLCJfZ3VkMiIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiX3RlbXAiLCJoYW5kbGVycyIsImVtaXR0ZXIiLCJjaGFuZ2VkQml0cyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGVtcDIiLCJfdGhpczIiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzaGlmdCIsImdldFVyaSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsImxpbmUiLCJvcmlnaW5VUkwiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInJlcXVlc3RVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJyZXNvbHZlX3BhdGhuYW1lIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsInZhbHVlX2VxdWFsIiwidmFsdWVFcXVhbCIsImV2ZXJ5IiwiYVR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsInRpbnlfaW52YXJpYW50X2VzbSIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJlc21fZXh0ZW5kcyIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJsaXN0ZW5lciIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInJlYWN0X3JvdXRlcl9jb250ZXh0IiwibGliX2RlZmF1bHQiLCJyZWFjdF9yb3V0ZXJfY3JlYXRlTmFtZWRDb250ZXh0IiwicmVhY3Rfcm91dGVyX1JvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJpbmhlcml0c0xvb3NlIiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVMaW1pdCQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJjb21waWxlUGF0aCQxIiwicmVhY3Rfcm91dGVyX1JvdXRlIiwiUm91dGUiLCJjb250ZXh0JCQxIiwiY29tcHV0ZWRNYXRjaCIsIl90aGlzJHByb3BzIiwiaXNFbXB0eUNoaWxkcmVuIiwicmVhY3Rfcm91dGVyX2FkZExlYWRpbmdTbGFzaCIsInJlYWN0X3JvdXRlcl9zdHJpcEJhc2VuYW1lIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJyZWFjdF9yb3V0ZXJfZG9tX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9MaW5rIiwiTGluayIsImhhbmRsZUNsaWNrIiwiaXNNb2RpZmllZEV2ZW50IiwicmVzdCIsImNhY2hlZFR5cGUiLCJpbkRPTSIsImRldGVjdFNjcm9sbFR5cGUiLCJkdW1teSIsInBvc2l0aW9uIiwib3ZlcmZsb3ciLCJnZXROb3JtYWxpemVkU2Nyb2xsTGVmdCIsIk5hTiIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiLCJlYXNlSW5PdXRTaW4iLCJzaW4iLCJQSSIsImludGVybmFsX2FuaW1hdGUiLCJfb3B0aW9ucyRlYXNlIiwiZWFzZSIsImNhbmNlbGxlZCIsIlNjcm9sbGJhclNpemVfc3R5bGVzIiwiU2Nyb2xsYmFyU2l6ZSIsIm9uQ2hhbmdlIiwic2Nyb2xsYmFySGVpZ2h0Iiwibm9kZVJlZiIsInNldE1lYXN1cmVtZW50cyIsIm9mZnNldEhlaWdodCIsImNsaWVudEhlaWdodCIsImhhbmRsZVJlc2l6ZSIsImRlYm91bmNlX2RlZmF1bHQiLCJwcmV2SGVpZ2h0IiwiVGFiSW5kaWNhdG9yX1RhYkluZGljYXRvciIsImNsc3hfbSIsImhlbHBlcnMiLCJUYWJzX1RhYkluZGljYXRvciIsIndpdGhTdHlsZXMiLCJib3R0b20iLCJiYWNrZ3JvdW5kQ29sb3IiLCJjcmVhdGVTdmdJY29uIiwiS2V5Ym9hcmRBcnJvd0xlZnQiLCJLZXlib2FyZEFycm93UmlnaHQiLCJpc011aUVsZW1lbnQiLCJtdWlOYW1lcyIsInNldFJlZiIsInVzZUZvcmtSZWYiLCJyZWZBIiwicmVmQiIsInJlZlZhbHVlIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJOb1Nzcl9Ob1NzciIsIl9wcm9wcyRkZWZlciIsImRlZmVyIiwiX3Byb3BzJGZhbGxiYWNrIiwiX1JlYWN0JHVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsInNsaWNlZFRvQXJyYXlfZGVmYXVsdCIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJmb2N1c1Zpc2libGVfaGFuZGxlS2V5RG93biIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImZvY3VzVmlzaWJsZV9pc0ZvY3VzVmlzaWJsZSIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsInVzZUlzRm9jdXNWaXNpYmxlIiwiaXNGb2N1c1Zpc2libGUiLCJvbkJsdXJWaXNpYmxlIiwicmVhY3RfZG9tX2RlZmF1bHQiLCJwcmVwYXJlIiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwicmVhY3QiLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiZW50ZXIiLCJUcmFuc2l0aW9uR3JvdXBfVHJhbnNpdGlvbkdyb3VwIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJlc21fVHJhbnNpdGlvbkdyb3VwIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiVHJhbnNpdGlvbl9UcmFuc2l0aW9uIiwiVHJhbnNpdGlvbiIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXJTdGF0dXMiLCJ1bm1vdW50T25FeGl0IiwibW91bnRPbkVudGVyIiwibmV4dENhbGxiYWNrIiwicHJldlN0YXRlIiwidXBkYXRlU3RhdHVzIiwibmV4dFN0YXR1cyIsImNhbmNlbE5leHRDYWxsYmFjayIsImdldFRpbWVvdXRzIiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsImFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwic2FmZVNldFN0YXRlIiwib25FbnRlcmVkIiwib25FbnRlciIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJjaGlsZFByb3BzIiwiVHJhbnNpdGlvbl9ub29wIiwiRVhJVElORyIsImVzbV9UcmFuc2l0aW9uIiwiQnV0dG9uQmFzZV9SaXBwbGUiLCJfcHJvcHMkcHVsc2F0ZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJ2aXNpYmxlIiwic2V0VmlzaWJsZSIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0IiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwiRFVSQVRJT04iLCJERUxBWV9SSVBQTEUiLCJUb3VjaFJpcHBsZV9Ub3VjaFJpcHBsZSIsIlRvdWNoUmlwcGxlIiwiX2dldFByb3RvdHlwZU9mMiIsImNsYXNzQ2FsbENoZWNrX2RlZmF1bHQiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX2RlZmF1bHQiLCJnZXRQcm90b3R5cGVPZl9kZWZhdWx0IiwicmlwcGxlcyIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwiaWdub3JpbmdNb3VzZURvd24iLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic3FydCIsInNpemVYIiwiYWJzIiwic2l6ZVkiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJzdGFydFRpbWVyIiwidG9Db25zdW1hYmxlQXJyYXlfZGVmYXVsdCIsInN0b3AiLCJpbmhlcml0c19kZWZhdWx0IiwiY3JlYXRlQ2xhc3NfZGVmYXVsdCIsIkJ1dHRvbkJhc2VfVG91Y2hSaXBwbGUiLCJwb2ludGVyRXZlbnRzIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXIiLCIwJSIsIjEwMCUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCIsIkBrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlIiwiNTAlIiwiZmxpcCIsIkJ1dHRvbkJhc2VfdXNlRW5oYW5jZWRFZmZlY3QiLCJ1c2VFdmVudENhbGxiYWNrIiwiQnV0dG9uQmFzZV9CdXR0b25CYXNlIiwiYnV0dG9uUmVmUHJvcCIsImJ1dHRvblJlZiIsIl9wcm9wcyRjZW50ZXJSaXBwbGUiLCJjZW50ZXJSaXBwbGUiLCJjbGFzc05hbWVQcm9wIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvbkRyYWdFbmQiLCJfcHJvcHMkdGFiSW5kZXgiLCJ0YWJJbmRleCIsIlRvdWNoUmlwcGxlUHJvcHMiLCJfcHJvcHMkdHlwZSIsInJpcHBsZVJlZiIsImZvY3VzVmlzaWJsZSIsInNldEZvY3VzVmlzaWJsZSIsIl91c2VJc0ZvY3VzVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInVzZVJpcHBsZUhhbmRsZXIiLCJyaXBwbGVBY3Rpb24iLCJldmVudENhbGxiYWNrIiwic2tpcFJpcHBsZUFjdGlvbiIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZURyYWdFbmQiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlS2V5VXAiLCJDb21wb25lbnRQcm9wIiwiYnV0dG9uUHJvcHMiLCJoYW5kbGVVc2VyUmVmIiwiaGFuZGxlT3duUmVmIiwiaGFuZGxlUmVmIiwiZXNtX0J1dHRvbkJhc2VfQnV0dG9uQmFzZSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwib3V0bGluZSIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJjdXJzb3IiLCJ2ZXJ0aWNhbEFsaWduIiwiLW1vei1hcHBlYXJhbmNlIiwiLXdlYmtpdC1hcHBlYXJhbmNlIiwidGV4dERlY29yYXRpb24iLCImOjotbW96LWZvY3VzLWlubmVyIiwiYm9yZGVyU3R5bGUiLCImJGRpc2FibGVkIiwiVGFiU2Nyb2xsQnV0dG9uX3JlZiIsIlRhYlNjcm9sbEJ1dHRvbl9yZWYyIiwiVGFiU2Nyb2xsQnV0dG9uX1RhYlNjcm9sbEJ1dHRvbiIsIl9wcm9wcyR2aXNpYmxlIiwiVGFic19UYWJTY3JvbGxCdXR0b24iLCJ3aXRoRm9yd2FyZGVkUmVmIiwiRm9yd2FyZFJlZkNvbXBvbmVudCIsImRpc3RfaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJUYWJzX1RhYnMiLCJUYWJzIiwiaW5kaWNhdG9yU3R5bGUiLCJzY3JvbGxlclN0eWxlIiwibWFyZ2luQm90dG9tIiwic2hvd0xlZnRTY3JvbGwiLCJzaG93UmlnaHRTY3JvbGwiLCJnZXRDb25kaXRpb25hbEVsZW1lbnRzIiwiU2Nyb2xsQnV0dG9uQ29tcG9uZW50Iiwic2Nyb2xsQnV0dG9ucyIsInZhcmlhbnQiLCJfdGhpcyRzdGF0ZSIsImNvbmRpdGlvbmFsRWxlbWVudHMiLCJzY3JvbGxhYmxlIiwic2Nyb2xsYmFyU2l6ZUxpc3RlbmVyIiwiaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZSIsInNob3dTY3JvbGxCdXR0b25zIiwic2Nyb2xsQnV0dG9uTGVmdCIsImhhbmRsZUxlZnRTY3JvbGxDbGljayIsInNjcm9sbEJ1dHRvbnNEZXNrdG9wIiwic2Nyb2xsQnV0dG9uUmlnaHQiLCJoYW5kbGVSaWdodFNjcm9sbENsaWNrIiwiZ2V0VGFic01ldGEiLCJ0YWJzTWV0YSIsInRhYk1ldGEiLCJ0YWJzUmVmIiwic2Nyb2xsTGVmdE5vcm1hbGl6ZWQiLCJyaWdodCIsInRhYiIsInZhbHVlVG9JbmRleCIsIm1vdmVUYWJzU2Nyb2xsIiwiaGFuZGxlVGFic1JlZiIsIm11bHRpcGxpZXIiLCJuZXh0U2Nyb2xsTGVmdCIsImludmVydCIsInNjcm9sbCIsInNjcm9sbFNlbGVjdGVkSW50b1ZpZXciLCJfdGhpcyRwcm9wczIiLCJfdGhpcyRnZXRUYWJzTWV0YSIsIl9uZXh0U2Nyb2xsTGVmdCIsInVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlIiwiX3RoaXMkcHJvcHMzIiwiX3RoaXMkdGFic1JlZiIsInVwZGF0ZUluZGljYXRvclN0YXRlIiwiaGFuZGxlVGFic1Njcm9sbCIsInVwZGF0ZUluZGljYXRvciIsIl90aGlzJGdldFRhYnNNZXRhMiIsImNvcnJlY3Rpb24iLCJfdGhpcyRwcm9wczQiLCJjZW50ZXJlZCIsImNoaWxkcmVuUHJvcCIsImluZGljYXRvckNvbG9yIiwiX3RoaXMkcHJvcHM0JFRhYkluZGljIiwiVGFiSW5kaWNhdG9yUHJvcHMiLCJ0ZXh0Q29sb3IiLCJpbmRpY2F0b3IiLCJjaGlsZEluZGV4IiwiY2hpbGRWYWx1ZSIsImZ1bGxXaWR0aCIsInJlYWN0X2V2ZW50X2xpc3RlbmVyX2Nqc19kZWZhdWx0Iiwib25SZXNpemUiLCJmbGV4Q29udGFpbmVyIiwic2Nyb2xsZXIiLCJmaXhlZCIsIm9uU2Nyb2xsIiwiZXNtX1RhYnNfVGFicyIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwid2hpdGVTcGFjZSIsIm92ZXJmbG93WCIsInNjcm9sbGJhcldpZHRoIiwiJjo6LXdlYmtpdC1zY3JvbGxiYXIiLCJUYWJfVGFiIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVGb2N1c1JpIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwibGFiZWwiLCJfcHJvcHMkdGV4dENvbG9yIiwiX3Byb3BzJHdyYXBwZWQiLCJ3cmFwcGVkIiwibGFiZWxJY29uIiwiYXJpYS1zZWxlY3RlZCIsIndyYXBwZXIiLCJlc21fVGFiX1RhYiIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJib3hTaXppbmciLCJwYWRkaW5nVG9wIiwiJiAkd3JhcHBlciA+ICo6Zmlyc3QtY2hpbGQiLCJ0ZXh0Q29sb3JJbmhlcml0IiwiJiRzZWxlY3RlZCIsInRleHRDb2xvclByaW1hcnkiLCJ0ZXh0Q29sb3JTZWNvbmRhcnkiLCJmbGV4QmFzaXMiLCJmbGV4RGlyZWN0aW9uIiwiUGFwZXJfUGFwZXIiLCJfcHJvcHMkc3F1YXJlIiwic3F1YXJlIiwiX3Byb3BzJGVsZXZhdGlvbiIsImVsZXZhdGlvbiIsInJvdW5kZWQiLCJlc21fUGFwZXJfUGFwZXIiLCJlbGV2YXRpb25zIiwic2hhZG93IiwiYm94U2hhZG93IiwiU1BBQ0lOR1MiLCJHUklEX1NJWkVTIiwiR3JpZF9HcmlkIiwiX3Byb3BzJGFsaWduQ29udGVudCIsImFsaWduQ29udGVudCIsIl9wcm9wcyRhbGlnbkl0ZW1zIiwiX3Byb3BzJGNvbnRhaW5lciIsIl9wcm9wcyRkaXJlY3Rpb24iLCJfcHJvcHMkaXRlbSIsIl9wcm9wcyRqdXN0aWZ5IiwianVzdGlmeSIsIl9wcm9wcyRsZyIsIl9wcm9wcyRtZCIsIl9wcm9wcyRzbSIsIl9wcm9wcyRzcGFjaW5nIiwiX3Byb3BzJHdyYXAiLCJ3cmFwIiwiX3Byb3BzJHhsIiwiX3Byb3BzJHhzIiwiX3Byb3BzJHplcm9NaW5XaWR0aCIsInplcm9NaW5XaWR0aCIsImVzbV9HcmlkX0dyaWQiLCJmbGV4V3JhcCIsImRpcmVjdGlvbi14cy1jb2x1bW4iLCJkaXJlY3Rpb24teHMtY29sdW1uLXJldmVyc2UiLCJkaXJlY3Rpb24teHMtcm93LXJldmVyc2UiLCJ3cmFwLXhzLW5vd3JhcCIsIndyYXAteHMtd3JhcC1yZXZlcnNlIiwiYWxpZ24taXRlbXMteHMtY2VudGVyIiwiYWxpZ24taXRlbXMteHMtZmxleC1zdGFydCIsImFsaWduLWl0ZW1zLXhzLWZsZXgtZW5kIiwiYWxpZ24taXRlbXMteHMtYmFzZWxpbmUiLCJhbGlnbi1jb250ZW50LXhzLWNlbnRlciIsImFsaWduLWNvbnRlbnQteHMtZmxleC1zdGFydCIsImFsaWduLWNvbnRlbnQteHMtZmxleC1lbmQiLCJhbGlnbi1jb250ZW50LXhzLXNwYWNlLWJldHdlZW4iLCJhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCIsImp1c3RpZnkteHMtY2VudGVyIiwianVzdGlmeS14cy1mbGV4LWVuZCIsImp1c3RpZnkteHMtc3BhY2UtYmV0d2VlbiIsImp1c3RpZnkteHMtc3BhY2UtYXJvdW5kIiwianVzdGlmeS14cy1zcGFjZS1ldmVubHkiLCJicmVha3BvaW50IiwidGhlbWVTcGFjaW5nIiwiJiA+ICRpdGVtIiwiZ2VuZXJhdGVHdXR0ZXIiLCJhY2N1bXVsYXRvciIsImdsb2JhbFN0eWxlcyIsImdlbmVyYXRlR3JpZCIsIkNvbnRhaW5lcl9Db250YWluZXIiLCJfcHJvcHMkZml4ZWQiLCJfcHJvcHMkbWF4V2lkdGgiLCJlc21fQ29udGFpbmVyX0NvbnRhaW5lciIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1heFdpZHRoWHMiLCJtYXhXaWR0aFNtIiwibWF4V2lkdGhNZCIsIm1heFdpZHRoTGciLCJtYXhXaWR0aFhsIiwiZXNtX21lcmdlIiwiZXNtX2NzcyIsInN0eWxlRnVuY3Rpb24iLCJuZXdTdHlsZUZ1bmN0aW9uIiwiZmllbGRzIiwib21pdCIsImZpbHRlclByb3BzIiwiZXNtX2NvbXBvc2UiLCJicmVha3BvaW50c192YWx1ZXMiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJ0eXBlb2ZfZGVmYXVsdCIsIl90aGVtZUJyZWFrcG9pbnRzIiwiZ2V0UGF0aCIsImVzbV9zdHlsZSIsIl9vcHRpb25zJGNzc1Byb3BlcnR5IiwiY3NzUHJvcGVydHkiLCJ0aGVtZUtleSIsInRoZW1lTWFwcGluZyIsInByb3BWYWx1ZUZpbmFsIiwiZ2V0Qm9yZGVyIiwiZXNtX2JvcmRlcnMiLCJlc21fZGlzcGxheSIsIkBtZWRpYSBwcmludCIsImVzbV9mbGV4Ym94IiwicG9zaXRpb25zIiwiZXNtX3BhbGV0dGUiLCJzaXppbmdfdHJhbnNmb3JtIiwic2l6aW5nX21heFdpZHRoIiwibWF4SGVpZ2h0IiwiZXNtX3NpemluZyIsInByb3BlcnRpZXMiLCJkaXJlY3Rpb25zIiwiZ2V0Q3NzUHJvcGVydGllcyIsIl9wcm9wJHNwbGl0IiwiX3Byb3Akc3BsaXQyIiwic3BhY2luZ0tleXMiLCJnZXRTdHlsZUZyb21Qcm9wVmFsdWUiLCJjc3NQcm9wZXJ0aWVzIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lZCIsInNwYWNpbmdfc3BhY2luZyIsImdldFRyYW5zZm9ybWVyIiwiZXNtX3NwYWNpbmciLCJlc21fdHlwb2dyYXBoeSIsImVzbV9zdHlsZWRfc3R5bGVkIiwiU3R5bGVkQ29tcG9uZW50IiwiRmluYWxDb21wb25lbnQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19kaXN0X2hvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2Nqc19kZWZhdWx0Iiwic3R5bGVzX3N0eWxlZCIsImNvbXBvbmVudENyZWF0b3IiLCJCb3hfc3R5bGVGdW5jdGlvbiIsIkJveF9Cb3giLCJkZWZhdWx0VmFyaWFudE1hcHBpbmciLCJUeXBvZ3JhcGh5X1R5cG9ncmFwaHkiLCJfcHJvcHMkYWxpZ24iLCJhbGlnbiIsIl9wcm9wcyRkaXNwbGF5IiwiX3Byb3BzJGd1dHRlckJvdHRvbSIsImd1dHRlckJvdHRvbSIsIl9wcm9wcyRub1dyYXAiLCJub1dyYXAiLCJfcHJvcHMkcGFyYWdyYXBoIiwicGFyYWdyYXBoIiwiX3Byb3BzJHZhcmlhbnQiLCJfcHJvcHMkdmFyaWFudE1hcHBpbmciLCJ2YXJpYW50TWFwcGluZyIsImVzbV9UeXBvZ3JhcGh5X1R5cG9ncmFwaHkiLCJzck9ubHkiLCJhbGlnbkxlZnQiLCJ0ZXh0QWxpZ24iLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJ0ZXh0T3ZlcmZsb3ciLCJjb2xvckluaGVyaXQiLCJjb2xvclRleHRQcmltYXJ5IiwiY29sb3JUZXh0U2Vjb25kYXJ5IiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsImZvcm1Db250cm9sU3RhdGUiLCJzdGF0ZXMiLCJtdWlGb3JtQ29udHJvbCIsIkZvcm1Db250cm9sX0Zvcm1Db250cm9sQ29udGV4dCIsImdldFN0eWxlVmFsdWUiLCJjb21wdXRlZFN0eWxlIiwiVGV4dGFyZWFfdXNlRW5oYW5jZWRFZmZlY3QiLCJUZXh0YXJlYV9zdHlsZXMiLCJ2aXNpYmlsaXR5IiwiSW5wdXRCYXNlX1RleHRhcmVhIiwicm93cyIsInJvd3NNYXgiLCJpc0NvbnRyb2xsZWQiLCJpbnB1dFJlZiIsInNoYWRvd1JlZiIsInN5bmNIZWlnaHQiLCJpbnB1dFNoYWxsb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwicGxhY2Vob2xkZXIiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0IiwiaGFzVmFsdWUiLCJpc0ZpbGxlZCIsIlNTUiIsIklucHV0QmFzZV9JbnB1dEJhc2UiLCJhcmlhRGVzY3JpYmVkYnkiLCJhdXRvQ29tcGxldGUiLCJlbmRBZG9ybm1lbnQiLCJfcHJvcHMkZnVsbFdpZHRoIiwiX3Byb3BzJGlucHV0Q29tcG9uZW50IiwiaW5wdXRDb21wb25lbnQiLCJfcHJvcHMkaW5wdXRQcm9wcyIsImlucHV0UHJvcHMiLCJpbnB1dFByb3BzQ2xhc3NOYW1lIiwiaW5wdXRQcm9wc1Byb3AiLCJpbnB1dFJlZlByb3AiLCJfcHJvcHMkbXVsdGlsaW5lIiwibXVsdGlsaW5lIiwib25FbXB0eSIsIm9uRmlsbGVkIiwicmVuZGVyUHJlZml4Iiwic3RhcnRBZG9ybm1lbnQiLCJoYW5kbGVJbnB1dFJlZldhcm5pbmciLCJoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCIsImhhbmRsZUlucHV0UmVmUHJvcCIsImhhbmRsZUlucHV0UmVmIiwiZm9jdXNlZCIsInNldEZvY3VzZWQiLCJmY3MiLCJjaGVja0RpcnR5IiwiSW5wdXRDb21wb25lbnQiLCJmb3JtQ29udHJvbCIsIm1hcmdpbkRlbnNlIiwiYWRvcm5lZFN0YXJ0IiwiYWRvcm5lZEVuZCIsImFyaWEtaW52YWxpZCIsImFyaWEtZGVzY3JpYmVkYnkiLCJpbnB1dFR5cGVTZWFyY2giLCJpbnB1dE11bHRpbGluZSIsImlucHV0TWFyZ2luRGVuc2UiLCJpbnB1dEFkb3JuZWRTdGFydCIsImlucHV0QWRvcm5lZEVuZCIsInJlcXVpcmVkIiwiZXNtX0lucHV0QmFzZV9JbnB1dEJhc2UiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsIiYkbWFyZ2luRGVuc2UiLCJmb250IiwiJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciIsIiY6Oi1tb3otcGxhY2Vob2xkZXIiLCImOi1tcy1pbnB1dC1wbGFjZWhvbGRlciIsIiY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciIsIiY6Zm9jdXMiLCImOmludmFsaWQiLCImOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIiwibGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYiLCImOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIiwiJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlciIsIiY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyIiwiJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIiwicmVzaXplIiwiSW5wdXRfSW5wdXQiLCJkaXNhYmxlVW5kZXJsaW5lIiwidW5kZXJsaW5lIiwiZXNtX0lucHV0X0lucHV0IiwiYm90dG9tTGluZUNvbG9yIiwibGFiZWwgKyAmIiwibWFyZ2luVG9wIiwiJjphZnRlciIsImJvcmRlckJvdHRvbSIsIiYkZm9jdXNlZDphZnRlciIsIiYkZXJyb3I6YWZ0ZXIiLCJib3JkZXJCb3R0b21Db2xvciIsIiY6YmVmb3JlIiwiJjpob3Zlcjpub3QoJGRpc2FibGVkKTpiZWZvcmUiLCJAbWVkaWEgKGhvdmVyOiBub25lKSIsIiYkZGlzYWJsZWQ6YmVmb3JlIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJGaWxsZWRJbnB1dF9GaWxsZWRJbnB1dCIsImVzbV9GaWxsZWRJbnB1dF9GaWxsZWRJbnB1dCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsIiY6aG92ZXIiLCImJGZvY3VzZWQiLCImOmhvdmVyOmJlZm9yZSIsInBhZGRpbmdCb3R0b20iLCJOb3RjaGVkT3V0bGluZV9Ob3RjaGVkT3V0bGluZSIsImxhYmVsV2lkdGhQcm9wIiwibGFiZWxXaWR0aCIsIm5vdGNoZWQiLCJsZWdlbmQiLCJPdXRsaW5lZElucHV0X05vdGNoZWRPdXRsaW5lIiwiYm9yZGVyV2lkdGgiLCJPdXRsaW5lZElucHV0X091dGxpbmVkSW5wdXQiLCJfcHJvcHMkbGFiZWxXaWR0aCIsIm5vdGNoZWRPdXRsaW5lIiwiZmlsbGVkIiwiZXNtX091dGxpbmVkSW5wdXRfT3V0bGluZWRJbnB1dCIsImJvcmRlckNvbG9yIiwiJiAkbm90Y2hlZE91dGxpbmUiLCImOmhvdmVyICRub3RjaGVkT3V0bGluZSIsIiYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUiLCImJGVycm9yICRub3RjaGVkT3V0bGluZSIsIiYkZGlzYWJsZWQgJG5vdGNoZWRPdXRsaW5lIiwid2l0aEZvcm1Db250cm9sQ29udGV4dCIsIkVuaGFuY2VkQ29tcG9uZW50IiwiRm9ybUxhYmVsX0Zvcm1MYWJlbCIsImVzbV9Gb3JtTGFiZWxfRm9ybUxhYmVsIiwiJiRlcnJvciIsIklucHV0TGFiZWxfSW5wdXRMYWJlbCIsIl9wcm9wcyRkaXNhYmxlQW5pbWF0aSIsImRpc2FibGVBbmltYXRpb24iLCJzaHJpbmtQcm9wIiwic2hyaW5rIiwiZGF0YS1zaHJpbmsiLCJhbmltYXRlZCIsIm91dGxpbmVkIiwiZXNtX0lucHV0TGFiZWxfSW5wdXRMYWJlbCIsInRyYW5zZm9ybU9yaWdpbiIsIiYkc2hyaW5rIiwiRm9ybUNvbnRyb2xfRm9ybUNvbnRyb2wiLCJfcHJvcHMkZXJyb3IiLCJfcHJvcHMkbWFyZ2luIiwiX3Byb3BzJHJlcXVpcmVkIiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsImluaXRpYWxGaWxsZWQiLCJzZXRGaWxsZWQiLCJfUmVhY3QkdXNlU3RhdGU1IiwiX1JlYWN0JHVzZVN0YXRlNiIsImNoaWxkQ29udGV4dCIsImVzbV9Gb3JtQ29udHJvbF9Gb3JtQ29udHJvbCIsIm1hcmdpbk5vcm1hbCIsIkZvcm1IZWxwZXJUZXh0X0Zvcm1IZWxwZXJUZXh0IiwiY29udGFpbmVkIiwiZXNtX0Zvcm1IZWxwZXJUZXh0X0Zvcm1IZWxwZXJUZXh0IiwidXRpbHNfb3duZXJEb2N1bWVudCIsInV0aWxzX293bmVyV2luZG93IiwiZG9jIiwicGFyZW50VmlldyIsIlBvcnRhbF91c2VFbmhhbmNlZEVmZmVjdCIsIlBvcnRhbF9Qb3J0YWwiLCJkaXNhYmxlUG9ydGFsIiwib25SZW5kZXJlZCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImNoaWxkUmVmIiwiZ2V0Q29udGFpbmVyIiwiZXNtX1BvcnRhbF9Qb3J0YWwiLCJ3aXRoVGhlbWVDcmVhdG9yIiwiV2l0aFRoZW1lIiwiZXNtX3dpdGhUaGVtZV93aXRoVGhlbWUiLCJ1dGlsc19nZXRTY3JvbGxiYXJTaXplIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyU2l6ZSIsIm9mZnNldFdpZHRoIiwiaXNPdmVyZmxvd2luZyIsIndpbiIsImlubmVyV2lkdGgiLCJCTEFDS0xJU1QiLCJzaWJsaW5ncyIsIm1vdW50IiwiY3VycmVudE5vZGUiLCJpc0hpZGVhYmxlIiwiYXJpYUhpZGRlbiIsInNob3ciLCJhcmlhSGlkZGVuU2libGluZ3MiLCJmaW5kSW5kZXhPZiIsInNvbWUiLCJnZXRQYWRkaW5nUmlnaHQiLCJNb2RhbF9Nb2RhbE1hbmFnZXIiLCJNb2RhbE1hbmFnZXIiLCJfb3B0aW9ucyRoaWRlU2libGluZ04iLCJoaWRlU2libGluZ05vZGVzIiwiX29wdGlvbnMkaGFuZGxlQ29udGFpIiwiaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3ciLCJtb2RhbHMiLCJtb2RhbElkeCIsIm1vZGFsUmVmIiwiY29udGFpbmVySWR4Iiwib3ZlcmZsb3dpbmciLCJwcmV2UGFkZGluZ3MiLCJmaXhlZE5vZGVzIiwic2V0Q29udGFpbmVyU3R5bGUiLCJyZW1vdmVDb250YWluZXJTdHlsZSIsIm5leHRUb3AiLCJNb2RhbF9UcmFwRm9jdXMiLCJfcHJvcHMkZGlzYWJsZUF1dG9Gb2MiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiX3Byb3BzJGRpc2FibGVFbmZvcmNlIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsIl9wcm9wcyRkaXNhYmxlUmVzdG9yZSIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXREb2MiLCJpc0VuYWJsZWQiLCJpZ25vcmVOZXh0RW5mb3JjZUZvY3VzIiwic2VudGluZWxTdGFydCIsInNlbnRpbmVsRW5kIiwibGFzdEZvY3VzIiwicm9vdFJlZiIsImVuZm9yY2VGb2N1cyIsImxvb3BGb2N1cyIsImRhdGEtdGVzdCIsIlNpbXBsZUJhY2tkcm9wX3N0eWxlcyIsInRvdWNoQWN0aW9uIiwiaW52aXNpYmxlIiwiU2ltcGxlQmFja2Ryb3BfU2ltcGxlQmFja2Ryb3AiLCJNb2RhbF9TaW1wbGVCYWNrZHJvcCIsImdldEhhc1RyYW5zaXRpb24iLCJNb2RhbF9Nb2RhbCIsIk1vZGFsIiwiaGFuZGxlT3BlbiIsIk1vZGFsX2dldENvbnRhaW5lciIsIm1hbmFnZXIiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWRfZGVmYXVsdCIsImhhbmRsZU9wZW5lZCIsImhhbmRsZVJlbmRlcmVkIiwiaGFuZGxlQ2xvc2UiLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsImhhbmRsZUVudGVyIiwiZXhpdGVkIiwiaGFuZGxlQmFja2Ryb3BDbGljayIsIm9uQmFja2Ryb3BDbGljayIsImRpc2FibGVCYWNrZHJvcENsaWNrIiwib25DbG9zZSIsImlzVG9wTW9kYWwiLCJvbkVzY2FwZUtleURvd24iLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZU1vZGFsUmVmIiwiQmFja2Ryb3BDb21wb25lbnQiLCJCYWNrZHJvcFByb3BzIiwiaGlkZUJhY2tkcm9wIiwia2VlcE1vdW50ZWQiLCJoYXNUcmFuc2l0aW9uIiwic3R5bGVzUmVuZGVyIiwiTW9kYWxfc3R5bGVzIiwic3R5bGVzX3pJbmRleCIsImVzbV9Nb2RhbF9Nb2RhbCIsInN0eWxlc193aXRoVGhlbWUiLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJfcHJvcHMkc3R5bGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJnZXRTY2FsZSIsIkdyb3dfc3R5bGVzIiwiZW50ZXJpbmciLCJlbnRlcmVkIiwiR3Jvd19Hcm93IiwiaW5Qcm9wIiwiX3Byb3BzJHRpbWVvdXQiLCJ0aW1lciIsImF1dG9UaW1lb3V0IiwicmVmbG93IiwiX2dldFRyYW5zaXRpb25Qcm9wcyIsIl9nZXRUcmFuc2l0aW9uUHJvcHMyIiwiXyIsIm11aVN1cHBvcnRBdXRvIiwiZXNtX0dyb3dfR3JvdyIsImdldE9mZnNldFRvcCIsInZlcnRpY2FsIiwiZ2V0T2Zmc2V0TGVmdCIsImhvcml6b250YWwiLCJnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSIsImdldEFuY2hvckVsIiwiYW5jaG9yRWwiLCJQb3BvdmVyX1BvcG92ZXIiLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsImFuY2hvclJlZmVyZW5jZSIsImNvbnRhaW5lclByb3AiLCJnZXRDb250ZW50QW5jaG9yRWwiLCJtYXJnaW5UaHJlc2hvbGQiLCJNb2RhbENsYXNzZXMiLCJfcHJvcHMkUGFwZXJQcm9wcyIsIlBhcGVyUHJvcHMiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwidHJhbnNpdGlvbkR1cmF0aW9uUHJvcCIsIl9wcm9wcyRUcmFuc2l0aW9uUHJvcCIsIlRyYW5zaXRpb25Qcm9wcyIsInBhcGVyUmVmIiwiaGFuZGxlUmVzaXplUmVmIiwidXBkYXRlUG9zaXRpb24iLCJnZXRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yT2Zmc2V0IiwicmVzb2x2ZWRBbmNob3JFbCIsImFuY2hvclJlY3QiLCJhbmNob3JWZXJ0aWNhbCIsImdldENvbnRlbnRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yRWwiLCJnZXRTY3JvbGxQYXJlbnQiLCJvZmZzZXRUb3AiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJlbGVtUmVjdCIsImdldFBvc2l0aW9uaW5nU3R5bGUiLCJlbGVtVHJhbnNmb3JtT3JpZ2luIiwiY29udGFpbmVyV2luZG93IiwiaGVpZ2h0VGhyZXNob2xkIiwid2lkdGhUaHJlc2hvbGQiLCJkaWZmIiwiX2RpZmYiLCJfZGlmZjIiLCJfZGlmZjMiLCJzZXRQb3NpdGlvbmluZ1N0eWxlcyIsInBvc2l0aW9uaW5nIiwiaGFuZGxlUGFwZXJSZWYiLCJlc21fUG9wb3Zlcl9Qb3BvdmVyIiwib3ZlcmZsb3dZIiwiTGlzdF9MaXN0Q29udGV4dCIsIkxpc3RfTGlzdCIsIl9wcm9wcyRkZW5zZSIsImRlbnNlIiwiX3Byb3BzJGRpc2FibGVQYWRkaW5nIiwiZGlzYWJsZVBhZGRpbmciLCJzdWJoZWFkZXIiLCJlc21fTGlzdF9MaXN0IiwibGlzdFN0eWxlIiwibmV4dEl0ZW0iLCJkaXNhYmxlTGlzdFdyYXAiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJwcmV2aW91c0l0ZW0iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwidGV4dENyaXRlcmlhTWF0Y2hlcyIsIm5leHRGb2N1cyIsInRleHRDcml0ZXJpYSIsImlubmVyVGV4dCIsInJlcGVhdGluZyIsIm1vdmVGb2N1cyIsImN1cnJlbnRGb2N1cyIsInRyYXZlcnNhbEZ1bmN0aW9uIiwid3JhcHBlZE9uY2UiLCJNZW51TGlzdF91c2VFbmhhbmNlZEVmZmVjdCIsImVzbV9NZW51TGlzdF9NZW51TGlzdCIsImFjdGlvbnMiLCJfcHJvcHMkZGlzYWJsZUxpc3RXcmEiLCJsaXN0UmVmIiwidGV4dENyaXRlcmlhUmVmIiwicHJldmlvdXNLZXlNYXRjaGVkIiwibGFzdFRpbWUiLCJhZGp1c3RTdHlsZUZvclNjcm9sbGJhciIsImNvbnRhaW5lckVsZW1lbnQiLCJub0V4cGxpY2l0V2lkdGgiLCJjcml0ZXJpYSIsImxvd2VyS2V5IiwiY3VyclRpbWUiLCJrZWVwRm9jdXNPbkN1cnJlbnQiLCJSVExfT1JJR0lOIiwiTFRSX09SSUdJTiIsIk1lbnVfTWVudSIsImF1dG9Gb2N1c1Byb3AiLCJkaXNhYmxlQXV0b0ZvY3VzSXRlbSIsIl9wcm9wcyRNZW51TGlzdFByb3BzIiwiTWVudUxpc3RQcm9wcyIsIlBvcG92ZXJDbGFzc2VzIiwiX3Byb3BzJHRyYW5zaXRpb25EdXJhIiwibWVudUxpc3RBY3Rpb25zUmVmIiwiZmlyc3RWYWxpZEl0ZW1SZWYiLCJmaXJzdFNlbGVjdGVkSXRlbVJlZiIsImZpcnN0VmFsaWRFbGVtZW50SW5kZXgiLCJmaXJzdFNlbGVjdGVkSW5kZXgiLCJpdGVtcyIsIm5ld0NoaWxkUHJvcHMiLCJlc21fTWVudV9NZW51IiwiYXJlRXF1YWxWYWx1ZXMiLCJTZWxlY3RfU2VsZWN0SW5wdXQiLCJhdXRvV2lkdGgiLCJkaXNwbGF5RW1wdHkiLCJJY29uQ29tcG9uZW50IiwiX3Byb3BzJE1lbnVQcm9wcyIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJ0YWJJbmRleFByb3AiLCJkaXNwbGF5UmVmIiwiaWdub3JlTmV4dEJsdXIiLCJpc09wZW5Db250cm9sbGVkIiwibWVudU1pbldpZHRoU3RhdGUiLCJzZXRNZW51TWluV2lkdGhTdGF0ZSIsIm9wZW5TdGF0ZSIsInNldE9wZW5TdGF0ZSIsImhhbmRsZUl0ZW1DbGljayIsIml0ZW1JbmRleCIsImRpc3BsYXlTaW5nbGUiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsImRhdGEtdmFsdWUiLCJtZW51TWluV2lkdGgiLCJzZWxlY3RNZW51IiwiYXJpYS1wcmVzc2VkIiwiYXJpYS1vd25zIiwiYXJpYS1oYXNwb3B1cCIsIkFycm93RHJvcERvd24iLCJOYXRpdmVTZWxlY3RfTmF0aXZlU2VsZWN0SW5wdXQiLCJOYXRpdmVTZWxlY3Rfc3R5bGVzIiwiJjo6LW1zLWV4cGFuZCIsIiZbbXVsdGlwbGVdIiwiJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCIsInBvaW50ZXItZXZlbnRzIiwiZGVmYXVsdElucHV0IiwiTmF0aXZlU2VsZWN0X05hdGl2ZVNlbGVjdCIsIl9wcm9wcyRJY29uQ29tcG9uZW50IiwiX3Byb3BzJGlucHV0IiwiU2VsZWN0X3N0eWxlcyIsIlNlbGVjdF9kZWZhdWx0SW5wdXQiLCJTZWxlY3RfU2VsZWN0IiwiU2VsZWN0IiwiX3Byb3BzJGF1dG9XaWR0aCIsIl9wcm9wcyRkaXNwbGF5RW1wdHkiLCJfcHJvcHMkbXVsdGlwbGUiLCJfcHJvcHMkbmF0aXZlIiwibmF0aXZlIiwibWVyZ2VDbGFzc2VzIiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwiZXNtX1NlbGVjdF9TZWxlY3QiLCJ2YXJpYW50Q29tcG9uZW50IiwiVGV4dEZpZWxkX1RleHRGaWVsZCIsIkZvcm1IZWxwZXJUZXh0UHJvcHMiLCJoZWxwZXJUZXh0IiwiSW5wdXRMYWJlbFByb3BzIiwiSW5wdXRQcm9wcyIsIl9wcm9wcyRzZWxlY3QiLCJTZWxlY3RQcm9wcyIsInNldExhYmVsV2lkdGgiLCJsYWJlbFJlZiIsImxhYmVsTm9kZSIsIklucHV0TW9yZSIsImhlbHBlclRleHRJZCIsIklucHV0RWxlbWVudCIsImh0bWxGb3IiLCJlc21fVGV4dEZpZWxkX1RleHRGaWVsZCIsIkJ1dHRvbl9CdXR0b24iLCJfcHJvcHMkc2l6ZSIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsIm91dGxpbmVkUHJpbWFyeSIsIm91dGxpbmVkU2Vjb25kYXJ5IiwiY29udGFpbmVkUHJpbWFyeSIsImNvbnRhaW5lZFNlY29uZGFyeSIsImVzbV9CdXR0b25fQnV0dG9uIiwiJiRmb2N1c1Zpc2libGUiLCImOmFjdGl2ZSIsInNpemVTbWFsbCIsInNpemVMYXJnZSIsIlRhYkNvbnRhaW5lciIsIkxvZ2luU2NyZWVuIiwidGFiVmFsdWUiLCJjaGFuZ2VUYWJWYWx1ZSIsImNoYW5nZVVzZXJuYW1lVmFsdWUiLCJjaGFuZ2VQYXNzd29yZFZhbHVlIiwibG9naW5CdXR0b25DbGlja0hhbmRsZXIiLCJhbGVydCIsImxvZ2luQWRtaW4iLCJfdGhpcyRzdGF0ZTIiLCJUYWJDb250YWluZXJfVGFiQ29udGFpbmVyIiwiSW5wdXRBZG9ybm1lbnRfSW5wdXRBZG9ybm1lbnQiLCJfcHJvcHMkZGlzYWJsZVBvaW50ZXIiLCJkaXNhYmxlUG9pbnRlckV2ZW50cyIsIl9wcm9wcyRkaXNhYmxlVHlwb2dyYSIsImRpc2FibGVUeXBvZ3JhcGh5IiwidmFyaWFudFByb3AiLCJwb3NpdGlvblN0YXJ0IiwicG9zaXRpb25FbmQiLCJlc21fSW5wdXRBZG9ybm1lbnRfSW5wdXRBZG9ybm1lbnQiLCImJHBvc2l0aW9uU3RhcnQiLCJDaXJjdWxhclByb2dyZXNzX0NpcmN1bGFyUHJvZ3Jlc3MiLCJfcHJvcHMkZGlzYWJsZVNocmluayIsImRpc2FibGVTaHJpbmsiLCJfcHJvcHMkdGhpY2tuZXNzIiwidGhpY2tuZXNzIiwiX3Byb3BzJHZhbHVlIiwiY2lyY2xlU3R5bGUiLCJyb290U3R5bGUiLCJyb290UHJvcHMiLCJjaXJjdW1mZXJlbmNlIiwiaW5kZXRlcm1pbmF0ZSIsInN0YXRpYyIsIlNJWkUiLCJjaXJjbGUiLCJjaXJjbGVJbmRldGVybWluYXRlIiwiY2lyY2xlU3RhdGljIiwiY2lyY2xlRGlzYWJsZVNocmluayIsImN4IiwiY3kiLCJlc21fQ2lyY3VsYXJQcm9ncmVzc19DaXJjdWxhclByb2dyZXNzIiwic3Ryb2tlIiwiQGtleWZyYW1lcyBtdWktcHJvZ3Jlc3MtY2lyY3VsYXItcm90YXRlIiwiQGtleWZyYW1lcyBtdWktcHJvZ3Jlc3MtY2lyY3VsYXItZGFzaCIsImZldGNoUHJvdmluc2lBcGkiLCJmZXRjaCIsInByb3h5VXJsIiwiY3Jvc3NEb21haW4iLCJmZXRjaEthYnVwYXRlbktvdGFBcGkiLCJSZWdpc3RlclNlbGxlckZvcm0iLCJSZWdpc3RlclNlbGxlckZvcm1fY2xhc3NDYWxsQ2hlY2siLCJSZWdpc3RlclNlbGxlckZvcm1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZ2lzdGVyU2VsbGVyRm9ybV9nZXRQcm90b3R5cGVPZiIsIm5hbWFVc2FoYSIsInN1Ym1pdHRlZE5hbWFVc2FoYSIsImplbmlzVXNhaGEiLCJzdWJtaXR0ZWRKZW5pc1VzYWhhIiwibmFtYVBlYmlzbmlzIiwic3VibWl0dGVkTmFtYVBlYmlzbmlzIiwic3VibWl0dGVkRW1haWwiLCJub21vclRlbGVwb24iLCJzdWJtaXR0ZWROb21vclRlbGVwb24iLCJ0ZW1wYXRMYWhpciIsInN1Ym1pdHRlZFRlbXBhdExhaGlyIiwidGFuZ2dhbExhaGlyIiwic3VibWl0dGVkVGFuZ2dhbExhaGlyIiwiaXNMb2FkaW5nUHJvdmluc2kiLCJpc1Byb3ZpbnNpTG9hZGVkIiwicHJvdmluc2lBcnJheSIsInByb3ZpbnNpIiwicHJvdmluc2lWYWx1ZSIsInN1Ym1pdHRlZFByb3ZpbnNpIiwiaXNMb2FkaW5nS2FidXBhdGVuS290YSIsImlzS2FidXBhdGVuS290YUxvYWRlZCIsImthYnVwYXRlbktvdGFBcnJheSIsImthYnVwYXRlbktvdGEiLCJrYWJ1cGF0ZW5Lb3RhVmFsdWUiLCJzdWJtaXR0ZWRLYWJ1cGF0ZW5Lb3RhIiwiYWxhbWF0Iiwic3VibWl0dGVkQWxhbWF0Iiwic3VibWl0dGVkVXNlcm5hbWUiLCJwYXNzd29yZENvbmZpcm1hdGlvbiIsInN1Ym1pdHRlZFBhc3N3b3JkIiwiaGFuZGxlU3VibWl0IiwiUmVnaXN0ZXJTZWxsZXJGb3JtX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImNoYW5nZVRhbmdnYWxMYWhpclZhbHVlIiwiY2hhbmdlUHJvdmluc2lWYWx1ZSIsImNoYW5nZUthYnVwYXRlbktvdGFWYWx1ZSIsImhhbmRsZUlucHV0Q2hhbmdlIiwiZmV0Y2hQcm92aW5zaSIsIl90aGlzMiRzdGF0ZSIsInN1Ym1pdHRlZCIsInRhYmxlIiwibG9nIiwiX2V2ZW50JHRhcmdldCIsIl9kZWZpbmVQcm9wZXJ0eSIsImZldGNoS2FidXBhdGVuS290YSIsInNlbGVjdGVkSW5kZXgiLCJzZW11YXByb3ZpbnNpIiwia2FidXBhdGVucyIsInByb3ZpbnNpcyIsIm5hbWEiLCJrYWJ1cGF0ZW5Lb3RhcyIsIm9uU3VibWl0IiwiZ29Ub0Rhc2hib2FyZCIsIlJlZ2lzdGVyUHJvbW90b3JGb3JtIiwiUmVnaXN0ZXJQcm9tb3RvckZvcm1fY2xhc3NDYWxsQ2hlY2siLCJSZWdpc3RlclByb21vdG9yRm9ybV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVnaXN0ZXJQcm9tb3RvckZvcm1fZ2V0UHJvdG90eXBlT2YiLCJuYW1hUHJvbW90b3IiLCJzdWJtaXR0ZWROYW1hUHJvbW90b3IiLCJmYWNlYm9vayIsInN1Ym1pdHRlZEZhY2Vib29rIiwidHdpdHRlciIsInN1Ym1pdHRlZFR3aXR0ZXIiLCJpbnN0YWdyYW0iLCJzdWJtaXR0ZWRJbnN0YWdyYW0iLCJSZWdpc3RlclByb21vdG9yRm9ybV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWdpc3RlclByb21vdG9yRm9ybV9kZWZpbmVQcm9wZXJ0eSIsIlJlZ2lzdGVyU2NyZWVuIiwiUmVnaXN0ZXJTY3JlZW5fY2xhc3NDYWxsQ2hlY2siLCJSZWdpc3RlclNjcmVlbl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVnaXN0ZXJTY3JlZW5fZ2V0UHJvdG90eXBlT2YiLCJSZWdpc3RlclNjcmVlbl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJyZWdpc3RlckJ1dHRvbkNsaWNrSGFuZGxlciIsIkNvbXBvbmVudHNfUmVnaXN0ZXJTZWxsZXJGb3JtX1JlZ2lzdGVyU2VsbGVyRm9ybSIsIkNvbXBvbmVudHNfUmVnaXN0ZXJQcm9tb3RvckZvcm1fUmVnaXN0ZXJQcm9tb3RvckZvcm0iLCJBdmF0YXJfQXZhdGFyIiwiYWx0IiwiY2hpbGRyZW5DbGFzc05hbWVQcm9wIiwiY2hpbGRyZW5DbGFzc05hbWUiLCJpbWdQcm9wcyIsInNpemVzIiwic3JjIiwic3JjU2V0Iiwic3lzdGVtIiwiY29sb3JEZWZhdWx0IiwiZXNtX0F2YXRhcl9BdmF0YXIiLCJvYmplY3RGaXQiLCJBZG1pbk5hdmlnYXRpb24iLCJBZG1pbk5hdmlnYXRpb25fY2xhc3NDYWxsQ2hlY2siLCJBZG1pbk5hdmlnYXRpb25fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkFkbWluTmF2aWdhdGlvbl9nZXRQcm90b3R5cGVPZiIsIkFkbWluTmF2aWdhdGlvbl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJoZWFkZXIiLCJpc1dpdGhIb21lQnV0dG9uIiwiaW1hZ2VVcmwiLCJIb21lX2RlZmF1bHQiLCJQZXJzb25fZGVmYXVsdCIsIkFkbWluRGFzaGJvYXJkU2NyZWVuIiwiQWRtaW5EYXNoYm9hcmRTY3JlZW5fY2xhc3NDYWxsQ2hlY2siLCJBZG1pbkRhc2hib2FyZFNjcmVlbl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQWRtaW5EYXNoYm9hcmRTY3JlZW5fZ2V0UHJvdG90eXBlT2YiLCJpbWFnZUljb24iLCJWb2x1bWVVcF9kZWZhdWx0IiwidGFyZ2V0VXJsIiwiYWN0aXZlQ291bnQiLCJHcm91cF9kZWZhdWx0IiwiQWNjZXNzaWJpbGl0eV9kZWZhdWx0IiwiQWRtaW5EYXNoYm9hcmRTY3JlZW5fYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiQ29tcG9uZW50c19BZG1pbk5hdmlnYXRpb25fQWRtaW5OYXZpZ2F0aW9uIiwiVGFibGVfVGFibGVDb250ZXh0IiwiVGFibGVfVGFibGUiLCJfcHJvcHMkcGFkZGluZyIsImVzbV9UYWJsZV9UYWJsZSIsImJvcmRlckNvbGxhcHNlIiwiYm9yZGVyU3BhY2luZyIsIlRhYmxlX1RhYmxlbHZsMkNvbnRleHQiLCJUYWJsZUJvZHlfdGFibGVsdmwyIiwiVGFibGVCb2R5X1RhYmxlQm9keSIsImVzbV9UYWJsZUJvZHlfVGFibGVCb2R5IiwiVGFibGVDZWxsX1RhYmxlQ2VsbCIsInBhZGRpbmdQcm9wIiwic2NvcGVQcm9wIiwic2NvcGUiLCJzaXplUHJvcCIsInNvcnREaXJlY3Rpb24iLCJ0YWJsZWx2bDIiLCJhcmlhU29ydCIsImZvb3RlciIsImFyaWEtc29ydCIsImVzbV9UYWJsZUNlbGxfVGFibGVDZWxsIiwiJjpsYXN0LWNoaWxkIiwiJiRwYWRkaW5nQ2hlY2tib3giLCImID4gKiIsInBhZGRpbmdDaGVja2JveCIsInBhZGRpbmdOb25lIiwiVGFibGVIZWFkX3RhYmxlbHZsMiIsIlRhYmxlSGVhZF9UYWJsZUhlYWQiLCJlc21fVGFibGVIZWFkX1RhYmxlSGVhZCIsIlRhYmxlUm93X1RhYmxlUm93IiwiX3Byb3BzJGhvdmVyIiwiX3Byb3BzJHNlbGVjdGVkIiwiZXNtX1RhYmxlUm93X1RhYmxlUm93IiwiJiRob3Zlcjpob3ZlciIsIkFkbWluRGF0YWJhc2VUYWJsZSIsIkFkbWluRGF0YWJhc2VUYWJsZV9jbGFzc0NhbGxDaGVjayIsIkFkbWluRGF0YWJhc2VUYWJsZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQWRtaW5EYXRhYmFzZVRhYmxlX2dldFByb3RvdHlwZU9mIiwiU2VhcmNoX2RlZmF1bHQiLCJSZWZyZXNoX2RlZmF1bHQiLCJTb3J0X2RlZmF1bHQiLCJyb3ciLCJjb3VudEFjdGl2ZSIsImNvbHVtbiIsInJvd3NJbmRleCIsInJvd3NLZXkiLCJyb3dJbmRleCIsInJvd0tleSIsImNyZWF0ZURhdGEiLCJrb3RhIiwidGFuZ2dhbFJlZ2lzdHJhc2kiLCJqdW1sYWhLb250ZW4iLCJuYW1hS29udGVuIiwiUHJvbW90b3JEYXRhYmFzZVNjcmVlbiIsIlByb21vdG9yRGF0YWJhc2VTY3JlZW5fY2xhc3NDYWxsQ2hlY2siLCJQcm9tb3RvckRhdGFiYXNlU2NyZWVuX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tb3RvckRhdGFiYXNlU2NyZWVuX2dldFByb3RvdHlwZU9mIiwiQ29tcG9uZW50c19BZG1pbkRhdGFiYXNlVGFibGVfQWRtaW5EYXRhYmFzZVRhYmxlIiwianVtbGFoUHJvbW90b3IiLCJqdW1sYWhJa2xhbkFrdGlmIiwiU2VsbGVyRGF0YWJhc2VTY3JlZW4iLCJTZWxsZXJEYXRhYmFzZVNjcmVlbl9jbGFzc0NhbGxDaGVjayIsIlNlbGxlckRhdGFiYXNlU2NyZWVuX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTZWxsZXJEYXRhYmFzZVNjcmVlbl9nZXRQcm90b3R5cGVPZiIsIkxpbmVhclByb2dyZXNzX0xpbmVhclByb2dyZXNzIiwidmFsdWVCdWZmZXIiLCJkZXRlcm1pbmF0ZSIsInF1ZXJ5IiwiZGFzaGVkQ2xhc3MiLCJkYXNoZWQiLCJkYXNoZWRDb2xvclByaW1hcnkiLCJkYXNoZWRDb2xvclNlY29uZGFyeSIsImJhcjFDbGFzc05hbWUiLCJiYXIiLCJiYXIxSW5kZXRlcm1pbmF0ZSIsImJhckNvbG9yUHJpbWFyeSIsImJhckNvbG9yU2Vjb25kYXJ5IiwiYmFyMURldGVybWluYXRlIiwiYmFyMUJ1ZmZlciIsImJhcjJDbGFzc05hbWUiLCJiYXIySW5kZXRlcm1pbmF0ZSIsImJhcjJCdWZmZXIiLCJpbmxpbmVTdHlsZXMiLCJiYXIxIiwiYmFyMiIsIl90cmFuc2Zvcm0iLCJlc21fTGluZWFyUHJvZ3Jlc3NfTGluZWFyUHJvZ3Jlc3MiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImFuaW1hdGlvbkRlbGF5IiwiQGtleWZyYW1lcyBtdWktaW5kZXRlcm1pbmF0ZTEiLCI2MCUiLCJAa2V5ZnJhbWVzIG11aS1pbmRldGVybWluYXRlMiIsIkBrZXlmcmFtZXMgYnVmZmVyIiwidG9kYXkiLCJBZG1pbktvbnRlblZpcmFsVGFibGUiLCJBZG1pbktvbnRlblZpcmFsVGFibGVfY2xhc3NDYWxsQ2hlY2siLCJBZG1pbktvbnRlblZpcmFsVGFibGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkFkbWluS29udGVuVmlyYWxUYWJsZV9nZXRQcm90b3R5cGVPZiIsIndpdGhTZWFyY2hCb3giLCJzdGFydERhdGUiLCJkdXJhdGlvbl9zdGFydCIsImVuZERhdGUiLCJkdXJhdGlvbl9lbmQiLCJlbmREYXkiLCJnZXREYXRlIiwiZW5kTW9udGgiLCJnZXRNb250aCIsInByb2dyZXNzIiwic2VsbGVyIiwicmVmZXJyYWwiLCJnZXRGdWxsWWVhciIsIkRlbGV0ZV9kZWZhdWx0IiwiU3RvcF9kZWZhdWx0IiwiTW9yZV9kZWZhdWx0Iiwicm93c0RhdGEiLCJBZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuIiwiQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbl9jbGFzc0NhbGxDaGVjayIsIkFkbWluS2Vsb2xhS29udGVuVmlyYWxTY3JlZW5fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkFkbWluS2Vsb2xhS29udGVuVmlyYWxTY3JlZW5fZ2V0UHJvdG90eXBlT2YiLCJhY3RpdmVSb3dzIiwibm9uQWN0aXZlUm93cyIsIkNvbXBvbmVudHNfQWRtaW5Lb250ZW5WaXJhbFRhYmxlX0FkbWluS29udGVuVmlyYWxUYWJsZSIsIlNlbGxlckRhc2hib2FyZCIsIlNlbGxlckRhc2hib2FyZF9jbGFzc0NhbGxDaGVjayIsIlNlbGxlckRhc2hib2FyZF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU2VsbGVyRGFzaGJvYXJkX2dldFByb3RvdHlwZU9mIiwiQWRkX2RlZmF1bHQiLCJHcm91cEljb24iLCJHcmlkIiwiQnV0dG9uQmFzZSIsIkFwcCIsIkFwcF9jbGFzc0NhbGxDaGVjayIsIkFwcF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQXBwX2dldFByb3RvdHlwZU9mIiwiUmVhY3RET00iLCJzcmNfQXBwXzAiLCJnZXRFbGVtZW50QnlJZCIsIm5leHRDbGFzc2VzIiwibWFrZVN0eWxlc19tdWx0aUtleVN0b3JlIiwia2V5MSIsImtleTIiLCJzdWJDYWNoZSIsIm5lc3RlZCIsInBzZXVkb0NsYXNzZXMiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJqc3NfcGx1Z2luX3J1bGVfdmFsdWVfZnVuY3Rpb25fZXNtIiwianNzX2VzbSIsImZuVmFsdWVzIiwiZm5SdWxlIiwiYXRQcmVmaXgiLCJqc3NfcGx1Z2luX2dsb2JhbF9lc21fR2xvYmFsQ29udGFpbmVyUnVsZSIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJqc3NfcGx1Z2luX2dsb2JhbF9lc21fR2xvYmFsUHJlZml4ZWRSdWxlIiwiR2xvYmFsUHJlZml4ZWRSdWxlIiwic2VwYXJhdG9yUmVnRXhwIiwiYWRkU2NvcGUiLCJqc3NfcGx1Z2luX2dsb2JhbF9lc20iLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwianNzX3BsdWdpbl9uZXN0ZWRfZXNtX3NlcGFyYXRvclJlZ0V4cCIsInBhcmVudFJlZ0V4cCIsImpzc19wbHVnaW5fbmVzdGVkX2VzbSIsImdldFJlcGxhY2VSZWYiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwibmVzdGVkU2VsZWN0b3JzIiwiZ2V0T3B0aW9ucyIsIm5lc3RpbmdMZXZlbCIsImlzTmVzdGVkIiwiaXNOZXN0ZWRDb25kaXRpb25hbCIsInVwcGVyY2FzZVBhdHRlcm4iLCJtc1BhdHRlcm4iLCJ0b0h5cGhlbkxvd2VyIiwiaHlwaGVuYXRlX3N0eWxlX25hbWUiLCJoTmFtZSIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwianNzX3BsdWdpbl9jYW1lbF9jYXNlX2VzbSIsImh5cGhlbmF0ZWRQcm9wIiwicHgiLCJtcyIsInBlcmNlbnQiLCJhZGRDYW1lbENhc2VkVmVyc2lvbiIsInJlZ0V4cCIsInVuaXRzIiwiYW5pbWF0aW9uLWRlbGF5IiwiYW5pbWF0aW9uLWR1cmF0aW9uIiwiYmFja2dyb3VuZC1wb3NpdGlvbiIsImJhY2tncm91bmQtcG9zaXRpb24teCIsImJhY2tncm91bmQtcG9zaXRpb24teSIsImJhY2tncm91bmQtc2l6ZSIsImJvcmRlci1ib3R0b20iLCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzIiwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMiLCJib3JkZXItYm90dG9tLXdpZHRoIiwiYm9yZGVyLWxlZnQiLCJib3JkZXItbGVmdC13aWR0aCIsImJvcmRlci1yYWRpdXMiLCJib3JkZXItcmlnaHQiLCJib3JkZXItcmlnaHQtd2lkdGgiLCJib3JkZXItdG9wIiwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyIsImJvcmRlci10b3AtcmlnaHQtcmFkaXVzIiwiYm9yZGVyLXRvcC13aWR0aCIsImJvcmRlci13aWR0aCIsIm1hcmdpbi1ib3R0b20iLCJtYXJnaW4tbGVmdCIsIm1hcmdpbi1yaWdodCIsIm1hcmdpbi10b3AiLCJwYWRkaW5nLWJvdHRvbSIsInBhZGRpbmctbGVmdCIsInBhZGRpbmctcmlnaHQiLCJwYWRkaW5nLXRvcCIsIm1hc2stcG9zaXRpb24teCIsIm1hc2stcG9zaXRpb24teSIsIm1hc2stc2l6ZSIsIm1pbi1oZWlnaHQiLCJtYXgtaGVpZ2h0IiwibWluLXdpZHRoIiwibWF4LXdpZHRoIiwiYm94LXNoYWRvdyIsInRleHQtc2hhZG93IiwiY29sdW1uLWdhcCIsImNvbHVtbi1ydWxlIiwiY29sdW1uLXJ1bGUtd2lkdGgiLCJjb2x1bW4td2lkdGgiLCJmb250LXNpemUiLCJmb250LXNpemUtZGVsdGEiLCJsZXR0ZXItc3BhY2luZyIsInRleHQtaW5kZW50IiwidGV4dC1zdHJva2UiLCJ0ZXh0LXN0cm9rZS13aWR0aCIsIndvcmQtc3BhY2luZyIsIm1vdGlvbiIsIm1vdGlvbi1vZmZzZXQiLCJvdXRsaW5lLW9mZnNldCIsIm91dGxpbmUtd2lkdGgiLCJwZXJzcGVjdGl2ZSIsInBlcnNwZWN0aXZlLW9yaWdpbi14IiwicGVyc3BlY3RpdmUtb3JpZ2luLXkiLCJ0cmFuc2Zvcm0tb3JpZ2luIiwidHJhbnNmb3JtLW9yaWdpbi14IiwidHJhbnNmb3JtLW9yaWdpbi15IiwidHJhbnNmb3JtLW9yaWdpbi16IiwidHJhbnNpdGlvbi1kZWxheSIsInRyYW5zaXRpb24tZHVyYXRpb24iLCJ2ZXJ0aWNhbC1hbGlnbiIsImZsZXgtYmFzaXMiLCJzaGFwZS1tYXJnaW4iLCJncmlkIiwiZ3JpZC1nYXAiLCJncmlkLXJvdy1nYXAiLCJncmlkLWNvbHVtbi1nYXAiLCJncmlkLXRlbXBsYXRlLXJvd3MiLCJncmlkLXRlbXBsYXRlLWNvbHVtbnMiLCJncmlkLWF1dG8tcm93cyIsImdyaWQtYXV0by1jb2x1bW5zIiwiYm94LXNoYWRvdy14IiwiYm94LXNoYWRvdy15IiwiYm94LXNoYWRvdy1ibHVyIiwiYm94LXNoYWRvdy1zcHJlYWQiLCJmb250LWxpbmUtaGVpZ2h0IiwidGV4dC1zaGFkb3cteCIsInRleHQtc2hhZG93LXkiLCJ0ZXh0LXNoYWRvdy1ibHVyIiwiaXRlcmF0ZSIsImlubmVyUHJvcCIsIl9pbm5lclByb3AiLCJqc3NfcGx1Z2luX2RlZmF1bHRfdW5pdF9lc20iLCJjYW1lbENhc2VkT3B0aW9ucyIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJqcyIsInZlbmRvciIsImlzVG91Y2giLCJkaXN0X21vZHVsZSIsImpzQ3NzTWFwIiwiTW96IiwiV2Via2l0IiwiY3NzX3ZlbmRvcl9lc21fc3R5bGUiLCJjc3NfdmVuZG9yX2VzbV9rZXkiLCJjc3NfdmVuZG9yX2VzbV9wcmVmaXgiLCJhcHBlYXJlbmNlIiwibm9QcmVmaWxsIiwic3VwcG9ydGVkUHJvcGVydHkiLCJ0b1VwcGVyIiwiY2FtZWxpemUiLCJwYXNjYWxpemUiLCJicmVha1Byb3BzT2xkIiwiY29sb3JBZGp1c3QiLCJwcm9wTWFwIiwiZmxleC1ncm93IiwiZmxleC1kaXJlY3Rpb24iLCJhbGlnbi1pdGVtcyIsImZsZXgtZmxvdyIsImp1c3RpZnktY29udGVudCIsInByb3BLZXlzIiwicHJlZml4Q3NzIiwicHJvcE1hcCQxIiwiZmxleC1zaHJpbmsiLCJhbGlnbi1jb250ZW50IiwibmV3UHJvcCIsInBhc2NhbGl6ZWQiLCJwcm9wZXJ0eURldGVjdG9ycyIsImNzc192ZW5kb3JfZXNtX2NhY2hlIiwiY29tcHV0ZWQiLCJrZXkkMSIsImVsJDEiLCJ0cmFuc2l0aW9uUHJvcGVydGllcyIsInRyYW5zaXRpb24tcHJvcGVydHkiLCItd2Via2l0LXRyYW5zaXRpb24iLCItd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHkiLCJ0cmFuc1Byb3BzUmVnRXhwIiwicHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrIiwicDEiLCJwMiIsInN1cHBvcnRlZFZhbHVlIiwicHJlZml4ZWRWYWx1ZSIsImpzc19wbHVnaW5fdmVuZG9yX3ByZWZpeGVyX2VzbSIsImF0UnVsZSIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwiY2hhbmdlVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSQkMSIsImpzc19wbHVnaW5fcHJvcHNfc29ydF9lc20iLCJzb3J0IiwicHJvcDAiLCJwcm9wMSIsImluamVjdEZpcnN0Tm9kZSIsImpzc1ByZXNldF9qc3NQcmVzZXQiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVHZW5lcmF0aW9uIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJfb3B0aW9ucyRkaXNhYmxlR2xvYmEiLCJkaXNhYmxlR2xvYmFsIiwiX29wdGlvbnMkcHJvZHVjdGlvblByIiwicHJvZHVjdGlvblByZWZpeCIsIl9vcHRpb25zJHNlZWQiLCJzZWVkIiwic2VlZFByZWZpeCIsImNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIiwic2hlZXRzQ2FjaGUiLCJzaGVldHNNYW5hZ2VyIiwic2hlZXRzUmVnaXN0cnkiLCJTdHlsZXNDb250ZXh0IiwiU3R5bGVzUHJvdmlkZXIiLCJpbmplY3RGaXJzdCIsImxvY2FsT3B0aW9ucyIsIm91dGVyT3B0aW9ucyIsImNyZWF0ZUNvbW1lbnQiLCJpbmRleENvdW50ZXIiLCJnZXRTdHlsZXNDcmVhdG9yX2dldFN0eWxlc0NyZWF0b3IiLCJ0aGVtaW5nRW5hYmxlZCIsInN0eWxlc1dpdGhPdmVycmlkZXMiLCJnZXRTdHlsZXNDcmVhdG9yX25vb3BUaGVtZSIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwic3R5bGVzQ3JlYXRvciIsImxpc3RlblRvVGhlbWUiLCJjdXJyZW50S2V5Iiwic2hvdWxkVXBkYXRlIiwiX3JlZjIiLCJzaGVldE1hbmFnZXIiLCJzdGF0aWNTaGVldCIsImR5bmFtaWNTdHlsZXMiLCJzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSIsImR5bmFtaWNTaGVldCIsIl9yZWY0IiwiX3JlZjMiLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJnZW5lcmF0ZSIsImdldENsYXNzZXMiLCJ1c2VUaGVtZV9UaGVtZUNvbnRleHQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVB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QU1BLElBQUFDLEdBQUEsRUFvQkEsT0FsQkF0cEUsRUFBQXhsRCxVQUFBd2xELEVBQUFtcEUsYUFBQUUsVUFDQXJwRSxFQUFBbXBFLGFBQUFFLFFBQUFycEUsRUFBQXhsRCxRQUNBOHVILEdBQUEsR0FHQTl1SCxJQUFBd2xELEVBQUFtcEUsYUFBQUMsV0FDQXBwRSxFQUFBbXBFLGFBQUFDLFNBQUE1dUgsRUFDQTh1SCxHQUFBLEdBR0FBLElBQ0F0cEUsRUFBQW1wRSxhQUFBMXlILE1BQStCUCxPQUFBc3ZHLEVBQUEsRUFBQXR2RyxDQUFZLENBQzNDdXZHLFlBQUF6bEQsRUFBQW1wRSxhQUFBRSxRQUNBM2pCLFdBQUFsckcsRUFDQWhCLGVBSUF3bUQsRUFBQW1wRSxhQUFBMXlILE1Bb01BOHlILENBQUFyeUcsRUFBQWlmLFFBQUFsOUIsRUFBQXVCLFFBQUFoQix1REN4UGVnd0gsRUFESXB2SCxFQUFBQyxFQUFLbTZCLGNBQUEsTUNDVCxTQUFBNTVCLElBQ2YsT0FBU1IsRUFBQUMsRUFBS3krQixXQUFZMHdGLEdBSDFCcDBILEVBQUFVLEVBQUE4QyxFQUFBLHNCQUFBZ0MiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5OCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cdGlmIChtaXgpIHtcblx0XHRpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGlmICghIW1peC5wdXNoKSB7XG5cdFx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0aWYgKG1peFtrXSAmJiAoeSA9IHRvVmFsKG1peFtrXSkpKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdFx0aWYgKG1peFtrXSAmJiAoeSA9IHRvVmFsKGspKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG1peCAhPT0gJ2Jvb2xlYW4nICYmICFtaXguY2FsbCkge1xuXHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdHN0ciArPSBtaXg7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAoeCA9IHRvVmFsKGFyZ3VtZW50c1tpKytdKSkge1xuXHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdHN0ciArPSB4XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lLFxuICAgICAgcHJvcHMgPSBwYXJhbXMucHJvcHM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lUHJvcHM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgbWFrZVN0eWxlcyBmcm9tICcuLi9tYWtlU3R5bGVzJztcbmltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4uL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJzsgLy8gTGluayBhIHN0eWxlIHNoZWV0IHdpdGggYSBjb21wb25lbnQuXG4vLyBJdCBkb2VzIG5vdCBtb2RpZnkgdGhlIGNvbXBvbmVudCBwYXNzZWQgdG8gaXQ7XG4vLyBpbnN0ZWFkLCBpdCByZXR1cm5zIGEgbmV3IGNvbXBvbmVudCwgd2l0aCBhIGBjbGFzc2VzYCBwcm9wZXJ0eS5cblxudmFyIHdpdGhTdHlsZXMgPSBmdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgdmFyIGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgICBfb3B0aW9ucyR3aXRoVGhlbWUgPSBvcHRpb25zLndpdGhUaGVtZSxcbiAgICAgICAgd2l0aFRoZW1lID0gX29wdGlvbnMkd2l0aFRoZW1lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHdpdGhUaGVtZSxcbiAgICAgICAgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgICAgc3R5bGVzT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJkZWZhdWx0VGhlbWVcIiwgXCJ3aXRoVGhlbWVcIiwgXCJuYW1lXCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgd2l0aFN0eWxlcyhzdHlsZXMpKENvbXBvbmVudCkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbmFtZSkge1xuICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICBpZiAoZGlzcGxheU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBXaXRoU3R5bGVzID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMocHJvcHMpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgcmVmLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9LCBtb3JlKSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiB0aGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCB7IHdpdGhTdHlsZXMgYXMgd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJzsgLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC4nKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG4vKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmdW5jKSB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nLCAnTWF0ZXJpYWwtVUk6IGludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgZnVuY3Rpb24gKCkge30pO1xufSIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cblxuZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4LCBcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpIDogdm9pZCAwO1xuXG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggLyAzLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiKFwiLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KG4sIDE2KTtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICB2YXIgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHJldHVybiBcIiNcIi5jb25jYXQodmFsdWVzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBpbnRUb0hleChuKTtcbiAgfSkuam9pbignJykpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciBfY29sb3IgPSBjb2xvcixcbiAgICAgIHZhbHVlcyA9IF9jb2xvci52YWx1ZXM7XG4gIHZhciBoID0gdmFsdWVzWzBdO1xuICB2YXIgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgdmFyIGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIHZhciBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIGYobikge1xuICAgIHZhciBrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAobiArIGggLyAzMCkgJSAxMjtcbiAgICByZXR1cm4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIH07XG5cbiAgdmFyIHR5cGUgPSAncmdiJztcbiAgdmFyIHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihbXCJNYXRlcmlhbC1VSTogdW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlwiKSwgJ1dlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSkuc3BsaXQoJywnKTtcbiAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiB2YWx1ZXNcbiAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgdmFyIHR5cGUgPSBjb2xvci50eXBlO1xuICB2YXIgdmFsdWVzID0gY29sb3IudmFsdWVzO1xuXG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICByZXR1cm4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gXCJcIi5jb25jYXQodmFsdWVzWzFdLCBcIiVcIik7XG4gICAgdmFsdWVzWzJdID0gXCJcIi5jb25jYXQodmFsdWVzWzJdLCBcIiVcIik7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZSwgXCIoXCIpLmNvbmNhdCh2YWx1ZXMuam9pbignLCAnKSwgXCIpXCIpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6IE1hdGgucG93KCh2YWwgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvcikge1xuICB2YXIgY29lZmZpY2llbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDAuMTU7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG4vKipcbiAqIFNldCB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLTFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cblxuXG5mdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufVxuXG4vKipcbiAqIEluZGVudCBhIHN0cmluZy5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5LWpvaW4tdnMtZm9yXG4gKi9cbmZ1bmN0aW9uIGluZGVudFN0cihzdHIsIGluZGVudCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGluZGVudDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCArPSAnICAnO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHN0cjtcbn1cbi8qKlxuICogQ29udmVydHMgYSBSdWxlIHRvIENTUyBzdHJpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiB0b0NzcyhzZWxlY3Rvciwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKCFzdHlsZSkgcmV0dXJuIHJlc3VsdDtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJGluZGVudCA9IF9vcHRpb25zLmluZGVudCxcbiAgICAgIGluZGVudCA9IF9vcHRpb25zJGluZGVudCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGluZGVudDtcbiAgdmFyIGZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcztcbiAgaWYgKHNlbGVjdG9yKSBpbmRlbnQrKzsgLy8gQXBwbHkgZmFsbGJhY2tzIGZpcnN0LlxuXG4gIGlmIChmYWxsYmFja3MpIHtcbiAgICAvLyBBcnJheSBzeW50YXgge2ZhbGxiYWNrczogW3twcm9wOiB2YWx1ZX1dfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1tpbmRleF07XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBmYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGZhbGxiYWNrW3Byb3BdO1xuXG4gICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKHByb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKHZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3Qgc3ludGF4IHtmYWxsYmFja3M6IHtwcm9wOiB2YWx1ZX19XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBmYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGZhbGxiYWNrc1tfcHJvcF07XG5cbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKF9wcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfcHJvcDIgaW4gc3R5bGUpIHtcbiAgICB2YXIgX3ZhbHVlMiA9IHN0eWxlW19wcm9wMl07XG5cbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgIHJlc3VsdCArPSBcIlwiICsgaW5kZW50U3RyKF9wcm9wMiArIFwiOiBcIiArIHRvQ3NzVmFsdWUoX3ZhbHVlMikgKyBcIjtcIiwgaW5kZW50KTtcbiAgICB9XG4gIH0gLy8gQWxsb3cgZW1wdHkgc3R5bGUgaW4gdGhpcyBjYXNlLCBiZWNhdXNlIHByb3BlcnRpZXMgd2lsbCBiZSBhZGRlZCBkeW5hbWljYWxseS5cblxuXG4gIGlmICghcmVzdWx0ICYmICFvcHRpb25zLmFsbG93RW1wdHkpIHJldHVybiByZXN1bHQ7IC8vIFdoZW4gcnVsZSBpcyBiZWluZyBzdHJpbmdpZmllZCBiZWZvcmUgc2VsZWN0b3Igd2FzIGRlZmluZWQuXG5cbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuIHJlc3VsdDtcbiAgaW5kZW50LS07XG4gIGlmIChyZXN1bHQpIHJlc3VsdCA9IFwiXFxuXCIgKyByZXN1bHQgKyBcIlxcblwiO1xuICByZXR1cm4gaW5kZW50U3RyKHNlbGVjdG9yICsgXCIge1wiICsgcmVzdWx0LCBpbmRlbnQpICsgaW5kZW50U3RyKCd9JywgaW5kZW50KTtcbn1cblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BcXHNdKS9nO1xudmFyIG5hdGl2ZUVzY2FwZSA9IHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIENTUy5lc2NhcGU7XG52YXIgZXNjYXBlID0gKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIG5hdGl2ZUVzY2FwZSA/IG5hdGl2ZUVzY2FwZShzdHIpIDogc3RyLnJlcGxhY2UoZXNjYXBlUmVnZXgsICdcXFxcJDEnKTtcbn0pO1xuXG52YXIgQmFzZVN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdzdHlsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHZhciBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIFJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcjtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICBpZiAoc2hlZXQpIHRoaXMucmVuZGVyZXIgPSBzaGVldC5yZW5kZXJlcjtlbHNlIGlmIChSZW5kZXJlcikgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEJhc2VTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5wcm9wID0gZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIC8vIEl0J3MgYSBnZXR0ZXIuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLnN0eWxlW25hbWVdOyAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB0aGUgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLlxuXG4gICAgdmFyIGZvcmNlID0gb3B0aW9ucyA/IG9wdGlvbnMuZm9yY2UgOiBmYWxzZTtcbiAgICBpZiAoIWZvcmNlICYmIHRoaXMuc3R5bGVbbmFtZV0gPT09IHZhbHVlKSByZXR1cm4gdGhpcztcbiAgICB2YXIgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnByb2Nlc3MgIT09IGZhbHNlKSB7XG4gICAgICBuZXdWYWx1ZSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vbkNoYW5nZVZhbHVlKHZhbHVlLCBuYW1lLCB0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgaXNFbXB0eSA9IG5ld1ZhbHVlID09IG51bGwgfHwgbmV3VmFsdWUgPT09IGZhbHNlO1xuICAgIHZhciBpc0RlZmluZWQgPSBuYW1lIGluIHRoaXMuc3R5bGU7IC8vIFZhbHVlIGlzIGVtcHR5IGFuZCB3YXNuJ3QgZGVmaW5lZCBiZWZvcmUuXG5cbiAgICBpZiAoaXNFbXB0eSAmJiAhaXNEZWZpbmVkICYmICFmb3JjZSkgcmV0dXJuIHRoaXM7IC8vIFdlIGFyZSBnb2luZyB0byByZW1vdmUgdGhpcyB2YWx1ZS5cblxuICAgIHZhciByZW1vdmUgPSBpc0VtcHR5ICYmIGlzRGVmaW5lZDtcbiAgICBpZiAocmVtb3ZlKSBkZWxldGUgdGhpcy5zdHlsZVtuYW1lXTtlbHNlIHRoaXMuc3R5bGVbbmFtZV0gPSBuZXdWYWx1ZTsgLy8gUmVuZGVyYWJsZSBpcyBkZWZpbmVkIGlmIFN0eWxlU2hlZXQgb3B0aW9uIGBsaW5rYCBpcyB0cnVlLlxuXG4gICAgaWYgKHRoaXMucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICBpZiAocmVtb3ZlKSB0aGlzLnJlbmRlcmVyLnJlbW92ZVByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSk7ZWxzZSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSwgbmV3VmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LmF0dGFjaGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gUnVsZSBpcyBub3QgbGlua2VkLiBNaXNzaW5nIHNoZWV0IG9wdGlvbiBcImxpbms6IHRydWVcIi4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gQmFzZVN0eWxlUnVsZTtcbn0oKTtcbnZhciBTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CYXNlU3R5bGVSdWxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0eWxlUnVsZSwgX0Jhc2VTdHlsZVJ1bGUpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQmFzZVN0eWxlUnVsZS5jYWxsKHRoaXMsIGtleSwgc3R5bGUsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gdm9pZCAwO1xuICAgIF90aGlzLmlkID0gdm9pZCAwO1xuICAgIF90aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIHNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvcixcbiAgICAgICAgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgfSBlbHNlIGlmIChzY29wZWQgIT09IGZhbHNlKSB7XG4gICAgICBfdGhpcy5pZCA9IGdlbmVyYXRlSWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIHNoZWV0KTtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IFwiLlwiICsgZXNjYXBlKF90aGlzLmlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RvciBzdHJpbmcuXG4gICAqIEF0dGVudGlvbjogdXNlIHRoaXMgd2l0aCBjYXV0aW9uLiBNb3N0IGJyb3dzZXJzIGRpZG4ndCBpbXBsZW1lbnRcbiAgICogc2VsZWN0b3JUZXh0IHNldHRlciwgc28gdGhpcyBtYXkgcmVzdWx0IGluIHJlcmVuZGVyaW5nIG9mIGVudGlyZSBTdHlsZSBTaGVldC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvMiA9IFN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEFwcGx5IHJ1bGUgdG8gYW4gZWxlbWVudCBpbmxpbmUuXG4gICAqL1xuICBfcHJvdG8yLmFwcGx5VG8gPSBmdW5jdGlvbiBhcHBseVRvKHJlbmRlcmFibGUpIHtcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICB2YXIganNvbiA9IHRoaXMudG9KU09OKCk7XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4ganNvbikge1xuICAgICAgICByZW5kZXJlci5zZXRQcm9wZXJ0eShyZW5kZXJhYmxlLCBwcm9wLCBqc29uW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBydWxlLlxuICAgKiBGYWxsYmFja3MgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAqIFVzZWZ1bCBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIganNvbiA9IHt9O1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLnN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnN0eWxlW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIGpzb25bcHJvcF0gPSB2YWx1ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkganNvbltwcm9wXSA9IHRvQ3NzVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBqc29uO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgIH0pIDogb3B0aW9ucztcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5zZWxlY3RvclRleHQsIHRoaXMuc3R5bGUsIG9wdHMpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTdHlsZVJ1bGUsIFt7XG4gICAga2V5OiBcInNlbGVjdG9yXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gdGhpcy5zZWxlY3RvclRleHQpIHJldHVybjtcbiAgICAgIHRoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyLFxuICAgICAgICAgIHJlbmRlcmFibGUgPSB0aGlzLnJlbmRlcmFibGU7XG4gICAgICBpZiAoIXJlbmRlcmFibGUgfHwgIXJlbmRlcmVyKSByZXR1cm47XG4gICAgICB2YXIgaGFzQ2hhbmdlZCA9IHJlbmRlcmVyLnNldFNlbGVjdG9yKHJlbmRlcmFibGUsIHNlbGVjdG9yKTsgLy8gSWYgc2VsZWN0b3Igc2V0dGVyIGlzIG5vdCBpbXBsZW1lbnRlZCwgcmVyZW5kZXIgdGhlIHJ1bGUuXG5cbiAgICAgIGlmICghaGFzQ2hhbmdlZCkge1xuICAgICAgICByZW5kZXJlci5yZXBsYWNlUnVsZShyZW5kZXJhYmxlLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICAgKi9cbiAgICAsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclRleHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0eWxlUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luU3R5bGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChuYW1lWzBdID09PSAnQCcgfHwgb3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3R5bGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRUb1N0cmluZ09wdGlvbnMgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgYXRSZWdFeHAgPSAvQChbXFx3LV0rKS87XG4vKipcbiAqIENvbmRpdGlvbmFsIHJ1bGUgZm9yIEBtZWRpYSwgQHN1cHBvcnRzXG4gKi9cblxudmFyIENvbmRpdGlvbmFsUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdjb25kaXRpb25hbCc7XG4gICAgdGhpcy5hdCA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHZhciBhdE1hdGNoID0ga2V5Lm1hdGNoKGF0UmVnRXhwKTtcbiAgICB0aGlzLmF0ID0gYXRNYXRjaCA/IGF0TWF0Y2hbMV0gOiAndW5rbm93bic7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQ29uZGl0aW9uYWxSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5rZXkgKyBcIiB7XFxuXCIgKyBjaGlsZHJlbiArIFwiXFxufVwiIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIENvbmRpdGlvbmFsUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAgPSAvQG1lZGlhfEBzdXBwb3J0c1xccysvO1xudmFyIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5UmVnRXhwLnRlc3Qoa2V5KSA/IG5ldyBDb25kaXRpb25hbFJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMSA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBuYW1lUmVnRXhwID0gL0BrZXlmcmFtZXNcXHMrKFtcXHctXSspLztcbi8qKlxuICogUnVsZSBmb3IgQGtleWZyYW1lc1xuICovXG5cbnZhciBLZXlmcmFtZXNSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdrZXlmcmFtZXMnO1xuICAgIHRoaXMuYXQgPSAnQGtleWZyYW1lcyc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5uYW1lID0gdm9pZCAwO1xuICAgIHRoaXMuaWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgbmFtZU1hdGNoID0ga2V5Lm1hdGNoKG5hbWVSZWdFeHApO1xuXG4gICAgaWYgKG5hbWVNYXRjaCAmJiBuYW1lTWF0Y2hbMV0pIHtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWVNYXRjaFsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uYW1lID0gJ25vbmFtZSc7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEJhZCBrZXlmcmFtZXMgbmFtZSBcIiArIGtleSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdGhpcy5rZXkgPSB0aGlzLnR5cGUgKyBcIi1cIiArIHRoaXMubmFtZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuICAgIHRoaXMuaWQgPSBzY29wZWQgPT09IGZhbHNlID8gdGhpcy5uYW1lIDogZXNjYXBlKGdlbmVyYXRlSWQodGhpcywgc2hlZXQpKTtcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGZyYW1lcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgZnJhbWVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICBwYXJlbnQ6IHRoaXNcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVzUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDE7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdCArIFwiIFwiICsgdGhpcy5pZCArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICBpZiAoY2hpbGRyZW4pIGNoaWxkcmVuID0gXCJcXG5cIiArIGNoaWxkcmVuICsgXCJcXG5cIjtcbiAgICByZXR1cm4gdGhpcy5hdCArIFwiIFwiICsgdGhpcy5pZCArIFwiIHtcIiArIGNoaWxkcmVuICsgXCJ9XCI7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lc1J1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDEgPSAvQGtleWZyYW1lc1xccysvO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcblxudmFyIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUgPSBmdW5jdGlvbiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwga2V5ZnJhbWVzKSB7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWwucmVwbGFjZShyZWZSZWdFeHAsIGZ1bmN0aW9uIChtYXRjaCwgbmFtZSkge1xuICAgICAgaWYgKG5hbWUgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgIHJldHVybiBrZXlmcmFtZXNbbmFtZV07XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gUmVmZXJlbmNlZCBrZXlmcmFtZXMgcnVsZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59O1xuLyoqXG4gKiBSZXBsYWNlIHRoZSByZWZlcmVuY2UgZm9yIGEgYW5pbWF0aW9uIG5hbWUuXG4gKi9cblxuXG52YXIgcmVwbGFjZVJlZiA9IGZ1bmN0aW9uIHJlcGxhY2VSZWYoc3R5bGUsIHByb3AsIGtleWZyYW1lcykge1xuICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgdmFyIHJlZktleWZyYW1lID0gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWx1ZSwga2V5ZnJhbWVzKTtcblxuICBpZiAocmVmS2V5ZnJhbWUgIT09IHZhbHVlKSB7XG4gICAgc3R5bGVbcHJvcF0gPSByZWZLZXlmcmFtZTtcbiAgfVxufTtcblxudmFyIHBsdWdpbiA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5UmVnRXhwJDEudGVzdChrZXkpID8gbmV3IEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIDogbnVsbDtcbiAgfSxcbiAgLy8gQW5pbWF0aW9uIG5hbWUgcmVmIHJlcGxhY2VyLlxuICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJyB8fCAhc2hlZXQpIHJldHVybiBzdHlsZTtcbiAgICBpZiAoJ2FuaW1hdGlvbi1uYW1lJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbi1uYW1lJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICBpZiAoJ2FuaW1hdGlvbicgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24nLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcbiAgb25DaGFuZ2VWYWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWwsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoIXNoZWV0KSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBjYXNlICdhbmltYXRpb24tbmFtZSc6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBLZXlmcmFtZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CYXNlU3R5bGVSdWxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKEtleWZyYW1lUnVsZSwgX0Jhc2VTdHlsZVJ1bGUpO1xuXG4gIGZ1bmN0aW9uIEtleWZyYW1lUnVsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfQmFzZVN0eWxlUnVsZS5jYWxsLmFwcGx5KF9CYXNlU3R5bGVSdWxlLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lUnVsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgIH0pIDogb3B0aW9ucztcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdHMpO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpbktleWZyYW1lUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG5ldyBLZXlmcmFtZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbnZhciBGb250RmFjZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdmb250LWZhY2UnO1xuICAgIHRoaXMuYXQgPSAnQGZvbnQtZmFjZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRm9udEZhY2VSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zdHlsZSkpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0ciArPSB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAZm9udC1mYWNlJyA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2UgbmVlZCB0byBzYXZlIHRoZSBvcmlnaW5hbCBkZWNsIGJlZm9yZSBjcmVhdGluZyB0aGUgcnVsZVxuICAgIC8vIGJlY2F1c2UgY2FjaGUgcGx1Z2luIG5lZWRzIHRvIHVzZSBpdCBhcyBhIGtleSB0byByZXR1cm4gYSBjYWNoZWQgcnVsZS5cblxuXG4gICAgdGhpcy5yYXdba2V5XSA9IGRlY2w7XG5cbiAgICBpZiAoa2V5IGluIHRoaXMuY2xhc3Nlcykge1xuICAgICAgLy8gRm9yIGUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyQkMSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zJCQxLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMkJDEpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgIGFuZCBgLmNsYXNzZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVcblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLm9uVXBkYXRlKGRhdGEsIHRoaXMuZ2V0KG5hbWUpLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMub25VcGRhdGUoZGF0YSwgdGhpcy5pbmRleFtpbmRleF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBwbHVnaW5zLCB1cGRhdGUgcnVsZSBwcm9wcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25VcGRhdGUgPSBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyQkMSA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zJCQxLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMkJDEub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcnVsZS5zdHlsZSA9IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGVbaV0ocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU2hlZXRgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTaGVldCA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1NoZWV0KHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1NoZWV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1NoZWV0W2ldKHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uVXBkYXRlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25VcGRhdGUgPSBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblVwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblVwZGF0ZVtpXShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvbkNoYW5nZVZhbHVlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25DaGFuZ2VWYWx1ZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9jZXNzZWRWYWx1ZSA9IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZVtpXShwcm9jZXNzZWRWYWx1ZSwgcHJvcCwgcnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKG5ld1BsdWdpbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHF1ZXVlOiAnZXh0ZXJuYWwnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBwbHVnaW5zID0gdGhpcy5wbHVnaW5zW29wdGlvbnMucXVldWVdOyAvLyBBdm9pZHMgYXBwbHlpbmcgc2FtZSBwbHVnaW4gdHdpY2UsIGF0IGxlYXN0IGJhc2VkIG9uIHJlZi5cblxuICAgIGlmIChwbHVnaW5zLmluZGV4T2YobmV3UGx1Z2luKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbHVnaW5zLnB1c2gobmV3UGx1Z2luKTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW10uY29uY2F0KHRoaXMucGx1Z2lucy5leHRlcm5hbCwgdGhpcy5wbHVnaW5zLmludGVybmFsKS5yZWR1Y2UoZnVuY3Rpb24gKHJlZ2lzdHJ5LCBwbHVnaW4pIHtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcGx1Z2luKSB7XG4gICAgICAgIGlmIChuYW1lIGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgICAgcmVnaXN0cnlbbmFtZV0ucHVzaChwbHVnaW5bbmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBob29rIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9LCB7XG4gICAgICBvbkNyZWF0ZVJ1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NTdHlsZTogW10sXG4gICAgICBvblByb2Nlc3NTaGVldDogW10sXG4gICAgICBvbkNoYW5nZVZhbHVlOiBbXSxcbiAgICAgIG9uVXBkYXRlOiBbXVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBQbHVnaW5zUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogU2hlZXRzIHJlZ2lzdHJ5IHRvIGFjY2VzcyB0aGVtIGFsbCBhdCBvbmUgcGxhY2UuXG4gKi9cbnZhciBTaGVldHNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c1JlZ2lzdHJ5KCkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKHNoZWV0KSB7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gdGhpcy5yZWdpc3RyeTtcbiAgICB2YXIgaW5kZXggPSBzaGVldC5vcHRpb25zLmluZGV4O1xuICAgIGlmIChyZWdpc3RyeS5pbmRleE9mKHNoZWV0KSAhPT0gLTEpIHJldHVybjtcblxuICAgIGlmIChyZWdpc3RyeS5sZW5ndGggPT09IDAgfHwgaW5kZXggPj0gdGhpcy5pbmRleCkge1xuICAgICAgcmVnaXN0cnkucHVzaChzaGVldCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGaW5kIGEgcG9zaXRpb24uXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWdpc3RyeVtpXS5vcHRpb25zLmluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgcmVnaXN0cnkuc3BsaWNlKGksIDAsIHNoZWV0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVzZXQgdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShzaGVldCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMucmVnaXN0cnkuaW5kZXhPZihzaGVldCk7XG4gICAgdGhpcy5yZWdpc3RyeS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IGFsbCBhdHRhY2hlZCBzaGVldHMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5maWx0ZXIoZnVuY3Rpb24gKHNoZWV0KSB7XG4gICAgICByZXR1cm4gc2hlZXQuYXR0YWNoZWQ7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgcmV0dXJuIHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH0pLmpvaW4oJ1xcbicpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNSZWdpc3RyeSwgW3tcbiAgICBrZXk6IFwiaW5kZXhcIixcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgaGlnaGVzdCBpbmRleCBudW1iZXIuXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5sZW5ndGggPT09IDAgPyAwIDogdGhpcy5yZWdpc3RyeVt0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCAtIDFdLm9wdGlvbnMuaW5kZXg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBnbG9iYWwgc2hlZXRzIHJlZ2lzdHJ5LiBPbmx5IERvbVJlbmRlcmVyIHdpbGwgYWRkIHNoZWV0cyB0byBpdC5cbiAqIE9uIHRoZSBzZXJ2ZXIgb25lIHNob3VsZCB1c2UgYW4gb3duIFNoZWV0c1JlZ2lzdHJ5IGluc3RhbmNlIGFuZCBhZGQgdGhlXG4gKiBzaGVldHMgdG8gaXQsIGJlY2F1c2UgeW91IG5lZWQgdG8gbWFrZSBzdXJlIHRvIGNyZWF0ZSBhIG5ldyByZWdpc3RyeSBmb3JcbiAqIGVhY2ggcmVxdWVzdCBpbiBvcmRlciB0byBub3QgbGVhayBzaGVldHMgYWNyb3NzIHJlcXVlc3RzLlxuICovXG5cbnZhciBzaGVldHMgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTtcblxudmFyIGdsb2JhbCQxID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOlxuICAgICAgICAgICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDpcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsJDFbbnNdID09IG51bGwpIGdsb2JhbCQxW25zXSA9IDA7IC8vIEJ1bmRsZSBtYXkgY29udGFpbiBtdWx0aXBsZSBKU1MgdmVyc2lvbnMgYXQgdGhlIHNhbWUgdGltZS4gSW4gb3JkZXIgdG8gaWRlbnRpZnlcbi8vIHRoZSBjdXJyZW50IHZlcnNpb24gd2l0aCBqdXN0IG9uZSBzaG9ydCBudW1iZXIgYW5kIHVzZSBpdCBmb3IgY2xhc3NlcyBnZW5lcmF0aW9uXG4vLyB3ZSB1c2UgYSBjb3VudGVyLiBBbHNvIGl0IGlzIG1vcmUgYWNjdXJhdGUsIGJlY2F1c2UgdXNlciBjYW4gbWFudWFsbHkgcmVldmFsdWF0ZVxuLy8gdGhlIG1vZHVsZS5cblxudmFyIG1vZHVsZUlkID0gZ2xvYmFsJDFbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgdmFyIGRlZmF1bHRQcmVmaXggPSBvcHRpb25zLm1pbmlmeSA/ICdjJyA6ICcnO1xuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcblxuICAgIGlmIChydWxlQ291bnRlciA+IG1heFJ1bGVzKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuIFJ1bGUgY291bnRlciBpcyBhdCBcIiArIHJ1bGVDb3VudGVyICsgXCIuXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBwcmVmaXggPSBkZWZhdWx0UHJlZml4O1xuICAgIHZhciBqc3NJZCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCB8fCBkZWZhdWx0UHJlZml4O1xuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIGpzc0lkICs9IHNoZWV0Lm9wdGlvbnMuanNzLmlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCAmJiBcIi1cIiArIGpzc0lkKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5cblxuZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5kZWxldGUocHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIERPTUV4Y2VwdGlvbiBcXFwiXCIgKyBlcnIubWVzc2FnZSArIFwiXFxcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXFxcIlwiICsgcHJvcCArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gIH1cbn1cbi8qKlxuICogU2V0IHRoZSBzZWxlY3Rvci5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYGhlYWRgIGVsZW1lbnQgdXBvbiB0aGUgZmlyc3QgY2FsbCBhbmQgY2FjaGVzIGl0LlxuICogV2UgYXNzdW1lIGl0IGNhbid0IGJlIG51bGwuXG4gKi9cblxuXG52YXIgZ2V0SGVhZCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xufSk7XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCBhbiBpbmRleCBoaWdoZXIgdGhhbiB0aGUgcGFzc2VkIG9uZS5cbiAqL1xuXG5mdW5jdGlvbiBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5kZXggPiBvcHRpb25zLmluZGV4ICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIHRoZSBoaWdoZXN0IGluZGV4LlxuICovXG5cblxuZnVuY3Rpb24gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gcmVnaXN0cnkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYSBjb21tZW50IHdpdGggXCJqc3NcIiBpbnNpZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kQ29tbWVudE5vZGUodGV4dCkge1xuICB2YXIgaGVhZCA9IGdldEhlYWQoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gaGVhZC5jaGlsZE5vZGVzW2ldO1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBiZWZvcmUgd2hpY2ggd2UgY2FuIGluc2VydCB0aGUgc2hlZXQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQcmV2Tm9kZShvcHRpb25zKSB7XG4gIHZhciByZWdpc3RyeSA9IHNoZWV0cy5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkubGVuZ3RoID4gMCkge1xuICAgIC8vIFRyeSB0byBpbnNlcnQgYmVmb3JlIHRoZSBuZXh0IGhpZ2hlciBzaGVldC5cbiAgICB2YXIgc2hlZXQgPSBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBJbnNlcnRpb24gcG9pbnQgXFxcIlwiICsgaW5zZXJ0aW9uUG9pbnQgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgdmFyIG5leHROb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChuZXh0Tm9kZSAhPT0gZmFsc2UgJiYgbmV4dE5vZGUucGFyZW50KSB7XG4gICAgbmV4dE5vZGUucGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dE5vZGUubm9kZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG5cblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cblxuXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIF9pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShjb250YWluZXIsIHJ1bGUsIGluZGV4KSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSBjb250YWluZXIuY3NzUnVsZXMubGVuZ3RoO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDYW4gbm90IGluc2VydCBhbiB1bnN1cHBvcnRlZCBydWxlIFxcblwiICsgcnVsZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHNoZWV0cy5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gYnJvd3NlcnMgcmVtb3ZlIHRob3NlIHJ1bGVzLlxuICAgIC8vIFRPRE8gZmlndXJlIG91dCBpZiBpdHMgYSBidWcgYW5kIGlmIGl0IGlzIGtub3duLlxuICAgIC8vIFdvcmthcm91bmQgaXMgdG8gcmVkZXBsb3kgdGhlIHNoZWV0LlxuXG4gICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcykge1xuICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgICB0aGlzLmRlcGxveSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHN0eWxlIGVsZW1lbnQgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlbmRlciB0aGUgY29udGFpbmVyIHdpdGhvdXQgY2hpbGRyZW4gZmlyc3QuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIGluZGV4KTtcblxuICAgICAgICBpZiAobGF0ZXN0TmF0aXZlUGFyZW50ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICBydWxlLnJlbmRlcmFibGUgPSBuYXRpdmVSdWxlO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgdmFyIGNzc1J1bGVzID0gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNzc1J1bGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGNzc1J1bGUgPT09IGNzc1J1bGVzW2luZGV4XSkgcmV0dXJuIGluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHJldHVybiB0aGlzLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIHJ1bGVzIGVsZW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG4gIH07XG5cbiAgcmV0dXJuIERvbVJlbmRlcmVyO1xufSgpO1xuXG52YXIgaW5zdGFuY2VDb3VudGVyID0gMDtcblxudmFyIEpzcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEpzcyhvcHRpb25zKSB7XG4gICAgdGhpcy5pZCA9IGluc3RhbmNlQ291bnRlcisrO1xuICAgIHRoaXMudmVyc2lvbiA9IFwiMTAuMC4wLWFscGhhLjE3XCI7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFBsdWdpbnNSZWdpc3RyeSgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGlkOiB7XG4gICAgICAgIG1pbmlmeTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBjcmVhdGVHZW5lcmF0ZUlkOiBjcmVhdGVHZW5lcmF0ZUlkLFxuICAgICAgUmVuZGVyZXI6IGlzSW5Ccm93c2VyID8gRG9tUmVuZGVyZXIgOiBudWxsLFxuICAgICAgcGx1Z2luczogW11cbiAgICB9O1xuICAgIHRoaXMuZ2VuZXJhdGVJZCA9IGNyZWF0ZUdlbmVyYXRlSWQoe1xuICAgICAgbWluaWZ5OiBmYWxzZVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBsdWdpbnMudXNlKHBsdWdpbnNbaV0sIHtcbiAgICAgICAgcXVldWU6ICdpbnRlcm5hbCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0dXAob3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXBhcmVzIHZhcmlvdXMgb3B0aW9ucywgYXBwbGllcyBwbHVnaW5zLlxuICAgKiBTaG91bGQgbm90IGJlIHVzZWQgdHdpY2Ugb24gdGhlIHNhbWUgaW5zdGFuY2UsIGJlY2F1c2UgdGhlcmUgaXMgbm8gcGx1Z2luc1xuICAgKiBkZWR1cGxpY2F0aW9uIGxvZ2ljLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBKc3MucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQ7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pZCA9IF9leHRlbmRzKHt9LCB0aGlzLm9wdGlvbnMuaWQsIG9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQgfHwgb3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUlkID0gdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQodGhpcy5vcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbnNlcnRpb25Qb2ludCAhPSBudWxsKSB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gICAgaWYgKCdSZW5kZXJlcicgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zLlJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcjtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG5cblxuICAgIGlmIChvcHRpb25zLnBsdWdpbnMpIHRoaXMudXNlLmFwcGx5KHRoaXMsIG9wdGlvbnMucGx1Z2lucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgICAgaW5kZXggPSBfb3B0aW9ucy5pbmRleDtcblxuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICBpbmRleCA9IHNoZWV0cy5pbmRleCA9PT0gMCA/IDAgOiBzaGVldHMuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHNoZWV0cy5yZW1vdmUoc2hlZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBydWxlIHdpdGhvdXQgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zJCQxID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2lucyQkMVtfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zJCQxLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBpbmRleCA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbmV4cG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQsIGNyZWF0ZSwgZ2V0RHluYW1pY1N0eWxlcywgdG9Dc3NWYWx1ZSwgY3JlYXRlUnVsZSwgU2hlZXRzUmVnaXN0cnksIFNoZWV0c01hbmFnZXIsIFJ1bGVMaXN0LCBzaGVldHMsIGNyZWF0ZUdlbmVyYXRlSWQgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVN2Z0ljb247XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uXCIpKTtcblxuZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSksIHBhdGgpO1xuICB9KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlwiLmNvbmNhdChkaXNwbGF5TmFtZSwgXCJJY29uXCIpO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBfU3ZnSWNvbi5kZWZhdWx0Lm11aU5hbWU7XG4gIHJldHVybiBDb21wb25lbnQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmRlZXBtZXJnZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cdHZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdFx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG5cdH07XG5cblx0ZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdFx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdFx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRcdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxuXHR9XG5cblx0Ly8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG5cdHZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5cdHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cblx0ZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxuXHR9XG5cblx0ZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cblx0fVxuXG5cdGZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0XHQ6IHZhbHVlXG5cdH1cblxuXHRmdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHRcdH0pXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykge1xuXHRcdGlmICghb3B0aW9ucy5jdXN0b21NZXJnZSkge1xuXHRcdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHRcdH1cblx0XHR2YXIgY3VzdG9tTWVyZ2UgPSBvcHRpb25zLmN1c3RvbU1lcmdlKGtleSk7XG5cdFx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG5cdH1cblxuXHRmdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRcdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRpZiAoIW9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuXHRcdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBkZXN0aW5hdGlvblxuXHR9XG5cblx0ZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRcdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXG5cdFx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdFx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdFx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdFx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHRcdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHRcdH1cblx0fVxuXG5cdGRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdFx0fSwge30pXG5cdH07XG5cblx0dmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5cdHJldHVybiBkZWVwbWVyZ2VfMTtcblxufSkpO1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCIvKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAqIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAqIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICogbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy4gVGhlIGZ1bmN0aW9uIGFsc28gaGFzIGEgcHJvcGVydHkgJ2NsZWFyJyBcbiAqIHRoYXQgaXMgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGNsZWFyIHRoZSB0aW1lciB0byBwcmV2ZW50IHByZXZpb3VzbHkgc2NoZWR1bGVkIGV4ZWN1dGlvbnMuIFxuICpcbiAqIEBzb3VyY2UgdW5kZXJzY29yZS5qc1xuICogQHNlZSBodHRwOi8vdW5zY3JpcHRhYmxlLmNvbS8yMDA5LzAzLzIwL2RlYm91bmNpbmctamF2YXNjcmlwdC1tZXRob2RzL1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb24gdG8gd3JhcFxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXQgaW4gbXMgKGAxMDBgKVxuICogQHBhcmFtIHtCb29sZWFufSB3aGV0aGVyIHRvIGV4ZWN1dGUgYXQgdGhlIGJlZ2lubmluZyAoYGZhbHNlYClcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSl7XG4gIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcbiAgaWYgKG51bGwgPT0gd2FpdCkgd2FpdCA9IDEwMDtcblxuICBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICB2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGRlYm91bmNlZCA9IGZ1bmN0aW9uKCl7XG4gICAgY29udGV4dCA9IHRoaXM7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgIGlmICghdGltZW91dCkgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgXG4gIGRlYm91bmNlZC5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn07XG5cbi8vIEFkZHMgY29tcGF0aWJpbGl0eSBmb3IgRVMgbW9kdWxlc1xuZGVib3VuY2UuZGVib3VuY2UgPSBkZWJvdW5jZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbmZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghaXNQcm9kdWN0aW9uKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0ZXh0ID0gXCJXYXJuaW5nOiBcIiArIG1lc3NhZ2U7XG5cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4odGV4dCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IEVycm9yKHRleHQpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2FybmluZztcbiIsImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZVxufTtcblxudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIGNvbXBhcmU6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbUmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gICAgaWYgKFJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgICB9XG4gICAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICAgICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyohXG4gKiBpcy1wbGFpbi1vYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLXBsYWluLW9iamVjdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IGlzT2JqZWN0IGZyb20gJ2lzb2JqZWN0JztcblxuZnVuY3Rpb24gaXNPYmplY3RPYmplY3Qobykge1xuICByZXR1cm4gaXNPYmplY3QobykgPT09IHRydWVcbiAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIGNvbnN0cnVjdG9yXG4gIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICBpZiAodHlwZW9mIGN0b3IgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG4gIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcbiAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8qIVxuICogaXNvYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodmFsKSA9PT0gZmFsc2U7XG59O1xuIiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbi8vIGltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgLy8gVG8gZGVwcmVjYXRlIGluIHY0LjFcbiAgICAgIC8vICAgICAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgICAgIGZhbHNlLFxuICAgICAgLy8gICAgICAgICBbXG4gICAgICAvLyAgICAgICAgICAgJ01hdGVyaWFsLVVJOiB0aGVtZS5taXhpbnMuZ3V0dGVycygpIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgIC8vICAgICAgICAgICAnWW91IGNhbiB1c2UgdGhlIHNvdXJjZSBvZiB0aGUgbWl4aW4gZGlyZWN0bHk6JyxcbiAgICAgIC8vICAgICAgICAgICBgXG4gICAgICAvLyBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIC8vICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vIH0sXG4gICAgICAvLyBgLFxuICAgICAgLy8gICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgLy8gICAgICAgKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMilcbiAgICAgIH0sIHN0eWxlcywgX2RlZmluZVByb3BlcnR5KHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDMpXG4gICAgICB9LCBzdHlsZXNbYnJlYWtwb2ludHMudXAoJ3NtJyldKSkpO1xuICAgIH0sXG4gICAgdG9vbGJhcjogKF90b29sYmFyID0ge1xuICAgICAgbWluSGVpZ2h0OiA1NlxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgXCJcIi5jb25jYXQoYnJlYWtwb2ludHMudXAoJ3hzJyksIFwiIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcIiksIHtcbiAgICAgIG1pbkhlaWdodDogNDhcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJ2YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG5leHBvcnQgZGVmYXVsdCBpbmRpZ287IiwidmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsInZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuXG5pbXBvcnQgaW5kaWdvIGZyb20gJy4uL2NvbG9ycy9pbmRpZ28nO1xuaW1wb3J0IHBpbmsgZnJvbSAnLi4vY29sb3JzL3BpbmsnO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgeyBnZXRDb250cmFzdFJhdGlvLCBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICcuL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gICAgLy8gVGV4dCBoaW50cy5cbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogZ3JleVs1MF1cbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4xNCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknXG4gIH1cbn07XG5leHBvcnQgdmFyIGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGdyZXlbODAwXSxcbiAgICBkZWZhdWx0OiAnIzMwMzAzMCdcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4xLFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSdcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGluZGlnb1szMDBdLFxuICAgIG1haW46IGluZGlnb1s1MDBdLFxuICAgIGRhcms6IGluZGlnb1s3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcGluay5BMjAwLFxuICAgIG1haW46IHBpbmsuQTQwMCxcbiAgICBkYXJrOiBwaW5rLkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgbWFpbjogcmVkWzUwMF0sXG4gICAgZGFyazogcmVkWzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYmFja2dyb3VuZCwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBiYWNrZ3JvdW5kIGFyZ3VtZW50IGluIGdldENvbnRyYXN0VGV4dChcIi5jb25jYXQoYmFja2dyb3VuZCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gICAgdmFyIGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjb250cmFzdCA+PSAzLCBbXCJNYXRlcmlhbC1VSTogdGhlIGNvbnRyYXN0IHJhdGlvIG9mIFwiLmNvbmNhdChjb250cmFzdCwgXCI6MSBmb3IgXCIpLmNvbmNhdChjb250cmFzdFRleHQsIFwiIG9uIFwiKS5jb25jYXQoYmFja2dyb3VuZCksICdmYWxscyBiZWxvdyB0aGUgV0FDRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBhdWdtZW50Q29sb3IoY29sb3IpIHtcbiAgICB2YXIgbWFpblNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1MDA7XG4gICAgdmFyIGxpZ2h0U2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDMwMDtcbiAgICB2YXIgZGFya1NoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiA3MDA7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC4nLCBcIlRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZXNbdHlwZV0sIFwiTWF0ZXJpYWwtVUk6IHRoZSBwYWxldHRlIHR5cGUgYFwiLmNvbmNhdCh0eXBlLCBcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpIDogdm9pZCAwO1xuICB2YXIgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHByaW1hcnkpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHNlY29uZGFyeSwgJ0E0MDAnLCAnQTIwMCcsICdBNzAwJyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKGVycm9yKSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIGJhY2tncm91bmQgYW5kXG4gICAgLy8gdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2UgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm4gdGhlIGNvbG9yIG9mIHRoZSB0ZXh0IHRvIG1heGltaXplIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCJdKTtcblxuICB2YXIgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG5cbiAgdmFyIHB4VG9SZW0gPSBmdW5jdGlvbiBweFRvUmVtKHNpemUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWYsIFwicmVtXCIpO1xuICB9O1xuXG4gIHZhciBidWlsZFZhcmlhbnQgPSBmdW5jdGlvbiBidWlsZFZhcmlhbnQoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0LFxuICAgICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMSwgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4wNCwgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMTcsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzLCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplOiBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwidmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn1cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMSwgMywgMCwgMCwgMSwgMSwgMCwgMCwgMiwgMSwgLTEpLCBjcmVhdGVTaGFkb3coMCwgMSwgNSwgMCwgMCwgMiwgMiwgMCwgMCwgMywgMSwgLTIpLCBjcmVhdGVTaGFkb3coMCwgMSwgOCwgMCwgMCwgMywgNCwgMCwgMCwgMywgMywgLTIpLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwidmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuXG5leHBvcnQgdmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnQgdmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZXhwb3J0IHZhciBmb3JtYXRNcyA9IGZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChtaWxsaXNlY29uZHMpLCBcIm1zXCIpO1xufTtcbmV4cG9ydCB2YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn07XG5leHBvcnQgdmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLnByb3BcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kdXJhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLmVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmRlbGF5XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25PcHRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfb3B0aW9ucyRkdXJhdGlvbixcbiAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGVhc2luZ09wdGlvbiA9IF9vcHRpb25zJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzaW5nLmVhc2VJbk91dCA6IF9vcHRpb25zJGVhc2luZyxcbiAgICAgICAgX29wdGlvbnMkZGVsYXkgPSBvcHRpb25zLmRlbGF5LFxuICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl0pO1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc1N0cmluZyhwcm9wcykgfHwgQXJyYXkuaXNBcnJheShwcm9wcyksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhpc051bWJlcihkdXJhdGlvbk9wdGlvbikgfHwgaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pLCBcIk1hdGVyaWFsLVVJOiBhcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGlzU3RyaW5nKGVhc2luZ09wdGlvbiksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaXNOdW1iZXIoZGVsYXkpIHx8IGlzU3RyaW5nKGRlbGF5KSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggPT09IDAsIFwiTWF0ZXJpYWwtVUk6IHVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXVwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChhbmltYXRlZFByb3AsIFwiIFwiKS5jb25jYXQodHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pLCBcIiBcIikuY29uY2F0KGVhc2luZ09wdGlvbiwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSkpO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgfSxcbiAgZ2V0QXV0b0hlaWdodER1cmF0aW9uOiBmdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBNYXRoLnBvdyhjb25zdGFudCwgMC4yNSkgKyBjb25zdGFudCAvIDUpICogMTApO1xuICB9XG59OyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5cbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2lzLXBsYWluLW9iamVjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuL3RyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzaGFkb3dzSW5wdXQgPSBvcHRpb25zLnNoYWRvd3MsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJwYWxldHRlXCIsIFwic2hhZG93c1wiLCBcInNwYWNpbmdcIiwgXCJ0eXBvZ3JhcGh5XCJdKTtcblxuICB2YXIgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgdmFyIGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuXG4gIHZhciBtdWlUaGVtZSA9IF9leHRlbmRzKHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHByb3BlcnRpZXNcbiAgICBzaGFkb3dzOiBzaGFkb3dzSW5wdXQgfHwgc2hhZG93cyxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZ1xuICB9LCBkZWVwbWVyZ2Uoe1xuICAgIHNoYXBlOiBzaGFwZSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSwgb3RoZXIsIHtcbiAgICBpc01lcmdlYWJsZU9iamVjdDogaXNQbGFpbk9iamVjdFxuICB9KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddO1xuXG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgcGFyZW50S2V5KSB7XG4gICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gICAgICB2YXIga2V5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ011aScpID09PSAwICYmIGNoaWxkKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCwga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBbXCJNYXRlcmlhbC1VSTogdGhlIGBcIi5jb25jYXQocGFyZW50S2V5LCBcImAgY29tcG9uZW50IGluY3JlYXNlcyBcIikgKyBcInRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIGBcIi5jb25jYXQoa2V5LCBcImAgaW50ZXJuYWwgc3RhdGUuXCIpLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsICdJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICRydWxlTmFtZSBzeW50YXg6JywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvcHNldWRvLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobXVpVGhlbWUuc2hhZG93cy5sZW5ndGggPT09IDI1LCAnTWF0ZXJpYWwtVUk6IHRoZSBzaGFkb3dzIGFycmF5IHByb3ZpZGVkIHRvIGNyZWF0ZU11aVRoZW1lIHNob3VsZCBzdXBwb3J0IDI1IGVsZXZhdGlvbnMuJykgOiB2b2lkIDA7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTXVpVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZU11aVRoZW1lIGZyb20gJy4vY3JlYXRlTXVpVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZU11aVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG52YXIgd2Fybk9uY2U7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBBbGwgY29tcG9uZW50cyBhbGlnbiB0byBhbiA4ZHAgc3F1YXJlIGJhc2VsaW5lIGdyaWQgZm9yIG1vYmlsZSwgdGFibGV0LCBhbmQgZGVza3RvcC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjcGl4ZWwtZGVuc2l0eVxuXG5cbiAgdmFyIHRyYW5zZm9ybTtcblxuICBpZiAodHlwZW9mIHNwYWNpbmdJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyYW5zZm9ybSA9IHNwYWNpbmdJbnB1dDtcbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBzcGFjaW5nSW5wdXQgPT09ICdudW1iZXInLCBbXCJNYXRlcmlhbC1VSTogdGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHNwYWNpbmdJbnB1dCwgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyIG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuXG4gICAgdHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtKGZhY3Rvcikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2YgZmFjdG9yID09PSAnbnVtYmVyJywgXCJFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGZhY3RvcikpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dCAqIGZhY3RvcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGFyZ3MubGVuZ3RoIDw9IDQsIFwiTWF0ZXJpYWwtVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgXCIuY29uY2F0KGFyZ3MubGVuZ3RoKSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oMSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKGFyZ3NbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoZmFjdG9yKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gdHJhbnNmb3JtKGZhY3Rvcik7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChvdXRwdXQsIFwicHhcIikgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9OyAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0byByZW1vdmUgaW4gdjUuXG5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3BhY2luZywgJ3VuaXQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHdhcm5PbmNlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcsIFsnTWF0ZXJpYWwtVUk6IHRoZW1lLnNwYWNpbmcudW5pdCB1c2FnZSBoYXMgYmVlbiBkZXByZWNhdGVkLicsICdJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuJywgJ1lvdSBjYW4gcmVwbGFjZSBgdGhlbWUuc3BhY2luZy51bml0ICogeWAgd2l0aCBgdGhlbWUuc3BhY2luZyh5KWAuJywgJycsICdZb3UgY2FuIHVzZSB0aGUgYGh0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL3RyZWUvbWFzdGVyL3BhY2thZ2VzL21hdGVyaWFsLXVpLWNvZGVtb2QvUkVBRE1FLm1kI3RoZW1lLXNwYWNpbmctYXBpYCBtaWdyYXRpb24gaGVscGVyIHRvIG1ha2UgdGhlIHByb2Nlc3Mgc21vb3RoZXIuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICB3YXJuT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gICAgfVxuICB9KTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydCB2YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gXCJvYmplY3RcIiAmJiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQubm9kZVR5cGUgPT09IDk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnJvd3NlcjtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IHZhciBrZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgdmFyIF9icmVha3BvaW50cyR2YWx1ZXMgPSBicmVha3BvaW50cy52YWx1ZXMsXG4gICAgICB2YWx1ZXMgPSBfYnJlYWtwb2ludHMkdmFsdWVzID09PSB2b2lkIDAgPyB7XG4gICAgeHM6IDAsXG4gICAgc206IDYwMCxcbiAgICBtZDogOTYwLFxuICAgIGxnOiAxMjgwLFxuICAgIHhsOiAxOTIwXG4gIH0gOiBfYnJlYWtwb2ludHMkdmFsdWVzLFxuICAgICAgX2JyZWFrcG9pbnRzJHVuaXQgPSBicmVha3BvaW50cy51bml0LFxuICAgICAgdW5pdCA9IF9icmVha3BvaW50cyR1bml0ID09PSB2b2lkIDAgPyAncHgnIDogX2JyZWFrcG9pbnRzJHVuaXQsXG4gICAgICBfYnJlYWtwb2ludHMkc3RlcCA9IGJyZWFrcG9pbnRzLnN0ZXAsXG4gICAgICBzdGVwID0gX2JyZWFrcG9pbnRzJHN0ZXAgPT09IHZvaWQgMCA/IDUgOiBfYnJlYWtwb2ludHMkc3RlcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGJyZWFrcG9pbnRzLCBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXSk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGtleSkgKyAxO1xuICAgIHZhciB1cHBlcmJvdW5kID0gdmFsdWVzW2tleXNbZW5kSW5kZXhdXTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIC8vIHhsIGRvd24gYXBwbGllcyB0byBhbGwgc2l6ZXNcbiAgICAgIHJldHVybiB1cCgneHMnKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdXBwZXJib3VuZCA9PT0gJ251bWJlcicgJiYgZW5kSW5kZXggPiAwID8gdXBwZXJib3VuZCA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWUgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCkgKyAxO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHVwKHN0YXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWVzW3N0YXJ0XSkuY29uY2F0KHVuaXQsIFwiKSBhbmQgXCIpICsgXCIobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNba2V5c1tlbmRJbmRleF1dIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lkdGgoa2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlc1trZXldO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWVcbn07XG5cbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICBjb21wYXJlOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAgIGlmIChSZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gICAgfVxuICAgIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSksICdTZWFyY2gnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xNy42NSA2LjM1QzE2LjIgNC45IDE0LjIxIDQgMTIgNGMtNC40MiAwLTcuOTkgMy41OC03Ljk5IDhzMy41NyA4IDcuOTkgOGMzLjczIDAgNi44NC0yLjU1IDcuNzMtNmgtMi4wOGMtLjgyIDIuMzMtMy4wNCA0LTUuNjUgNC0zLjMxIDAtNi0yLjY5LTYtNnMyLjY5LTYgNi02YzEuNjYgMCAzLjE0LjY5IDQuMjIgMS43OEwxMyAxMWg3VjRsLTIuMzUgMi4zNXpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSksICdSZWZyZXNoJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdmaWxsJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJpbmhlcml0XCJgLiAqL1xuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwibGFyZ2VcImAuICovXG4gICAgZm9udFNpemVMYXJnZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzNSlcbiAgICB9XG4gIH07XG59O1xudmFyIFN2Z0ljb24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdzdmcnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcHJvcHMkZm9udFNpemUgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRmb250U2l6ZSxcbiAgICAgIGh0bWxDb2xvciA9IHByb3BzLmh0bWxDb2xvcixcbiAgICAgIHRpdGxlQWNjZXNzID0gcHJvcHMudGl0bGVBY2Nlc3MsXG4gICAgICBfcHJvcHMkdmlld0JveCA9IHByb3BzLnZpZXdCb3gsXG4gICAgICB2aWV3Qm94ID0gX3Byb3BzJHZpZXdCb3ggPT09IHZvaWQgMCA/ICcwIDAgMjQgMjQnIDogX3Byb3BzJHZpZXdCb3gsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcImh0bWxDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICB2aWV3Qm94OiB2aWV3Qm94LFxuICAgIGNvbG9yOiBodG1sQ29sb3IsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0aXRsZUFjY2VzcyA/ICdmYWxzZScgOiAndHJ1ZScsXG4gICAgcm9sZTogdGl0bGVBY2Nlc3MgPyAnaW1nJyA6ICdwcmVzZW50YXRpb24nLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIHRpdGxlQWNjZXNzKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3BlcnR5IHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2FjdGlvbicsICdlcnJvcicsICdkaXNhYmxlZCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnZGVmYXVsdCcsICdzbWFsbCcsICdsYXJnZSddKSxcblxuICAvKipcbiAgICogQXBwbGllcyBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBodG1sQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3ZnSWNvbidcbn0pKFN2Z0ljb24pOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9TdmdJY29uJzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKSk7XG52YXIgX2NyZWF0ZUNsYXNzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKSk7XG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJykpO1xudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mJykpO1xudmFyIF9pbmhlcml0cyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJykpO1xudmFyIF90eXBlb2YgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YnKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKSk7XG52YXIgX2V4dGVuZHMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJykpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3JlYWN0JykpO1xudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdwcm9wLXR5cGVzJykpO1xudmFyIHdhcm5pbmcgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnd2FybmluZycpKTtcblxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgYXR0cikge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGF0dHIpO1xufSAvLyBQYXNzaXZlIG9wdGlvbnNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9kb20vcGFzc2l2ZWV2ZW50bGlzdGVuZXJzLmpzXG5cblxudmFyIHBhc3NpdmVPcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWNoZSA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhY2hlICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuXG4gICAgdmFyIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7Ly9cbiAgICB9XG5cbiAgICBjYWNoZSA9IHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbiAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlT3B0aW9uO1xuICB9KCk7XG59KCk7XG5cbnZhciBkZWZhdWx0RXZlbnRPcHRpb25zID0ge1xuICBjYXB0dXJlOiBmYWxzZSxcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdEV2ZW50T3B0aW9ucywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TGlzdGVuZXJBcmdzKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIGFyZ3MgPSBbZXZlbnROYW1lLCBjYWxsYmFja107XG4gIGFyZ3MucHVzaChwYXNzaXZlT3B0aW9uID8gb3B0aW9ucyA6IG9wdGlvbnMuY2FwdHVyZSk7XG4gIHJldHVybiBhcmdzO1xufVxuXG5mdW5jdGlvbiBvbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIG9mZih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hMaXN0ZW5lcihwcm9wcywgaXRlcmF0ZWUpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICB0YXJnZXQgPSBwcm9wcy50YXJnZXQsXG4gICAgICBldmVudFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcInRhcmdldFwiXSk7XG5cbiAgT2JqZWN0LmtleXMoZXZlbnRQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lLnN1YnN0cmluZygwLCAyKSAhPT0gJ29uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wID0gZXZlbnRQcm9wc1tuYW1lXTtcblxuICAgIHZhciB0eXBlID0gX3R5cGVvZihwcm9wKTtcblxuICAgIHZhciBpc09iamVjdCA9IHR5cGUgPT09ICdvYmplY3QnO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FwdHVyZSA9IG5hbWUuc3Vic3RyKC03KS50b0xvd2VyQ2FzZSgpID09PSAnY2FwdHVyZSc7XG4gICAgdmFyIGV2ZW50TmFtZSA9IG5hbWUuc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgZXZlbnROYW1lID0gY2FwdHVyZSA/IGV2ZW50TmFtZS5zdWJzdHJpbmcoMCwgZXZlbnROYW1lLmxlbmd0aCAtIDcpIDogZXZlbnROYW1lO1xuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICBpdGVyYXRlZShldmVudE5hbWUsIHByb3AuaGFuZGxlciwgcHJvcC5vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUoZXZlbnROYW1lLCBwcm9wLCBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMoe1xuICAgICAgICBjYXB0dXJlOiBjYXB0dXJlXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gd2l0aE9wdGlvbnMoaGFuZGxlciwgb3B0aW9ucykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG9wdGlvbnMsICdyZWFjdC1ldmVudC1saXN0ZW5lcjogc2hvdWxkIGJlIHNwZWNpZmllZCBvcHRpb25zIGluIHdpdGhPcHRpb25zLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgb3B0aW9uczogbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKG9wdGlvbnMpXG4gIH07XG59XG5cbnZhciBFdmVudExpc3RlbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRXZlbnRMaXN0ZW5lciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50TGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihFdmVudExpc3RlbmVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFdmVudExpc3RlbmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvZmYsIHByZXZQcm9wcyk7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9mZik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5TGlzdGVuZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TGlzdGVuZXJzKG9uT3JPZmYpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5wcm9wcztcbiAgICAgIHZhciB0YXJnZXQgPSBwcm9wcy50YXJnZXQ7XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0YXJnZXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHdpbmRvd1t0YXJnZXRdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaExpc3RlbmVyKHByb3BzLCBvbk9yT2ZmLmJpbmQobnVsbCwgZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRXZlbnRMaXN0ZW5lcjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkV2ZW50TGlzdGVuZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIGNoaWxkIHRvby5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIERPTSB0YXJnZXQgdG8gbGlzdGVuIHRvLlxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufSA6IHt9O1xuXG5leHBvcnRzLndpdGhPcHRpb25zID0gd2l0aE9wdGlvbnM7XG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudExpc3RlbmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1wbGVtZW50YXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ29udGV4dCB8fCBfaW1wbGVtZW50YXRpb24yLmRlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWVcbn07XG5cbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICBjb21wYXJlOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAgIGlmIChSZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gICAgfVxuICAgIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAgMjB2LTZoNHY2aDV2LThoM0wxMiAzIDIgMTJoM3Y4elwiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBmaWxsOiBcIm5vbmVcIixcbiAgZDogXCJNMCAwaDI0djI0SDB6XCJcbn0pKSwgJ0hvbWUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAxMmMyLjIxIDAgNC0xLjc5IDQtNHMtMS43OS00LTQtNC00IDEuNzktNCA0IDEuNzkgNCA0IDR6bTAgMmMtMi42NyAwLTggMS4zNC04IDR2MmgxNnYtMmMwLTIuNjYtNS4zMy00LTgtNHpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSksICdQZXJzb24nKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0zIDl2Nmg0bDUgNVY0TDcgOUgzem0xMy41IDNjMC0xLjc3LTEuMDItMy4yOS0yLjUtNC4wM3Y4LjA1YzEuNDgtLjczIDIuNS0yLjI1IDIuNS00LjAyek0xNCAzLjIzdjIuMDZjMi44OS44NiA1IDMuNTQgNSA2Ljcxcy0yLjExIDUuODUtNSA2LjcxdjIuMDZjNC4wMS0uOTEgNy00LjQ5IDctOC43N3MtMi45OS03Ljg2LTctOC43N3pcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSksICdWb2x1bWVVcCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGZpbGw6IFwibm9uZVwiLFxuICBkOiBcIk0wIDBoMjR2MjRIMHpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTYgMTFjMS42NiAwIDIuOTktMS4zNCAyLjk5LTNTMTcuNjYgNSAxNiA1Yy0xLjY2IDAtMyAxLjM0LTMgM3MxLjM0IDMgMyAzem0tOCAwYzEuNjYgMCAyLjk5LTEuMzQgMi45OS0zUzkuNjYgNSA4IDVDNi4zNCA1IDUgNi4zNCA1IDhzMS4zNCAzIDMgM3ptMCAyYy0yLjMzIDAtNyAxLjE3LTcgMy41VjE5aDE0di0yLjVjMC0yLjMzLTQuNjctMy41LTctMy41em04IDBjLS4yOSAwLS42Mi4wMi0uOTcuMDUgMS4xNi44NCAxLjk3IDEuOTcgMS45NyAzLjQ1VjE5aDZ2LTIuNWMwLTIuMzMtNC42Ny0zLjUtNy0zLjV6XCJcbn0pKSwgJ0dyb3VwJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyYzEuMSAwIDIgLjkgMiAycy0uOSAyLTIgMi0yLS45LTItMiAuOS0yIDItMnptOSA3aC02djEzaC0ydi02aC0ydjZIOVY5SDNWN2gxOHYyelwiXG59KSksICdBY2Nlc3NpYmlsaXR5Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMyAxOGg2di0ySDN2MnpNMyA2djJoMThWNkgzem0wIDdoMTJ2LTJIM3YyelwiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBmaWxsOiBcIm5vbmVcIixcbiAgZDogXCJNMCAwaDI0djI0SDB6XCJcbn0pKSwgJ1NvcnQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk02IDE5YzAgMS4xLjkgMiAyIDJoOGMxLjEgMCAyLS45IDItMlY3SDZ2MTJ6TTE5IDRoLTMuNWwtMS0xaC01bC0xIDFINXYyaDE0VjR6XCJcbn0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGZpbGw6IFwibm9uZVwiLFxuICBkOiBcIk0wIDBoMjR2MjRIMHpcIlxufSkpLCAnRGVsZXRlJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk02IDZoMTJ2MTJINnpcIlxufSkpLCAnU3RvcCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGZpbGw6IFwibm9uZVwiLFxuICBkOiBcIk0wIDBoMjR2MjRIMHpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjIgM0g3Yy0uNjkgMC0xLjIzLjM1LTEuNTkuODhMMCAxMmw1LjQxIDguMTFjLjM2LjUzLjk3Ljg5IDEuNjYuODlIMjJjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnpNOSAxMy41Yy0uODMgMC0xLjUtLjY3LTEuNS0xLjVzLjY3LTEuNSAxLjUtMS41IDEuNS42NyAxLjUgMS41LS42NyAxLjUtMS41IDEuNXptNSAwYy0uODMgMC0xLjUtLjY3LTEuNS0xLjVzLjY3LTEuNSAxLjUtMS41IDEuNS42NyAxLjUgMS41LS42NyAxLjUtMS41IDEuNXptNSAwYy0uODMgMC0xLjUtLjY3LTEuNS0xLjVzLjY3LTEuNSAxLjUtMS41IDEuNS42NyAxLjUgMS41LS42NyAxLjUtMS41IDEuNXpcIlxufSkpLCAnTW9yZScpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnpcIlxufSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZmlsbDogXCJub25lXCIsXG4gIGQ6IFwiTTAgMGgyNHYyNEgwelwiXG59KSksICdBZGQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGFhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxiYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGNhKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2QsYyxlLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZCl9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QihcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2soSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixkKXt2YXIgYz12b2lkIDAsZT17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZVtjXSYmKGVbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBkYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBlYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBmYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWRhKGEsZSsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZCkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZCxjLGUpe3ZhciBnPVwiXCI7bnVsbCE9ZCYmKGc9KFwiXCIrZCkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZSk7VShhLGZhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtudWxsPT09YT9CKFwiMzIxXCIpOnZvaWQgMDtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLGVhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpiYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjphYSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixkKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGQpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnosY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7bnVsbD09PWF8fHZvaWQgMD09PWE/QihcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZT1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPVxuYil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuOC42XCIsXG51bnN0YWJsZV9Db25jdXJyZW50TW9kZTp4LHVuc3RhYmxlX1Byb2ZpbGVyOnUsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRPd25lcjpKLGFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bYyxkLGUsZixnLGhdLGs9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW2srK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB4KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6eChcIjIyN1wiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgsbCl7dmFyIGs9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsayl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxsKXtkYT0hMTtlYT1udWxsO2NhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGwpe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBrPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB4KFwiMTk4XCIpLGs9dm9pZCAwO2ZhfHwoZmE9ITAsaGE9ayl9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp4KFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6eChcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT94KFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgbD1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGwpe2ZvcihlIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShlKSYmcWEobFtlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6eChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT94KFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e30sdGE9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtudWxsPT1iP3goXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1cbnZhciBCYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtsYT94KFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP3goXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfX07XG5mdW5jdGlvbiBDYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXRhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBEYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSYmKHlhKGEsQWEpLHphP3goXCI5NVwiKTp2b2lkIDAsZmEpKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO312YXIgRWE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRmE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitFYSxHYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0VhO2Z1bmN0aW9uIEhhKGEpe2lmKGFbRmFdKXJldHVybiBhW0ZhXTtmb3IoOyFhW0ZhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIElhKGEpe2E9YVtGYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt4KFwiMzNcIil9ZnVuY3Rpb24gS2EoYSl7cmV0dXJuIGFbR2FdfHxudWxsfWZ1bmN0aW9uIExhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIE5hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TGEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU1hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTWEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFFhKGEpe3lhKGEsTmEpfXZhciBSYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFNhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRhPXthbmltYXRpb25lbmQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFVhPXt9LFZhPXt9O1xuUmEmJihWYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdhKGEpe2lmKFVhW2FdKXJldHVybiBVYVthXTtpZighVGFbYV0pcmV0dXJuIGE7dmFyIGI9VGFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmEpcmV0dXJuIFVhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGE9V2EoXCJhbmltYXRpb25lbmRcIiksWWE9V2EoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmE9V2EoXCJhbmltYXRpb25zdGFydFwiKSwkYT1XYShcInRyYW5zaXRpb25lbmRcIiksYWI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJiPW51bGwsY2I9bnVsbCxkYj1udWxsO1xuZnVuY3Rpb24gZWIoKXtpZihkYilyZXR1cm4gZGI7dmFyIGEsYj1jYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBkYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGZiKCl7cmV0dXJuITB9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2ZiOmdiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Z2I7cmV0dXJuIHRoaXN9XG5uKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZmIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZmIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9ZmJ9LGlzUGVyc2lzdGVudDpnYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtoYihjKTtyZXR1cm4gY307aGIoeSk7ZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gamIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOngoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gaGIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9aWI7YS5yZWxlYXNlPWpifXZhciBrYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPVs5LDEzLDI3LDMyXSxuYj1SYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csb2I9bnVsbDtSYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYob2I9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBwYj1SYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIW9iLHFiPVJhJiYoIW5ifHxvYiYmODxvYiYmMTE+PW9iKSxyYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxzYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx0Yj0hMTtcbmZ1bmN0aW9uIHViKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09bWIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB2YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB3Yj0hMTtmdW5jdGlvbiB4YihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gdmIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3RiPSEwO3JldHVybiByYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1yYiYmdGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24geWIoYSxiKXtpZih3YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhbmImJnViKGEsYik/KGE9ZWIoKSxkYj1jYj1iYj1udWxsLHdiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBxYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgemI9e2V2ZW50VHlwZXM6c2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKG5iKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9c2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9c2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXNiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB3Yj91YihhLGMpJiYoZT1zYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXNiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHFiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHdifHxlIT09c2IuY29tcG9zaXRpb25TdGFydD9lPT09c2IuY29tcG9zaXRpb25FbmQmJndiJiYoZj1lYigpKTooYmI9ZCxjYj1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCx3Yj1cbiEwKSksZT1rYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj12YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUWEoZSksZj1lKTpmPW51bGw7KGE9cGI/eGIoYSxjKTp5YihhLGMpKT8oYj1sYi5nZXRQb29sZWQoc2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFFhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEFiPW51bGwsQmI9bnVsbCxDYj1udWxsO2Z1bmN0aW9uIERiKGEpe2lmKGE9dWEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBYj94KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj10YShhLnN0YXRlTm9kZSk7QWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBFYihhKXtCYj9DYj9DYi5wdXNoKGEpOkNiPVthXTpCYj1hfWZ1bmN0aW9uIEZiKCl7aWYoQmIpe3ZhciBhPUJiLGI9Q2I7Q2I9QmI9bnVsbDtEYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspRGIoYlthXSl9fVxuZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBJYigpe312YXIgSmI9ITE7ZnVuY3Rpb24gS2IoYSxiKXtpZihKYilyZXR1cm4gYShiKTtKYj0hMDt0cnl7cmV0dXJuIEdiKGEsYil9ZmluYWxseXtpZihKYj0hMSxudWxsIT09QmJ8fG51bGwhPT1DYilJYigpLEZiKCl9fXZhciBMYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBNYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIUxiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIE5iKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBPYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gUGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFFiKGEpe3ZhciBiPVBiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBSYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9UWIoYSkpfWZ1bmN0aW9uIFNiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1QYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBUYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtUYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtcbnZhciBVYj0vXiguKilbXFxcXFxcL10vLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixWYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFdiPXo/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixYYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxZYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxaYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCwkYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxhYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGJjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxjYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixkYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxlYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsZmM9ej9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixnYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gaGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWdjJiZhW2djXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gaWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBiYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBYYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBXYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgWmI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgWWI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBkYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGFjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgJGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBjYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgZWM6cmV0dXJuIGljKGEudHlwZSk7Y2FzZSBmYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIGljKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIGpjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1pYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1pYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFViLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIga2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbWM9e30sbmM9e307XG5mdW5jdGlvbiBvYyhhKXtpZihsYy5jYWxsKG5jLGEpKXJldHVybiEwO2lmKGxjLmNhbGwobWMsYSkpcmV0dXJuITE7aWYoa2MudGVzdChhKSlyZXR1cm4gbmNbYV09ITA7bWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEMoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciByYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLFxuc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5mdW5jdGlvbiB0YyhhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChxYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHVjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB2YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiB3YyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIHhjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIHljKGEsYil7eGMoYSxiKTt2YXIgYz11YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT96YyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZ6YyhhLGIudHlwZSx1YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEFjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIHpjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgQmM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gQ2MoYSxiLGMpe2E9eS5nZXRQb29sZWQoQmMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtFYihjKTtRYShhKTtyZXR1cm4gYX12YXIgRGM9bnVsbCxFYz1udWxsO2Z1bmN0aW9uIEZjKGEpe0RhKGEpfVxuZnVuY3Rpb24gR2MoYSl7dmFyIGI9SmEoYSk7aWYoU2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSGMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgSWM9ITE7UmEmJihJYz1PYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBKYygpe0RjJiYoRGMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpLEVjPURjPW51bGwpfWZ1bmN0aW9uIEtjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZHYyhFYykmJihhPUNjKEVjLGEsTmIoYSkpLEtiKEZjLGEpKX1mdW5jdGlvbiBMYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oSmMoKSxEYz1iLEVjPWMsRGMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpKTpcImJsdXJcIj09PWEmJkpjKCl9ZnVuY3Rpb24gTWMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gR2MoRWMpfVxuZnVuY3Rpb24gTmMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBHYyhiKX1mdW5jdGlvbiBPYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBHYyhiKX1cbnZhciBQYz17ZXZlbnRUeXBlczpCYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkljLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9KYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9SGM6TWIoZSk/SWM/Zj1PYzooZj1NYyxnPUxjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1OYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gQ2MoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZ6YyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxRYz15LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksUmM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gU2MoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1SY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFRjKCl7cmV0dXJuIFNjfVxudmFyIFVjPTAsVmM9MCxXYz0hMSxYYz0hMSxZYz1RYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9VWM7VWM9YS5zY3JlZW5YO3JldHVybiBXYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFdjPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9VmM7VmM9YS5zY3JlZW5ZO3JldHVybiBYYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFhjPSEwLDApfX0pLFpjPVljLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSwkYz17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sYWQ9e2V2ZW50VHlwZXM6JGMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SGEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxsPXZvaWQgMCxrPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPVljLGg9JGMubW91c2VMZWF2ZSxsPSRjLm1vdXNlRW50ZXIsaz1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPVpjLGg9JGMucG9pbnRlckxlYXZlLGw9JGMucG9pbnRlckVudGVyLGs9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkphKGYpO2U9bnVsbD09Yj9lOkphKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWsrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChsLGIsYyxkKTtjLnR5cGU9aytcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2s9MDtmb3IoZz1iO2c7Zz1MYShnKSlrKys7Zz0wO2ZvcihsPWU7bDtsPUxhKGwpKWcrKztmb3IoOzA8ay1nOyliPUxhKGIpLGstLTtmb3IoOzA8Zy1rOyllPUxhKGUpLGctLTtmb3IoO2stLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPUxhKGIpO2U9TGEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2s9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TGEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtrPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztmLnB1c2goZCk7ZD1MYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKU9hKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KU9hKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX07ZnVuY3Rpb24gYmQoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBjZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gZGQoYSxiKXtpZihiZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWNkLmNhbGwoYixjW2RdKXx8IWJkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gZWQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gZmQoYSl7MiE9PWVkKGEpP3goXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9ZWQoYSksMz09PWI/eChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gZmQoZSksYTtpZihnPT09ZClyZXR1cm4gZmQoZSksYjtnPWcuc2libGluZ314KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6eChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3goXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz94KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhkKGEpe2E9Z2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgaWQ9eS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLGpkPXkuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksa2Q9UWMuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBsZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBtZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sbmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LG9kPVFjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1tZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1sZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/bmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2xkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2xkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSkscGQ9WWMuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPVFjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjfSkscmQ9eS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9WWMuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx0ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtYYSxcImFuaW1hdGlvbkVuZFwiXSxbWWEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbJGEsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSx1ZD17fSx2ZD17fTtmdW5jdGlvbiB3ZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O3VkW2FdPWI7dmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCEwKX0pO3RkLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMSl9KTtcbnZhciB4ZD17ZXZlbnRUeXBlczp1ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1sZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9b2Q7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWtkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9WWM7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBYYTpjYXNlIFlhOmNhc2UgWmE6YT1pZDticmVhaztjYXNlICRhOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9UWM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPWpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9WmM7YnJlYWs7ZGVmYXVsdDphPXl9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtRYShiKTtyZXR1cm4gYn19LHlkPXhkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbnpkPVtdO2Z1bmN0aW9uIEFkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU5iKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPG9hLmxlbmd0aDtoKyspe3ZhciBsPW9hW2hdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXhhKGcsbCkpfURhKGcpfX12YXIgQmQ9ITA7XG5mdW5jdGlvbiBFKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gRWQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBDZChhLGIpe0hiKERkLGEsYil9XG5mdW5jdGlvbiBEZChhLGIpe2lmKEJkKXt2YXIgYz1OYihiKTtjPUhhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09ZWQoYyl8fChjPW51bGwpO2lmKHpkLmxlbmd0aCl7dmFyIGQ9emQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7S2IoQWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD56ZC5sZW5ndGgmJnpkLnB1c2goYSl9fX12YXIgRmQ9e30sR2Q9MCxIZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBJZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxIZCl8fChhW0hkXT1HZCsrLEZkW2FbSGRdXT17fSk7cmV0dXJuIEZkW2FbSGRdXX1mdW5jdGlvbiBKZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gS2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGQoYSxiKXt2YXIgYz1LZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZChjKX19ZnVuY3Rpb24gTWQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZCgpe2Zvcih2YXIgYT13aW5kb3csYj1KZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1KZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gUGQoKXt2YXIgYT1OZCgpO2lmKE9kKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntiPShiPWEub3duZXJEb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgYz1iLmdldFNlbGVjdGlvbiYmYi5nZXRTZWxlY3Rpb24oKTtpZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEEpe2I9bnVsbDticmVhayBhfXZhciBmPTAsZz0tMSxoPS0xLGw9MCxrPTAsbT1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB0Ozspe20hPT1ifHwwIT09ZCYmMyE9PW0ubm9kZVR5cGV8fChnPWYrZCk7bSE9PWV8fDAhPT1jJiYzIT09bS5ub2RlVHlwZXx8KGg9ZitjKTszPT09bS5ub2RlVHlwZSYmKGYrPW0ubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHQ9bS5maXJzdENoaWxkKSlicmVhaztwPW07bT10fWZvcig7Oyl7aWYobT09PWEpYnJlYWsgYjtwPT09YiYmKytsPT09ZCYmKGc9Zik7cD09PWUmJisraz09PWMmJihoPWYpO2lmKG51bGwhPT0odD1tLm5leHRTaWJsaW5nKSlicmVhazttPXA7cD1tLnBhcmVudE5vZGV9bT10fWI9LTE9PT1nfHwtMT09PWg/bnVsbDp7c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cmV0dXJue2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn19XG5mdW5jdGlvbiBRZChhKXt2YXIgYj1OZCgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTWQoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk9kKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUxkKGMsZik7dmFyIGc9TGQoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBSZD1SYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFNkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxUZD1udWxsLFVkPW51bGwsVmQ9bnVsbCxXZD0hMTtcbmZ1bmN0aW9uIFhkKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoV2R8fG51bGw9PVRkfHxUZCE9PUpkKGMpKXJldHVybiBudWxsO2M9VGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmT2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gVmQmJmRkKFZkLGMpP251bGw6KFZkPWMsYT15LmdldFBvb2xlZChTZC5zZWxlY3QsVWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1UZCxRYShhKSxhKX1cbnZhciBZZD17ZXZlbnRUeXBlczpTZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1JZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/SmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihNYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlUZD1lLFVkPWIsVmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlZkPVVkPVRkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOldkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gV2Q9ITEsWGQoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBYZChjLGQpfXJldHVybiBudWxsfX07QmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt0YT1LYTt1YT1JYTt2YT1KYTtCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOnhkLEVudGVyTGVhdmVFdmVudFBsdWdpbjphZCxDaGFuZ2VFdmVudFBsdWdpbjpQYyxTZWxlY3RFdmVudFBsdWdpbjpZZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnpifSk7ZnVuY3Rpb24gWmQoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkZChhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPVpkKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBhZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGJlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGNlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/eChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOngoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnVjKGMpfX1cbmZ1bmN0aW9uIGRlKGEsYil7dmFyIGM9dWMoYi52YWx1ZSksZD11YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGVlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBmZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBnZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGhlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9nZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBpZT12b2lkIDAsamU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09ZmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7aWU9aWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9aWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24ga2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBsZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxtZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMobGUpLmZvckVhY2goZnVuY3Rpb24oYSl7bWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtsZVtiXT1sZVthXX0pfSk7ZnVuY3Rpb24gbmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGxlLmhhc093blByb3BlcnR5KGEpJiZsZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBvZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1uZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBwZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gcWUoYSxiKXtiJiYocGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/eChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp4KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT94KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gcmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gc2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6RWQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkVkKFwiZm9jdXNcIixhKTtFZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6T2IoZSkmJkVkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFiLmluZGV4T2YoZSkmJkUoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24gdGUoKXt9dmFyIHVlPW51bGwsdmU9bnVsbDtcbmZ1bmN0aW9uIHdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiB4ZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgeWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsemU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEFlPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxCZT1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrO1xuZnVuY3Rpb24gQ2UoYSxiLGMsZCxlKXthW0dhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZ4YyhhLGUpO3JlKGMsZCk7ZD1yZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP29lKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9qZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/a2UoYSxoKTp0YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2FlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9hZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTphZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gRGUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBFZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgRmU9W10sR2U9LTE7ZnVuY3Rpb24gRihhKXswPkdlfHwoYS5jdXJyZW50PUZlW0dlXSxGZVtHZV09bnVsbCxHZS0tKX1mdW5jdGlvbiBHKGEsYil7R2UrKztGZVtHZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBIZT17fSxIPXtjdXJyZW50OkhlfSxJPXtjdXJyZW50OiExfSxJZT1IZTtcbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gSGU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gSihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEtlKGEpe0YoSSxhKTtGKEgsYSl9ZnVuY3Rpb24gTGUoYSl7RihJLGEpO0YoSCxhKX1cbmZ1bmN0aW9uIE1lKGEsYixjKXtILmN1cnJlbnQhPT1IZT94KFwiMTY4XCIpOnZvaWQgMDtHKEgsYixhKTtHKEksYyxhKX1mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp4KFwiMTA4XCIsaWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxIZTtJZT1ILmN1cnJlbnQ7RyhILGIsYSk7RyhJLEkuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp4KFwiMTY5XCIpO2M/KGI9TmUoYSxiLEllKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsRihJLGEpLEYoSCxhKSxHKEgsYixhKSk6RihJLGEpO0coSSxjLGEpfXZhciBRZT1udWxsLFJlPW51bGw7ZnVuY3Rpb24gU2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFRlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1FlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtSZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmNvbnRleHREZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gSyhhLGIsYyxkKXtyZXR1cm4gbmV3IFVlKGEsYixjLGQpfVxuZnVuY3Rpb24gVmUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBXZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gVmUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWNjKXJldHVybiAxMTtpZihhPT09ZWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gWGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1LKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBZZShhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpVmUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgWGI6cmV0dXJuIFplKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgYmM6cmV0dXJuICRlKGMsZXwzLGYsYik7Y2FzZSBZYjpyZXR1cm4gJGUoYyxlfDIsZixiKTtjYXNlIFpiOnJldHVybiBhPUsoMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1aYixhLnR5cGU9WmIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBkYzpyZXR1cm4gYT1LKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWRjLGEudHlwZT1kYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgJGI6Zz0xMDticmVhayBhO2Nhc2UgYWM6Zz05O2JyZWFrIGE7Y2FzZSBjYzpnPTExO2JyZWFrIGE7Y2FzZSBlYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGZjOmc9MTY7ZD1udWxsO2JyZWFrIGF9eChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPUsoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBaZShhLGIsYyxkKXthPUsoNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uICRlKGEsYixjLGQpe2E9Syg4LGEsZCxiKTtiPTA9PT0oYiYxKT9ZYjpiYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGFmKGEsYixjKXthPUsoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gYmYoYSxiLGMpe2I9Syg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBjZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGVmKGEsYil7YS5kaWRFcnJvcj0hMTtpZigwPT09YilhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MDtlbHNle2I8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEubGF0ZXN0UGVuZGluZ1RpbWU7MCE9PWMmJihjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU+YiYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTswPT09Yz9jZihhLGIpOmI8YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLGNmKGEsYikpOlxuYj5jJiZjZihhLGIpfWRmKDAsYSl9ZnVuY3Rpb24gZmYoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2E9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yz5iJiYoYj1jKTthPmImJihiPWEpO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gTChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIGpmPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24ga2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgdGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1lZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UudGFnPXJmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9bGYoKTtjPW1mKGMsYSk7dmFyIGQ9bmYoYyk7ZC50YWc9XG5zZjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7b2YoKTtwZihhLGQpO3FmKGEsYyl9fTtmdW5jdGlvbiB1ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFkZChjLGQpfHwhZGQoZSxmKTohMH1cbmZ1bmN0aW9uIHZmKGEsYixjKXt2YXIgZD0hMSxlPUhlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU0oZik6KGU9SihiKT9JZTpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9KZShhLGUpOkhlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9dGY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gd2YoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24geGYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU0oZik6KGY9SihiKT9JZTpILmN1cnJlbnQsZS5jb250ZXh0PUplKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihrZihhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHpmPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBBZihhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigxIT09Yy50YWc/eChcIjMwOVwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6eChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09amYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/eChcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOngoXCIyOTBcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIEJmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ4KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBDZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVhlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPUFmKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1ZZShjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1BZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWJmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVplKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1hZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYz1ZZShiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1BZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgV2I6cmV0dXJuIGI9YmYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHpmKGIpfHxcbmhjKGIpKXJldHVybiBiPVplKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO0JmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PVhiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTpsKGEsYixjLGQpOm51bGw7Y2FzZSBXYjpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbH1pZih6ZihjKXx8aGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO0JmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1YYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmwoYixhLGQsZSk7Y2FzZSBXYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKX1pZih6ZihkKXx8aGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO0JmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscT1nLHU9Zz0wLEI9bnVsbDtudWxsIT09cSYmdTxoLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHc9dChlLHEsaFt1XSxrKTtpZihudWxsPT09dyl7bnVsbD09PXEmJihxPUIpO2JyZWFrfWEmJlxucSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHcsZyx1KTtudWxsPT09bT9sPXc6bS5zaWJsaW5nPXc7bT13O3E9Qn1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKHE9cChlLGhbdV0saykpZz1mKHEsZyx1KSxudWxsPT09bT9sPXE6bS5zaWJsaW5nPXEsbT1xO3JldHVybiBsfWZvcihxPWQoZSxxKTt1PGgubGVuZ3RoO3UrKylpZihCPUEocSxlLHUsaFt1XSxrKSlhJiZudWxsIT09Qi5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT1CLmtleT91OkIua2V5KSxnPWYoQixnLHUpLG51bGw9PT1tP2w9QjptLnNpYmxpbmc9QixtPUI7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBSKGUsZyxoLGspe3ZhciBsPWhjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3goXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/eChcIjE1MVwiKTp2b2lkIDA7XG5mb3IodmFyIG09bD1udWxsLHE9Zyx1PWc9MCxCPW51bGwsdz1oLm5leHQoKTtudWxsIT09cSYmIXcuZG9uZTt1Kyssdz1oLm5leHQoKSl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdj10KGUscSx3LnZhbHVlLGspO2lmKG51bGw9PT12KXtxfHwocT1CKTticmVha31hJiZxJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7cT1CfWlmKHcuZG9uZSlyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PXAoZSx3LnZhbHVlLGspLG51bGwhPT13JiYoZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTtyZXR1cm4gbH1mb3IocT1kKGUscSk7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PUEocSxlLHUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGEmJm51bGwhPT13LmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PXcua2V5P3U6XG53LmtleSksZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1YYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBWYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PVhiOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PVhiP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1BZihhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPVxuay5zaWJsaW5nfWYudHlwZT09PVhiPyhkPVplKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1ZZShmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1BZihhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgV2I6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1iZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cblwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoemYoZikpcmV0dXJuIHYoYSxkLGYsaCk7aWYoaGMoZikpcmV0dXJuIFIoYSxkLGYsaCk7bCYmQmYoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDpoPWEudHlwZSx4KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgRGY9Q2YoITApLEVmPUNmKCExKSxGZj17fSxOPXtjdXJyZW50OkZmfSxHZj17Y3VycmVudDpGZn0sSGY9e2N1cnJlbnQ6RmZ9O2Z1bmN0aW9uIElmKGEpe2E9PT1GZj94KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpmKGEsYil7RyhIZixiLGEpO0coR2YsYSxhKTtHKE4sRmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6aGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWhlKGIsYyl9RihOLGEpO0coTixiLGEpfWZ1bmN0aW9uIEtmKGEpe0YoTixhKTtGKEdmLGEpO0YoSGYsYSl9ZnVuY3Rpb24gTGYoYSl7SWYoSGYuY3VycmVudCk7dmFyIGI9SWYoTi5jdXJyZW50KTt2YXIgYz1oZShiLGEudHlwZSk7YiE9PWMmJihHKEdmLGEsYSksRyhOLGMsYSkpfWZ1bmN0aW9uIE1mKGEpe0dmLmN1cnJlbnQ9PT1hJiYoRihOLGEpLEYoR2YsYSkpfVxudmFyIE5mPTAsT2Y9MixQZj00LFFmPTgsUmY9MTYsU2Y9MzIsVGY9NjQsVWY9MTI4LFZmPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsV2Y9MCxYZj1udWxsLE89bnVsbCxQPW51bGwsWWY9bnVsbCxRPW51bGwsWmY9bnVsbCwkZj0wLGFnPW51bGwsYmc9MCxjZz0hMSxkZz1udWxsLGVnPTA7ZnVuY3Rpb24gZmcoKXt4KFwiMzIxXCIpfWZ1bmN0aW9uIGdnKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIWJkKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUsZil7V2Y9ZjtYZj1iO1A9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7VmYuY3VycmVudD1udWxsPT09UD9pZzpqZztiPWMoZCxlKTtpZihjZyl7ZG8gY2c9ITEsZWcrPTEsUD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCxaZj1ZZixhZz1RPU89bnVsbCxWZi5jdXJyZW50PWpnLGI9YyhkLGUpO3doaWxlKGNnKTtkZz1udWxsO2VnPTB9VmYuY3VycmVudD1rZzthPVhmO2EubWVtb2l6ZWRTdGF0ZT1ZZjthLmV4cGlyYXRpb25UaW1lPSRmO2EudXBkYXRlUXVldWU9YWc7YS5lZmZlY3RUYWd8PWJnO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2E/eChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9ZnVuY3Rpb24gbGcoKXtWZi5jdXJyZW50PWtnO1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDtjZz0hMTtkZz1udWxsO2VnPTB9XG5mdW5jdGlvbiBtZygpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UT9ZZj1RPWE6UT1RLm5leHQ9YTtyZXR1cm4gUX1mdW5jdGlvbiBuZygpe2lmKG51bGwhPT1aZilRPVpmLFpmPVEubmV4dCxPPVAsUD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle251bGw9PT1QP3goXCIzMTBcIik6dm9pZCAwO089UDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtRPW51bGw9PT1RP1lmPWE6US5uZXh0PWE7UD1PLm5leHR9cmV0dXJuIFF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBwZyhhKXt2YXIgYj1uZygpLGM9Yi5xdWV1ZTtudWxsPT09Yz94KFwiMzExXCIpOnZvaWQgMDtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPGVnKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1kZyl7dmFyIGU9ZGcuZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe2RnLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsbD1kLGs9ITE7ZG97dmFyIG09bC5leHBpcmF0aW9uVGltZTttPFdmPyhrfHwoaz0hMCxoPWcsZT1mKSxtPiRmJiYoJGY9bSkpOmY9bC5lYWdlclJlZHVjZXI9PT1hP2wuZWFnZXJTdGF0ZTphKGYsbC5hY3Rpb24pO2c9bDtsPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWQpO2t8fChoPWcsZT1mKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWg7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09YWc/KGFnPXtsYXN0RWZmZWN0Om51bGx9LGFnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPWFnLmxhc3RFZmZlY3QsbnVsbD09PWI/YWcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsYWcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2coYSxiLGMsZCl7dmFyIGU9bWcoKTtiZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB0ZyhhLGIsYyxkKXt2YXIgZT1uZygpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmdnKGQsZy5kZXBzKSl7cmcoTmYsYyxmLGQpO3JldHVybn19Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyxmLGQpfWZ1bmN0aW9uIHVnKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gdmcoKXt9XG5mdW5jdGlvbiB3ZyhhLGIsYyl7MjU+ZWc/dm9pZCAwOngoXCIzMDFcIik7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PVhmfHxudWxsIT09ZCYmZD09PVhmKWlmKGNnPSEwLGE9e2V4cGlyYXRpb25UaW1lOldmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1kZyYmKGRnPW5ldyBNYXApLGM9ZGcuZ2V0KGIpLHZvaWQgMD09PWMpZGcuc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7b2YoKTt2YXIgZT1sZigpO2U9bWYoZSxhKTt2YXIgZj17ZXhwaXJhdGlvblRpbWU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1cbmR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGw9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGJkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31xZihhLGUpfX1cbnZhciBrZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmZyx1c2VDb250ZXh0OmZnLHVzZUVmZmVjdDpmZyx1c2VJbXBlcmF0aXZlSGFuZGxlOmZnLHVzZUxheW91dEVmZmVjdDpmZyx1c2VNZW1vOmZnLHVzZVJlZHVjZXI6ZmcsdXNlUmVmOmZnLHVzZVN0YXRlOmZnLHVzZURlYnVnVmFsdWU6Zmd9LGlnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7bWcoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHNnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg0LFBmfFNmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW1nKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW1nKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1tZygpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1tZygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsXG5sYXN0UmVuZGVyZWRSZWR1Y2VyOm9nLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTp2Z30samc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGcoNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0Zyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxcbmIpe3JldHVybiB0Zyg0LFBmfFNmLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6cGcsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIG5nKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHBnKG9nLGEpfSx1c2VEZWJ1Z1ZhbHVlOnZnfSx4Zz1udWxsLHlnPW51bGwsemc9ITE7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUsoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBCZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gQ2coYSl7aWYoemcpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUJnKGEsYikpe2I9RGUoYyk7aWYoIWJ8fCFCZyhhLGIpKXthLmVmZmVjdFRhZ3w9Mjt6Zz0hMTt4Zz1hO3JldHVybn1BZyh4ZyxjKX14Zz1hO3lnPUVlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsemc9ITEseGc9YX19ZnVuY3Rpb24gRGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxOCE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9ZnVuY3Rpb24gRWcoYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCF6ZylyZXR1cm4gRGcoYSksemc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiF4ZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9eWc7YjspQWcoYSxiKSxiPURlKGIpO0RnKGEpO3lnPXhnP0RlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEZnKCl7eWc9eGc9bnVsbDt6Zz0hMX1cbnZhciBHZz1UYi5SZWFjdEN1cnJlbnRPd25lcixxZz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/RWYoYixudWxsLGMsZCk6RGYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gSGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0lnKGIsZSk7ZD1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFWZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxMZyhhLGIsZyxkLGUsZik7YT1ZZShjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmRkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEpnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVhlKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZkZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihxZz0hMSxlPGYpP0pnKGEsYixmKTpNZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIE5nKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gTWcoYSxiLGMsZCxlKXt2YXIgZj1KKGMpP0llOkguY3VycmVudDtmPUplKGIsZik7SWcoYixlKTtjPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBPZyhhLGIsYyxkLGUpe2lmKEooYykpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtJZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksdmYoYixjLGQsZSkseGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKTtQZz0hMTt2YXIgdD1iLm1lbW9pemVkU3RhdGU7bD1nLnN0YXRlPXQ7dmFyIEE9Yi51cGRhdGVRdWV1ZTtudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksbD1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx0IT09bHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSxsPWIubWVtb2l6ZWRTdGF0ZSksKGg9UGd8fHVmKGIsYyxoLGQsdCxsLGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWwpLGcucHJvcHM9ZCxnLnN0YXRlPWwsZy5jb250ZXh0PWssZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkwoYi50eXBlLGgpLGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspLFBnPSExLGw9Yi5tZW1vaXplZFN0YXRlLHQ9Zy5zdGF0ZT1sLEE9Yi51cGRhdGVRdWV1ZSxudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksdD1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxsIT09dHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSx0PWIubWVtb2l6ZWRTdGF0ZSksKG09UGd8fHVmKGIsYyxoLGQsbCx0LGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1cbnQpLGcucHJvcHM9ZCxnLnN0YXRlPXQsZy5jb250ZXh0PWssZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIFFnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIFFnKGEsYixjLGQsZSxmKXtOZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmUGUoYixjLCExKSxKZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtHZy5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1EZihiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPURmKGIsbnVsbCxoLGYpKTpTKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlBlKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9NZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZNZShhLGIuY29udGV4dCwhMSk7SmYoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gU2coYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFN0YXRlO2lmKDA9PT0oYi5lZmZlY3RUYWcmNjQpKXtmPW51bGw7dmFyIGc9ITF9ZWxzZSBmPXt0aW1lZE91dEF0Om51bGwhPT1mP2YudGltZWRPdXRBdDowfSxnPSEwLGIuZWZmZWN0VGFnJj0tNjU7aWYobnVsbD09PWEpaWYoZyl7dmFyIGg9ZS5mYWxsYmFjazthPVplKG51bGwsZCwwLG51bGwpOzA9PT0oYi5tb2RlJjEpJiYoYS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCk7ZD1aZShoLGQsYyxudWxsKTthLnNpYmxpbmc9ZDtjPWE7Yy5yZXR1cm49ZC5yZXR1cm49Yn1lbHNlIGM9ZD1FZihiLG51bGwsZS5jaGlsZHJlbixjKTtlbHNlIG51bGwhPT1hLm1lbW9pemVkU3RhdGU/KGQ9YS5jaGlsZCxoPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZT1YZShkLGQucGVuZGluZ1Byb3BzLDApLDA9PT0oYi5tb2RlJjEpJiYoZz1udWxsIT09XG5iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1kLmNoaWxkJiYoZS5jaGlsZD1nKSksZD1lLnNpYmxpbmc9WGUoaCxjLGguZXhwaXJhdGlvblRpbWUpLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9RGYoYixkLmNoaWxkLGUuY2hpbGRyZW4sYykpOihoPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9WmUobnVsbCxkLDAsbnVsbCksZS5jaGlsZD1oLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1lLnNpYmxpbmc9WmUoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1EZihiLGgsZS5jaGlsZHJlbixjKSksYi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGU7Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gSmcoYSxiLGMpe251bGwhPT1hJiYoYi5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcyk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3goXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBUZyhhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8SS5jdXJyZW50KXFnPSEwO2Vsc2V7aWYoZDxjKXtxZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpSZyhiKTtGZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6SihiLnR5cGUpJiZPZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOlVnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiBTZyhhLGIsYyk7Yj1KZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gSmcoYSxiLGMpfX1lbHNlIHFnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPVxuYi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1KZShiLEguY3VycmVudCk7SWcoYixjKTtlPWhnKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7bGcoKTtpZihKKGQpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYma2YoYixkLGcsYSk7ZS51cGRhdGVyPXRmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7eGYoYixkLGEsYyk7Yj1RZyhudWxsLGIsZCwhMCxmLFxuYyl9ZWxzZSBiLnRhZz0wLFMobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9aGYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1XZShhKTtmPUwoYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9TWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz1PZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1IZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1LZyhudWxsLGIsYSxMKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6eChcIjMwNlwiLGEsXCJcIil9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksTWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsXG5lPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE9nKGEsYixkLGUsYyk7Y2FzZSAzOlJnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD94KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpRmcoKSxiPUpnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKXlnPUVlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLHhnPWIsZT16Zz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPUVmKGIsbnVsbCxkLGMpKTooUyhhLGIsZCxjKSxGZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBMZihiKSxudWxsPT09YSYmQ2coYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLFxuZz1lLmNoaWxkcmVuLHhlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZ4ZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxOZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUyhhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2coYiksbnVsbDtjYXNlIDEzOnJldHVybiBTZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1EZihiLG51bGwsZCxjKTpTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLEhnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtVZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9YmQoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUkuY3VycmVudCl7Yj1KZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgbD1oLmNvbnRleHREZXBlbmRlbmNpZXM7aWYobnVsbCE9PWwpe2c9aC5jaGlsZDtmb3IodmFyIGs9bC5maXJzdDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQmJjAhPT1cbihrLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYoaz1uZihjKSxrLnRhZz1zZixwZihoLGspKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2s9aC5hbHRlcm5hdGU7bnVsbCE9PWsmJmsuZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7az1jO2Zvcih2YXIgbT1oLnJldHVybjtudWxsIT09bTspe3ZhciBwPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxrKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1rLG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8ayYmKHAuY2hpbGRFeHBpcmF0aW9uVGltZT1rKTtlbHNlIGlmKG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8aylwLmNoaWxkRXhwaXJhdGlvblRpbWU9aztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP1xubnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sSWcoYixjKSxlPU0oZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPUwoZSxiLnBlbmRpbmdQcm9wcyksZj1MKGUudHlwZSxmKSxLZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gTGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09XG5kP2U6TChkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEooZCk/KGE9ITAsT2UoYikpOmE9ITEsSWcoYixjKSx2ZihiLGQsZSxjKSx4ZihiLGQsZSxjKSxRZyhudWxsLGIsZCwhMCxhLGMpfXgoXCIxNTZcIil9dmFyIFZnPXtjdXJyZW50Om51bGx9LFdnPW51bGwsWGc9bnVsbCxZZz1udWxsO2Z1bmN0aW9uIFVnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0coVmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIFpnKGEpe3ZhciBiPVZnLmN1cnJlbnQ7RihWZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIElnKGEsYil7V2c9YTtZZz1YZz1udWxsO3ZhciBjPWEuY29udGV4dERlcGVuZGVuY2llcztudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZT49YiYmKHFnPSEwKTthLmNvbnRleHREZXBlbmRlbmNpZXM9bnVsbH1cbmZ1bmN0aW9uIE0oYSxiKXtpZihZZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpWWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PVhnPyhudWxsPT09V2c/eChcIjMwOFwiKTp2b2lkIDAsWGc9YixXZy5jb250ZXh0RGVwZW5kZW5jaWVzPXtmaXJzdDpiLGV4cGlyYXRpb25UaW1lOjB9KTpYZz1YZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgJGc9MCxyZj0xLHNmPTIsYWg9MyxQZz0hMTtmdW5jdGlvbiBiaChhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBjaChhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOiRnLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIGRoKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHBmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1iaChjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9Y2goZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9Y2goZCkpO251bGw9PT1lfHxkPT09ZT9kaChkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KGRoKGQsYiksZGgoZSxiKSk6KGRoKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZWgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpOmZoKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9Y2goYikpO3JldHVybiBifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSByZjpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgYWg6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAkZzphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2Ugc2Y6UGc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiB5ZihhLGIsYyxkLGUpe1BnPSExO2I9ZmgoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxsPWIuZmlyc3RVcGRhdGUsaz1mO251bGwhPT1sOyl7dmFyIG09bC5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1sLGY9ayksaDxtJiYoaD1tKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bDooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RFZmZlY3Q9bCkpKTtsPWwubmV4dH1tPW51bGw7Zm9yKGw9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1sOyl7dmFyIHA9bC5leHBpcmF0aW9uVGltZTtwPGU/KG51bGw9PT1tJiYobT1sLG51bGw9PT1nJiYoZj1rKSksaDxwJiYoaD1wKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1sOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bCkpKTtsPWwubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWspO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9a31cbmZ1bmN0aW9uIGhoKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtpaChiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7aWgoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIGloKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIGpoKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6amMoYil9fWZ1bmN0aW9uIGtoKGEpe2EuZWZmZWN0VGFnfD00fXZhciBsaD12b2lkIDAsbWg9dm9pZCAwLG5oPXZvaWQgMCxvaD12b2lkIDA7bGg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O21oPWZ1bmN0aW9uKCl7fTtcbm5oPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihOLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj12YyhnLGYpO2Q9dmMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPSRkKGcsZik7ZD0kZChnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWJlKGcsZik7ZD1iZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXRlKX1xZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmc2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZraChiKX19O29oPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZraChiKX07XG52YXIgcGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gcWgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1qYyhjKSk7bnVsbCE9PWMmJmljKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJmljKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIHJoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3NoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIHRoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09TmYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1OZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIHVoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1uZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gdmgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFJlJiZSZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe3NoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6cmgoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe3NoKGEsZil9YnJlYWs7Y2FzZSA1OnJoKGEpO2JyZWFrO2Nhc2UgNDp3aChhKX19XG5mdW5jdGlvbiB4aChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIHloKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKHhoKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn14KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6eChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKGtlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHx4aChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyZcbjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9dGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiB3aChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz94KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYodmgoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnKXtpZihudWxsIT09Yi5jaGlsZCl7ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYodmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gemgoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp0aChQZixRZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZDZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9bGYoKSkpO251bGwhPT1hJiZ1aChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBwaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUFoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fXZhciBCaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBDaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGgoZCk7cWgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Rmg/Rmg9bmV3IFNldChbdGhpc10pOkZoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7cWgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBHaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpKKGEudHlwZSkmJktlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIEtmKGEpLExlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT94KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBNZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAxODpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gWmcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBIaD1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEloPVRiLlJlYWN0Q3VycmVudE93bmVyLEpoPTEwNzM3NDE4MjIsS2g9ITEsVD1udWxsLExoPW51bGwsVT0wLE1oPS0xLE5oPSExLFY9bnVsbCxPaD0hMSxQaD1udWxsLFFoPW51bGwsUmg9bnVsbCxGaD1udWxsO2Z1bmN0aW9uIFNoKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTticmVhaztjYXNlIDU6TWYoYik7YnJlYWs7Y2FzZSA0OktmKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYil9YT1hLnJldHVybn1MaD1udWxsO1U9MDtNaD0tMTtOaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBUaCgpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYT1WLmVmZmVjdFRhZzthJjE2JiZrZShWLnN0YXRlTm9kZSxcIlwiKTtpZihhJjEyOCl7dmFyIGI9Vi5hbHRlcm5hdGU7bnVsbCE9PWImJihiPWIucmVmLG51bGwhPT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihudWxsKTpiLmN1cnJlbnQ9bnVsbCkpfXN3aXRjaChhJjE0KXtjYXNlIDI6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OnpoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODphPVYsd2goYSksYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsLGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwpfVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFVoKCl7Zm9yKDtudWxsIT09Vjspe2lmKFYuZWZmZWN0VGFnJjI1NilhOnt2YXIgYT1WLmFsdGVybmF0ZSxiPVY7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKE9mLE5mLGIpO2JyZWFrIGE7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6TChiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OngoXCIxNjNcIil9fVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFZoKGEsYil7Zm9yKDtudWxsIT09Vjspe3ZhciBjPVYuZWZmZWN0VGFnO2lmKGMmMzYpe3ZhciBkPVYuYWx0ZXJuYXRlLGU9VixmPWI7c3dpdGNoKGUudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKFJmLFNmLGUpO2JyZWFrO2Nhc2UgMTp2YXIgZz1lLnN0YXRlTm9kZTtpZihlLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kKWcuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoPWUuZWxlbWVudFR5cGU9PT1lLnR5cGU/ZC5tZW1vaXplZFByb3BzOkwoZS50eXBlLGQubWVtb2l6ZWRQcm9wcyk7Zy5jb21wb25lbnREaWRVcGRhdGUoaCxkLm1lbW9pemVkU3RhdGUsZy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9ZD1lLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiZoaChlLGQsZyxmKTticmVhaztjYXNlIDM6ZD1lLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kKXtnPW51bGw7aWYobnVsbCE9PWUuY2hpbGQpc3dpdGNoKGUuY2hpbGQudGFnKXtjYXNlIDU6Zz1cbmUuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPWUuY2hpbGQuc3RhdGVOb2RlfWhoKGUsZCxnLGYpfWJyZWFrO2Nhc2UgNTpmPWUuc3RhdGVOb2RlO251bGw9PT1kJiZlLmVmZmVjdFRhZyY0JiZ3ZShlLnR5cGUsZS5tZW1vaXplZFByb3BzKSYmZi5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX1jJjEyOCYmKGU9Vi5yZWYsbnVsbCE9PWUmJihmPVYuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlP2UoZik6ZS5jdXJyZW50PWYpKTtjJjUxMiYmKFBoPWEpO1Y9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFdoKGEsYil7Umg9UWg9UGg9bnVsbDt2YXIgYz1XO1c9ITA7ZG97aWYoYi5lZmZlY3RUYWcmNTEyKXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7dmFyIGY9Yjt0aChVZixOZixmKTt0aChOZixUZixmKX1jYXRjaChnKXtkPSEwLGU9Z31kJiZzaChiLGUpfWI9Yi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1iKTtXPWM7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpO1h8fFd8fFloKDEwNzM3NDE4MjMsITEpfWZ1bmN0aW9uIG9mKCl7bnVsbCE9PVFoJiZCZShRaCk7bnVsbCE9PVJoJiZSaCgpfVxuZnVuY3Rpb24gWmgoYSxiKXtPaD1LaD0hMDthLmN1cnJlbnQ9PT1iP3goXCIxNzdcIik6dm9pZCAwO3ZhciBjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3goXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZSxlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtlZihhLGU+ZD9lOmQpO0loLmN1cnJlbnQ9bnVsbDtkPXZvaWQgMDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3VlPUJkO3ZlPVBkKCk7QmQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7dmFyIGY9dm9pZCAwO3RyeXtVaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1mb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtcbmY9dm9pZCAwO3RyeXtUaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1RZCh2ZSk7dmU9bnVsbDtCZD0hIXVlO3VlPW51bGw7YS5jdXJyZW50PWI7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e1ZoKGEsYyl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWlmKG51bGwhPT1kJiZudWxsIT09UGgpe3ZhciBnPVdoLmJpbmQobnVsbCxhLGQpO1FoPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gQWUoZyl9KTtSaD1nfUtoPU9oPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBRZSYmUWUoYi5zdGF0ZU5vZGUpO2M9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPVxuYj5jP2I6YzswPT09YiYmKEZoPW51bGwpOyRoKGEsYil9XG5mdW5jdGlvbiBhaShhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7VD1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVU7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpRWcoYiksYi5lZmZlY3RUYWcmPS0zO21oKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTt2YXIgaD1JZihIZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpbmgoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBsPUlmKE4uY3VycmVudCk7aWYoRWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxwPWg7ZVtGYV09ZztlW0dhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxhYi5sZW5ndGg7aysrKUUoYWJba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLGUpO0UoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixlKTtFKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MoZSxtKTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UoZSxtKSxFKFwiaW52YWxpZFwiLGUpLHNlKHAsXCJvbkNoYW5nZVwiKX1xZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmc2UocCxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlJiKGUpO0FjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIoZSk7ZWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXRlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYma2goYil9ZWxzZXttPWI7cD1mO2U9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1mZS5odG1sJiYobD1nZShwKSk7bD09PWZlLmh0bWw/XCJzY3JpcHRcIj09PXA/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZS5pcz9rPWsuY3JlYXRlRWxlbWVudChwLHtpczplLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KHApLFwic2VsZWN0XCI9PT1wJiYocD1rLGUubXVsdGlwbGU/cC5tdWx0aXBsZT0hMDplLnNpemUmJihwLnNpemU9ZS5zaXplKSkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxwKTtlPWs7ZVtGYV09bTtlW0dhXT1nO2xoKGUsYiwhMSwhMSk7cD1lO2s9ZjttPWc7dmFyIHQ9aCxBPXJlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixcbnApO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWIubGVuZ3RoO2grKylFKGFiW2hdLHApO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLHApO0UoXCJsb2FkXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIscCk7RShcInN1Ym1pdFwiLHApO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixwKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MocCxtKTtoPXZjKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9JGQocCxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShwLFxubSk7aD1iZShwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXFlKGssaCk7bD12b2lkIDA7dmFyIHY9ayxSPXAsdT1oO2ZvcihsIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIHE9dVtsXTtcInN0eWxlXCI9PT1sP29lKFIscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8ocT1xP3EuX19odG1sOnZvaWQgMCxudWxsIT1xJiZqZShSLHEpKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2YgcT8oXCJ0ZXh0YXJlYVwiIT09dnx8XCJcIiE9PXEpJiZrZShSLHEpOlwibnVtYmVyXCI9PT10eXBlb2YgcSYma2UoUixcIlwiK3EpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihyYS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1xJiZzZSh0LGwpOm51bGwhPXEmJnRjKFIsbCxxLEEpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6UmIocCk7XG5BYyhwLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKHApO2VlKHAsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnAuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3VjKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1wO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3A9bS52YWx1ZTtudWxsIT1wP2FlKGgsISFtLm11bHRpcGxlLHAsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZhZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocC5vbmNsaWNrPXRlKX0oZz13ZShmLGcpKSYma2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/b2goZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDApLGU9SWYoSGYuY3VycmVudCksSWYoTi5jdXJyZW50KSxFZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltGYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZraChiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tGYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7VD1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6S2YoYik7bWgoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAxODpicmVhaztkZWZhdWx0OngoXCIxNTZcIil9VD1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVQpcmV0dXJuIFQ7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmXG4oYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdoKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGJpKGEpe3ZhciBiPVRnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1haShhKSk7SWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gY2koYSxiKXtLaD94KFwiMjQzXCIpOnZvaWQgMDtvZigpO0toPSEwO3ZhciBjPUhoLmN1cnJlbnQ7SGguY3VycmVudD1rZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1VfHxhIT09TGh8fG51bGw9PT1UKVNoKCksTGg9YSxVPWQsVD1YZShMaC5jdXJyZW50LG51bGwsVSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1UJiYhZGkoKTspVD1iaShUKTtlbHNlIGZvcig7bnVsbCE9PVQ7KVQ9YmkoVCl9Y2F0Y2godSl7aWYoWWc9WGc9V2c9bnVsbCxsZygpLG51bGw9PT1UKWU9ITAsRGgodSk7ZWxzZXtudWxsPT09VD94KFwiMjcxXCIpOnZvaWQgMDt2YXIgZj1ULGc9Zi5yZXR1cm47aWYobnVsbD09PWcpZT0hMCxEaCh1KTtlbHNle2E6e3ZhciBoPWEsbD1nLGs9ZixtPXU7Zz1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PVxubSYmXCJvYmplY3RcIj09PXR5cGVvZiBtJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS50aGVuKXt2YXIgcD1tO209bDt2YXIgdD0tMSxBPS0xO2Rve2lmKDEzPT09bS50YWcpe3ZhciB2PW0uYWx0ZXJuYXRlO2lmKG51bGwhPT12JiYodj12Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXYpKXtBPTEwKigxMDczNzQxODIyLXYudGltZWRPdXRBdCk7YnJlYWt9dj1tLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHYpaWYoMD49dil0PTA7ZWxzZSBpZigtMT09PXR8fHY8dCl0PXZ9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1sO2Rve2lmKHY9MTM9PT1tLnRhZyl2PXZvaWQgMD09PW0ubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bS5tZW1vaXplZFN0YXRlO2lmKHYpe2w9bS51cGRhdGVRdWV1ZTtudWxsPT09bD8obD1uZXcgU2V0LGwuYWRkKHApLG0udXBkYXRlUXVldWU9bCk6bC5hZGQocCk7aWYoMD09PShtLm1vZGUmMSkpe20uZWZmZWN0VGFnfD1cbjY0O2suZWZmZWN0VGFnJj0tMTk1NzsxPT09ay50YWcmJihudWxsPT09ay5hbHRlcm5hdGU/ay50YWc9MTc6KGc9bmYoMTA3Mzc0MTgyMyksZy50YWc9c2YscGYoayxnKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9aDtsPWc7dmFyIFI9ay5waW5nQ2FjaGU7bnVsbD09PVI/KFI9ay5waW5nQ2FjaGU9bmV3IEJoLHY9bmV3IFNldCxSLnNldChwLHYpKToodj1SLmdldChwKSx2b2lkIDA9PT12JiYodj1uZXcgU2V0LFIuc2V0KHAsdikpKTt2LmhhcyhsKXx8KHYuYWRkKGwpLGs9ZWkuYmluZChudWxsLGsscCxsKSxwLnRoZW4oayxrKSk7LTE9PT10P2g9MTA3Mzc0MTgyMzooLTE9PT1BJiYoQT0xMCooMTA3Mzc0MTgyMi1nZihoLGcpKS01RTMpLGg9QSt0KTswPD1oJiZNaDxoJiYoTWg9aCk7bS5lZmZlY3RUYWd8PTIwNDg7bS5leHBpcmF0aW9uVGltZT1nO2JyZWFrIGF9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1FcnJvcigoaWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcblwiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIramMoaykpfU5oPSEwO209amgobSxrKTtoPWw7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5lZmZlY3RUYWd8PTIwNDg7aC5leHBpcmF0aW9uVGltZT1nO2c9Q2goaCxtLGcpO2VoKGgsZyk7YnJlYWsgYTtjYXNlIDE6aWYodD1tLEE9aC50eXBlLGs9aC5zdGF0ZU5vZGUsMD09PShoLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1rJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhrKSkpKXtoLmVmZmVjdFRhZ3w9MjA0ODtcbmguZXhwaXJhdGlvblRpbWU9ZztnPUVoKGgsdCxnKTtlaChoLGcpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVQ9YWkoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtLaD0hMTtIaC5jdXJyZW50PWM7WWc9WGc9V2c9bnVsbDtsZygpO2lmKGUpTGg9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVQpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2M9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09Yz94KFwiMjgxXCIpOnZvaWQgMDtMaD1udWxsO2lmKE5oKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7Zj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU8ZHx8MCE9PWYmJmY8ZHx8MCE9PWcmJmc8ZCl7ZmYoYSxkKTtmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJmIpe2EuZGlkRXJyb3I9ITA7ZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWQ7XG5iPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztmaShhLGMsZCxiLC0xKTtyZXR1cm59fWImJi0xIT09TWg/KGZmKGEsZCksYj0xMCooMTA3Mzc0MTgyMi1nZihhLGQpKSxiPE1oJiYoTWg9YiksYj0xMCooMTA3Mzc0MTgyMi1sZigpKSxiPU1oLWIsZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWQsYS5maW5pc2hlZFdvcms9Yyl9fVxuZnVuY3Rpb24gc2goYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoZCkpKXthPWpoKGIsYSk7YT1FaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT1qaChiLGEpO2E9Q2goYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPWpoKGIsYSksYz1DaChhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxxZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIG1mKGEsYil7dmFyIGM9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpLGQ9dm9pZCAwO2lmKDA9PT0oYi5tb2RlJjEpKWQ9MTA3Mzc0MTgyMztlbHNlIGlmKEtoJiYhT2gpZD1VO2Vsc2V7c3dpdGNoKGMpe2Nhc2Ugci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eTpkPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eTpkPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX0xvd1ByaW9yaXR5OmNhc2Ugci51bnN0YWJsZV9JZGxlUHJpb3JpdHk6ZD0xO2JyZWFrO2RlZmF1bHQ6eChcIjMxM1wiKX1udWxsIT09TGgmJmQ9PT1VJiYtLWR9Yz09PXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkmJlxuKDA9PT1naXx8ZDxnaSkmJihnaT1kKTtyZXR1cm4gZH1mdW5jdGlvbiBlaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1MaCYmVT09PWMpTGg9bnVsbDtlbHNlIGlmKGI9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWUsMCE9PWImJmM8PWImJmM+PWQpe2EuZGlkRXJyb3I9ITE7Yj1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWJ8fGI+YylhLmxhdGVzdFBpbmdlZFRpbWU9YztkZihjLGEpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKX19ZnVuY3Rpb24gQWgoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1sZigpO2I9bWYoYixhKTthPWhpKGEsYik7bnVsbCE9PWEmJihjZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmWGgoYSxiKSl9XG5mdW5jdGlvbiBoaShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gcWYoYSxiKXthPWhpKGEsYik7bnVsbCE9PWEmJighS2gmJjAhPT1VJiZiPlUmJlNoKCksY2YoYSxiKSxLaCYmIU9oJiZMaD09PWF8fFhoKGEsYS5leHBpcmF0aW9uVGltZSksaWk+amkmJihpaT0wLHgoXCIxODVcIikpKX1mdW5jdGlvbiBraShhLGIsYyxkLGUpe3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX12YXIgbGk9bnVsbCxZPW51bGwsbWk9MCxuaT12b2lkIDAsVz0hMSxvaT1udWxsLFo9MCxnaT0wLHBpPSExLHFpPW51bGwsWD0hMSxyaT0hMSxzaT1udWxsLHRpPXIudW5zdGFibGVfbm93KCksdWk9MTA3Mzc0MTgyMi0odGkvMTB8MCksdmk9dWksamk9NTAsaWk9MCx3aT1udWxsO2Z1bmN0aW9uIHhpKCl7dWk9MTA3Mzc0MTgyMi0oKHIudW5zdGFibGVfbm93KCktdGkpLzEwfDApfVxuZnVuY3Rpb24geWkoYSxiKXtpZigwIT09bWkpe2lmKGI8bWkpcmV0dXJuO251bGwhPT1uaSYmci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhuaSl9bWk9YjthPXIudW5zdGFibGVfbm93KCktdGk7bmk9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHppLHt0aW1lb3V0OjEwKigxMDczNzQxODIyLWIpLWF9KX1mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2EuZXhwaXJhdGlvblRpbWU9ZDswIT09ZXx8ZGkoKT8wPGUmJihhLnRpbWVvdXRIYW5kbGU9eWUoQWkuYmluZChudWxsLGEsYixjKSxlKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9Yil9ZnVuY3Rpb24gQWkoYSxiLGMpe2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWM7YS5maW5pc2hlZFdvcms9Yjt4aSgpO3ZpPXVpO0JpKGEsYyl9ZnVuY3Rpb24gJGgoYSxiKXthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1cbmZ1bmN0aW9uIGxmKCl7aWYoVylyZXR1cm4gdmk7Q2koKTtpZigwPT09Wnx8MT09PVopeGkoKSx2aT11aTtyZXR1cm4gdml9ZnVuY3Rpb24gWGgoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1ZPyhsaT1ZPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWT1ZLm5leHRTY2hlZHVsZWRSb290PWEsWS5uZXh0U2NoZWR1bGVkUm9vdD1saSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFg/cmkmJihvaT1hLFo9MTA3Mzc0MTgyMyxEaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9ZaCgxMDczNzQxODIzLCExKTp5aShhLGIpKX1cbmZ1bmN0aW9uIENpKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVkpZm9yKHZhciBjPVksZD1saTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WT94KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGk9WT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGkpbGk9ZT1kLm5leHRTY2hlZHVsZWRSb290LFkubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WSl7WT1jO1kubmV4dFNjaGVkdWxlZFJvb3Q9bGk7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WSlicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fW9pPWI7Wj1hfXZhciBFaT0hMTtmdW5jdGlvbiBkaSgpe3JldHVybiBFaT8hMDpyLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/RWk9ITA6ITF9ZnVuY3Rpb24gemkoKXt0cnl7aWYoIWRpKCkmJm51bGwhPT1saSl7eGkoKTt2YXIgYT1saTtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZ1aTw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249dWkpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09bGkpfVloKDAsITApfWZpbmFsbHl7RWk9ITF9fVxuZnVuY3Rpb24gWWgoYSxiKXtDaSgpO2lmKGIpZm9yKHhpKCksdmk9dWk7bnVsbCE9PW9pJiYwIT09WiYmYTw9WiYmIShFaSYmdWk+Wik7KURpKG9pLFosdWk+WiksQ2koKSx4aSgpLHZpPXVpO2Vsc2UgZm9yKDtudWxsIT09b2kmJjAhPT1aJiZhPD1aOylEaShvaSxaLCExKSxDaSgpO2ImJihtaT0wLG5pPW51bGwpOzAhPT1aJiZ5aShvaSxaKTtpaT0wO3dpPW51bGw7aWYobnVsbCE9PXNpKWZvcihhPXNpLHNpPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7cGl8fChwaT0hMCxxaT1kKX19aWYocGkpdGhyb3cgYT1xaSxxaT1udWxsLHBpPSExLGE7fWZ1bmN0aW9uIEJpKGEsYil7Vz94KFwiMjUzXCIpOnZvaWQgMDtvaT1hO1o9YjtEaShhLGIsITEpO1loKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gRGkoYSxiLGMpe1c/eChcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihkaSgpP2EuZmluaXNoZWRXb3JrPWQ6RmkoYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmRmkoYSxkLGIpKTtXPSExfVxuZnVuY3Rpb24gRmkoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09c2k/c2k9W2RdOnNpLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09d2k/aWkrKzood2k9YSxpaT0wKTtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7WmgoYSxiKX0pfWZ1bmN0aW9uIERoKGEpe251bGw9PT1vaT94KFwiMjQ2XCIpOnZvaWQgMDtvaS5leHBpcmF0aW9uVGltZT0wO3BpfHwocGk9ITAscWk9YSl9ZnVuY3Rpb24gR2koYSxiKXt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFg9Yyl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEhpKGEsYil7aWYoWCYmIXJpKXtyaT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtyaT0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gSWkoYSxiLGMpe1h8fFd8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKTt2YXIgZD1YO1g9ITA7dHJ5e3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjKX0pfWZpbmFsbHl7KFg9ZCl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEppKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWVkKGMpJiYxPT09Yy50YWc/dm9pZCAwOngoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoSihnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3goXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoSihoKSl7Yz1OZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1IZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1uZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5vZigpO3BmKGYsZSk7cWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBLaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1sZigpO2U9bWYoZixlKTtyZXR1cm4gSmkoYSxiLGMsZSxkKX1mdW5jdGlvbiBMaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIE1pKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6V2Isa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5BYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOnljKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1LYShkKTtlP3ZvaWQgMDp4KFwiOTBcIik7U2IoZCk7eWMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZhZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gTmkoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWxmKCkrNTAwKS8yNXwwKSsxKTtiPj1KaCYmKGI9SmgtMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smg9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfU5pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOngoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBPaTtKaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5OaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5OaS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6eChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD94KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO0JpKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O05pLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBPaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfU9pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5PaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIFBpKGEsYixjKXtiPUsoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGluZ0NhY2hlOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuUGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBPaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7S2koYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtQaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgT2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO0tpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307UGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IE9pO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtLaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuUGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IE5pKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gUWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUdiPUdpO0hiPUlpO0liPWZ1bmN0aW9uKCl7V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApfTtcbmZ1bmN0aW9uIFJpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgUGkoYSwhMSxiKX1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVJpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1IaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gTGkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIFRpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIE1pKGEsYixudWxsLGMpfVxudmFyIFZpPXtjcmVhdGVQb3J0YWw6VGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj94KFwiMTg4XCIpOngoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9aGQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtRaShjKT92b2lkIDA6eChcIjIwMFwiKTtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/XG54KFwiMzhcIik6dm9pZCAwO3JldHVybiBTaShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtRaShhKT92b2lkIDA6eChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEhpKGZ1bmN0aW9uKCl7U2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gVGkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOkdpLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpJaSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3goXCIxODdcIik6dm9pZCAwO3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGtpKGEsYil9ZmluYWxseXtYPWMsWWgoMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9jcmVhdGVSb290OlVpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1cblg7WD0hMDt0cnl7a2koYSl9ZmluYWxseXsoWD1iKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltJYSxKYSxLYSxCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscGEsUWEsZnVuY3Rpb24oYSl7eWEoYSxQYSl9LEViLEZiLERkLERhXX19O2Z1bmN0aW9uIFVpKGEsYil7UWkoYSk/dm9pZCAwOngoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBQaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1cbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBUZShuKHt9LGEse292ZXJyaWRlUHJvcHM6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi44LjZcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgV2k9e2RlZmF1bHQ6Vml9LFhpPVdpJiZWaXx8V2k7bW9kdWxlLmV4cG9ydHM9WGkuZGVmYXVsdHx8WGk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjEzLjZcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD1udWxsLGU9ITEsZz0zLGs9LTEsbD0tMSxtPSExLG49ITE7ZnVuY3Rpb24gcCgpe2lmKCFtKXt2YXIgYT1kLmV4cGlyYXRpb25UaW1lO24/cSgpOm49ITA7cih0LGEpfX1cbmZ1bmN0aW9uIHUoKXt2YXIgYT1kLGI9ZC5uZXh0O2lmKGQ9PT1iKWQ9bnVsbDtlbHNle3ZhciBjPWQucHJldmlvdXM7ZD1jLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtjPWEuY2FsbGJhY2s7Yj1hLmV4cGlyYXRpb25UaW1lO2E9YS5wcmlvcml0eUxldmVsO3ZhciBmPWcsUT1sO2c9YTtsPWI7dHJ5e3ZhciBoPWMoKX1maW5hbGx5e2c9ZixsPVF9aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgpaWYoaD17Y2FsbGJhY2s6aCxwcmlvcml0eUxldmVsOmEsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH0sbnVsbD09PWQpZD1oLm5leHQ9aC5wcmV2aW91cz1oO2Vsc2V7Yz1udWxsO2E9ZDtkb3tpZihhLmV4cGlyYXRpb25UaW1lPj1iKXtjPWE7YnJlYWt9YT1hLm5leHR9d2hpbGUoYSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9aCxwKCkpO2I9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1oO2gubmV4dD1jO2gucHJldmlvdXM9XG5ifX1mdW5jdGlvbiB2KCl7aWYoLTE9PT1rJiZudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl7bT0hMDt0cnl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKX1maW5hbGx5e209ITEsbnVsbCE9PWQ/cCgpOm49ITF9fX1mdW5jdGlvbiB0KGEpe209ITA7dmFyIGI9ZTtlPWE7dHJ5e2lmKGEpZm9yKDtudWxsIT09ZDspe3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoZC5leHBpcmF0aW9uVGltZTw9Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPD1jKX1lbHNlIGJyZWFrfWVsc2UgaWYobnVsbCE9PWQpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmIXcoKSl9fWZpbmFsbHl7bT0hMSxlPWIsbnVsbCE9PWQ/cCgpOm49ITEsdigpfX1cbnZhciB4PURhdGUseT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZT9jYW5jZWxBbmltYXRpb25GcmFtZTp2b2lkIDAsQyxEO2Z1bmN0aW9uIEUoYSl7Qz1BKGZ1bmN0aW9uKGIpe3ooRCk7YShiKX0pO0Q9eShmdW5jdGlvbigpe0IoQyk7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sMTAwKX1cbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBGPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIEYubm93KCl9fWVsc2UgZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKX07dmFyIHIscSx3LEc9bnVsbDtcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdz9HPXdpbmRvdzpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGdsb2JhbCYmKEc9Z2xvYmFsKTtcbmlmKEcmJkcuX3NjaGVkTW9jayl7dmFyIEg9Ry5fc2NoZWRNb2NrO3I9SFswXTtxPUhbMV07dz1IWzJdO2V4cG9ydHMudW5zdGFibGVfbm93PUhbM119ZWxzZSBpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgST1udWxsLEo9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUkpdHJ5e0koYSl9ZmluYWxseXtJPW51bGx9fTtyPWZ1bmN0aW9uKGEpe251bGwhPT1JP3NldFRpbWVvdXQociwwLGEpOihJPWEsc2V0VGltZW91dChKLDAsITEpKX07cT1mdW5jdGlvbigpe0k9bnVsbH07dz1mdW5jdGlvbigpe3JldHVybiExfX1lbHNle1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7dmFyIEs9bnVsbCxMPSExLE09LTEsTj0hMSxPPSExLFA9MCxSPTMzLFM9MzM7dz1mdW5jdGlvbigpe3JldHVybiBQPD1leHBvcnRzLnVuc3RhYmxlX25vdygpfTt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7TD0hMTt2YXIgYT1LLGI9TTtLPW51bGw7TT0tMTt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpLGY9ITE7aWYoMD49UC1jKWlmKC0xIT09YiYmYjw9YylmPSEwO2Vsc2V7Tnx8KE49ITAsRShWKSk7Sz1hO009YjtyZXR1cm59aWYobnVsbCE9PWEpe089ITA7dHJ5e2EoZil9ZmluYWxseXtPPSExfX19O1xudmFyIFY9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUspe0UoVik7dmFyIGI9YS1QK1M7YjxTJiZSPFM/KDg+YiYmKGI9OCksUz1iPFI/UjpiKTpSPWI7UD1hK1M7THx8KEw9ITAsVS5wb3N0TWVzc2FnZSh2b2lkIDApKX1lbHNlIE49ITF9O3I9ZnVuY3Rpb24oYSxiKXtLPWE7TT1iO098fDA+Yj9VLnBvc3RNZXNzYWdlKHZvaWQgMCk6Tnx8KE49ITAsRShWKSl9O3E9ZnVuY3Rpb24oKXtLPW51bGw7TD0hMTtNPS0xfX1leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9ZyxmPWs7Zz1hO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChnKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1nfXZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWMrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGcpe2Nhc2UgMTpiPWMrLTE7YnJlYWs7Y2FzZSAyOmI9YysyNTA7YnJlYWs7Y2FzZSA1OmI9YysxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWMrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1jKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6ZyxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09ZClkPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7Yz1udWxsO3ZhciBmPWQ7ZG97aWYoZi5leHBpcmF0aW9uVGltZT5iKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9YSxwKCkpO1xuYj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpZD1udWxsO2Vsc2V7YT09PWQmJihkPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1nO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2c9YyxrPWYsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gZ307XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWUmJihudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7bnVsbCE9PWQmJnAoKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBkfTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vTG9naW5TY3JlZW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vTG9naW5TY3JlZW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL0xvZ2luU2NyZWVuLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkxvZ2luU2NyZWVuIHtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgbWluLWhlaWdodDogMTAwdmg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6Z3JleTtcXG59XCIsIFwiXCJdKTtcblxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMSA/IGxlbiAtIDEgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAxOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDFdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsImZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3Q7IiwiZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2d1ZCA9IHJlcXVpcmUoJ2d1ZCcpO1xuXG52YXIgX2d1ZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ndWQpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuLy8gSW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArICgwLCBfZ3VkMi5kZWZhdWx0KSgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cyA9IHZvaWQgMDtcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDsgLy8gTm8gY2hhbmdlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGVtcDIsIF90aGlzMiwgX3JldDI7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25zdW1lcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQyID0gKF90ZW1wMiA9IChfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50Mi5jYWxsLmFwcGx5KF9Db21wb25lbnQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzMiksIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9LCBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKCkgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90ZW1wMiksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzMiwgX3JldDIpO1xuICAgIH1cblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcblxuXG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWFjdENvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvLyBAZmxvd1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdsb2JhbFtrZXldID0gKGdsb2JhbFtrZXldIHx8IDApICsgMTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQuaW5kZXhPZignRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogJykgPT09IDApIHtcbiAgICAgIHJldHVybjsgLy8gSWdub3JlIENvbXBvc2l0ZUNvbXBvbmVudCBwcm9wdHlwZSBjaGVjay5cbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkodW5kZWZpbmVkLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vUmVnaXN0ZXJTY3JlZW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vUmVnaXN0ZXJTY3JlZW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL1JlZ2lzdGVyU2NyZWVuLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLlJlZ2lzdGVyU2NyZWVuIHtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgbWluLWhlaWdodDogMTAwdmg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6Z3JleTtcXG59XCIsIFwiXCJdKTtcblxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kID8gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpIDogJ2dldCc7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL0FkbWluTmF2aWdhdGlvbi5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTchLi9BZG1pbk5hdmlnYXRpb24uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL0FkbWluTmF2aWdhdGlvbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5OYXZpZ2F0aW9uIHtcXG4gIHBhZGRpbmc6IDIwcHggMzBweDtcXG59XCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTchLi9BZG1pbkRhc2hib2FyZFNjcmVlbi5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTchLi9BZG1pbkRhc2hib2FyZFNjcmVlbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQWRtaW5EYXNoYm9hcmRTY3JlZW4uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuQWRtaW5EYXNoYm9hcmRTY3JlZW4ge1xcbiAgICB3aWR0aDoxMDAlO1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjpncmV5O1xcbn1cXG5cXG4uQWRtaW5EYXNoYm9hcmRTY3JlZW4gLlRvcCB7XFxuICAgIHBhZGRpbmc6IDIwcHggMzBweDtcXG59XFxuXFxuLkFkbWluRGFzaGJvYXJkU2NyZWVuIC5CdXR0b25zQ29udGFpbmVyIC5CdXR0b246Zmlyc3QtY2hpbGQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDQwcHg7XFxufVxcblxcbi5BZG1pbkRhc2hib2FyZFNjcmVlbiAuQnV0dG9uc0NvbnRhaW5lciAuQnV0dG9uOmxhc3QtY2hpbGQge1xcbiAgICBtYXJnaW4tbGVmdDogNDBweDtcXG59XFxuXFxuLkFkbWluRGFzaGJvYXJkU2NyZWVuIC5CdXR0b25zQ29udGFpbmVyIC5CdXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogNDBweCAzMHB4O1xcbiAgICBib3JkZXI6IHNvbGlkIGJsYWNrO1xcbiAgICBib3JkZXItcmFkaXVzOiAxMCU7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gICAgLkFkbWluRGFzaGJvYXJkU2NyZWVuIC5CdXR0b25zQ29udGFpbmVyIC5CdXR0b246Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNDBweDtcXG4gICAgICAgIG1hcmdpbi1yaWdodDowO1xcbiAgICB9XFxuICAgIFxcbiAgICAuQWRtaW5EYXNoYm9hcmRTY3JlZW4gLkJ1dHRvbnNDb250YWluZXIgLkJ1dHRvbjpsYXN0LWNoaWxkIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XFxuICAgICAgICBtYXJnaW4tbGVmdDowO1xcbiAgICB9ICAgXFxufVwiLCBcIlwiXSk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQWRtaW5EYXRhYmFzZVRhYmxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL0FkbWluRGF0YWJhc2VUYWJsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQWRtaW5EYXRhYmFzZVRhYmxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkFkbWluRGF0YWJhc2VUYWJsZSAuTWFpbiB7XFxuICBwYWRkaW5nOiAwIDMwcHg7XFxufVxcblxcbi5BZG1pbkRhdGFiYXNlVGFibGUgLk1haW4gLlRvb2xzIHtcXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XFxufVxcblxcbi5BZG1pbkRhdGFiYXNlVGFibGUgLk1haW4gLlRhYmxlQm9keUNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IDcydmg7XFxuICBtYXgtaGVpZ2h0OiA3MnZoO1xcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcXG59XFxuXFxuLkFkbWluRGF0YWJhc2VUYWJsZSAuTWFpbiAuVGFibGVCb2R5Q29udGFpbmVyIC5IZWFkUm93IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xcbiAgLkFkbWluRGF0YWJhc2VUYWJsZSAuTWFpbiAuVGFibGVDb250YWluZXIge1xcbiAgICBtYXgtaGVpZ2h0OiA2NXZoO1xcbiAgfVxcbn1cIiwgXCJcIl0pO1xuXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL1Byb21vdG9yRGF0YWJhc2VTY3JlZW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vUHJvbW90b3JEYXRhYmFzZVNjcmVlbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vUHJvbW90b3JEYXRhYmFzZVNjcmVlbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5Qcm9tb3RvckRhdGFiYXNlU2NyZWVuIHtcXG4gIHdpZHRoOjEwMCU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6Z3JleTtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTchLi9TZWxsZXJEYXRhYmFzZVNjcmVlbi5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTchLi9TZWxsZXJEYXRhYmFzZVNjcmVlbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vU2VsbGVyRGF0YWJhc2VTY3JlZW4uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuU2VsbGVyRGF0YWJhc2VTY3JlZW4ge1xcbiAgd2lkdGg6MTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjpncmV5O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL0FkbWluS2Vsb2xhS29udGVuVmlyYWxTY3JlZW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbi5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5BZG1pbktlbG9sYUtvbnRlblZpcmFsIHtcXG4gIHdpZHRoOjEwMCU7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6Z3JleTtcXG59XFxuXFxuLlRhYmVsIHtcXG4gIHBhZGRpbmc6IDAgNDBweDtcXG4gIG1heC1oZWlnaHQ6IDQwdmg7XFxuICBvdmVyZmxvdzpzY3JvbGw7XFxufVwiLCBcIlwiXSk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQXBwLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL0FwcC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vQXBwLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkFwcCB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVwiLCBcIlwiXSk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vaW5kZXguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS03IS4vaW5kZXguY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNyEuL2luZGV4LmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxufVwiLCBcIlwiXSk7XG5cbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ2NyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5Qcm92aWRlci5kaXNwbGF5TmFtZSA9IG5hbWUgKyBcIi5Qcm92aWRlclwiO1xuICBjb250ZXh0LkNvbnN1bWVyLmRpc3BsYXlOYW1lID0gbmFtZSArIFwiLkNvbnN1bWVyXCI7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KCdSb3V0ZXInKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0JCQxLnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0JCQxLmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQkJDEuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQkJDEuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZQcm9wcy50bywgbG9jYXRpb24pKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0ge1xuICAgIHBhdGg6IG9wdGlvbnNcbiAgfTtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkJDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgICAgIGlmIChjaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBfdGhpcy5wcm9wcy5wYXRoO1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pID8gY2hpbGRyZW4gOiBwcm9wcy5tYXRjaCA/IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAgICFjb250ZXh0JCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dCQkMS5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHdpdGhSb3V0ZXIsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0IH07XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCAqIGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGluay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQsIGhpc3RvcnkpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAhdGhpcy5wcm9wcy50YXJnZXQgfHwgdGhpcy5wcm9wcy50YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5wcm9wcy5yZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QodGhpcy5wcm9wcy50byk7XG4gICAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG8sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaW5uZXJSZWZcIiwgXCJyZXBsYWNlXCIsIFwidG9cIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjb250ZXh0LmxvY2F0aW9uKSA6IHRvO1xuICAgICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGNvbnRleHQuaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVDbGljayhldmVudCwgY29udGV4dC5oaXN0b3J5KTtcbiAgICAgICAgfSxcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcmVmOiBpbm5lclJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSk7XG4gIHZhciBpbm5lclJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiBpbm5lclJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG5mdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCJdKTtcblxuICB2YXIgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87IC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG5cbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICBleGFjdDogZXhhY3QsXG4gICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihfcmVmMikge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgbG9jYXRpb24pIDogbWF0Y2gpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgdG86IHRvXG4gICAgICB9LCByZXN0KSk7XG4gICAgfVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBSb3V0ZS5wcm9wVHlwZXMuZXhhY3QsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0cmljdDogUm91dGUucHJvcFR5cGVzLnN0cmljdCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuIiwiLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWJvb3RzdHJhcC9kb20taGVscGVycy9ibG9iL21hc3Rlci9zcmMvdXRpbC9pbkRPTS5qc1xyXG52YXIgaW5ET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xyXG52YXIgY2FjaGVkVHlwZTtcclxuZXhwb3J0IGZ1bmN0aW9uIF9zZXRTY3JvbGxUeXBlKHR5cGUpIHtcclxuICAgIGNhY2hlZFR5cGUgPSB0eXBlO1xyXG59XHJcbi8vIEJhc2VkIG9uIHRoZSBqcXVlcnkgcGx1Z2luIGh0dHBzOi8vZ2l0aHViLmNvbS9vdGhyZWUvanF1ZXJ5LnJ0bC1zY3JvbGwtdHlwZVxyXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0U2Nyb2xsVHlwZSgpIHtcclxuICAgIGlmIChjYWNoZWRUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZFR5cGU7XHJcbiAgICB9XHJcbiAgICBpZiAoIWluRE9NIHx8ICF3aW5kb3cuZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICAgIHJldHVybiAnaW5kZXRlcm1pbmF0ZSc7XHJcbiAgICB9XHJcbiAgICB2YXIgZHVtbXkgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkdW1teS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnQUJDRCcpKTtcclxuICAgIGR1bW15LmRpciA9ICdydGwnO1xyXG4gICAgZHVtbXkuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XHJcbiAgICBkdW1teS5zdHlsZS53aWR0aCA9ICc0cHgnO1xyXG4gICAgZHVtbXkuc3R5bGUuaGVpZ2h0ID0gJzFweCc7XHJcbiAgICBkdW1teS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICBkdW1teS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XHJcbiAgICBkdW1teS5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XHJcbiAgICBjYWNoZWRUeXBlID0gJ3JldmVyc2UnO1xyXG4gICAgaWYgKGR1bW15LnNjcm9sbExlZnQgPiAwKSB7XHJcbiAgICAgICAgY2FjaGVkVHlwZSA9ICdkZWZhdWx0JztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGR1bW15LnNjcm9sbExlZnQgPSAxO1xyXG4gICAgICAgIGlmIChkdW1teS5zY3JvbGxMZWZ0ID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNhY2hlZFR5cGUgPSAnbmVnYXRpdmUnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xyXG4gICAgcmV0dXJuIGNhY2hlZFR5cGU7XHJcbn1cclxuLy8gQmFzZWQgb24gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI0Mzk0Mzc2XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROb3JtYWxpemVkU2Nyb2xsTGVmdChlbGVtZW50LCBkaXJlY3Rpb24pIHtcclxuICAgIHZhciBzY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgLy8gUGVyZm9ybSB0aGUgY2FsY3VsYXRpb25zIG9ubHkgd2hlbiBkaXJlY3Rpb24gaXMgcnRsIHRvIGF2b2lkIG1lc3NpbmcgdXAgdGhlIGx0ciBiYWhhdmlvclxyXG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3J0bCcpIHtcclxuICAgICAgICByZXR1cm4gc2Nyb2xsTGVmdDtcclxuICAgIH1cclxuICAgIHZhciB0eXBlID0gZGV0ZWN0U2Nyb2xsVHlwZSgpO1xyXG4gICAgaWYgKHR5cGUgPT09ICdpbmRldGVybWluYXRlJykge1xyXG4gICAgICAgIHJldHVybiBOdW1iZXIuTmFOO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbmVnYXRpdmUnOlxyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxMZWZ0O1xyXG4gICAgICAgIGNhc2UgJ3JldmVyc2UnOlxyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNjcm9sbExlZnQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0KGVsZW1lbnQsIHNjcm9sbExlZnQsIGRpcmVjdGlvbikge1xyXG4gICAgLy8gUGVyZm9ybSB0aGUgY2FsY3VsYXRpb25zIG9ubHkgd2hlbiBkaXJlY3Rpb24gaXMgcnRsIHRvIGF2b2lkIG1lc3NpbmcgdXAgdGhlIGx0ciBiYWhhdmlvclxyXG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3J0bCcpIHtcclxuICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciB0eXBlID0gZGV0ZWN0U2Nyb2xsVHlwZSgpO1xyXG4gICAgaWYgKHR5cGUgPT09ICdpbmRldGVybWluYXRlJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ25lZ2F0aXZlJzpcclxuICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gZWxlbWVudC5jbGllbnRXaWR0aCAtIGVsZW1lbnQuc2Nyb2xsV2lkdGggKyBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZXZlcnNlJzpcclxuICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG4iLCJmdW5jdGlvbiBlYXNlSW5PdXRTaW4odGltZSkge1xuICByZXR1cm4gKDEgKyBNYXRoLnNpbihNYXRoLlBJICogdGltZSAtIE1hdGguUEkgLyAyKSkgLyAyO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKHByb3AsIGVsZW1lbnQsIHRvKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmdW5jdGlvbiAoKSB7fTtcbiAgdmFyIF9vcHRpb25zJGVhc2UgPSBvcHRpb25zLmVhc2UsXG4gICAgICBlYXNlID0gX29wdGlvbnMkZWFzZSA9PT0gdm9pZCAwID8gZWFzZUluT3V0U2luIDogX29wdGlvbnMkZWFzZSxcbiAgICAgIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgIGR1cmF0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IDMwMCA6IF9vcHRpb25zJGR1cmF0aW9uO1xuICB2YXIgc3RhcnQgPSBudWxsO1xuICB2YXIgZnJvbSA9IGVsZW1lbnRbcHJvcF07XG4gIHZhciBjYW5jZWxsZWQgPSBmYWxzZTtcblxuICB2YXIgY2FuY2VsID0gZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gIH07XG5cbiAgdmFyIHN0ZXAgPSBmdW5jdGlvbiBzdGVwKHRpbWVzdGFtcCkge1xuICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgIGNiKG5ldyBFcnJvcignQW5pbWF0aW9uIGNhbmNlbGxlZCcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0ID0gdGltZXN0YW1wO1xuICAgIH1cblxuICAgIHZhciB0aW1lID0gTWF0aC5taW4oMSwgKHRpbWVzdGFtcCAtIHN0YXJ0KSAvIGR1cmF0aW9uKTtcbiAgICBlbGVtZW50W3Byb3BdID0gZWFzZSh0aW1lKSAqICh0byAtIGZyb20pICsgZnJvbTtcblxuICAgIGlmICh0aW1lID49IDEpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNiKG51bGwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICB9O1xuXG4gIGlmIChmcm9tID09PSB0bykge1xuICAgIGNiKG5ldyBFcnJvcignRWxlbWVudCBhbHJlYWR5IGF0IHRhcmdldCBwb3NpdGlvbicpKTtcbiAgICByZXR1cm4gY2FuY2VsO1xuICB9XG5cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICByZXR1cm4gY2FuY2VsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhbmltYXRlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgPiAza2IuXG5cbnZhciBzdHlsZXMgPSB7XG4gIHdpZHRoOiA5OSxcbiAgaGVpZ2h0OiA5OSxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogLTk5OTksXG4gIG92ZXJmbG93OiAnc2Nyb2xsJ1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqIFRoZSBjb21wb25lbnQgaXMgb3JpZ2luYXRlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9TVE9SSVMvcmVhY3Qtc2Nyb2xsYmFyLXNpemUuXG4gKiBJdCBoYXMgYmVlbiBtb3ZlZCBpbnRvIHRoZSBjb3JlIGluIG9yZGVyIHRvIG1pbmltaXplIHRoZSBidW5kbGUgc2l6ZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY3JvbGxiYXJTaXplKHByb3BzKSB7XG4gIHZhciBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIm9uQ2hhbmdlXCJdKTtcblxuICB2YXIgc2Nyb2xsYmFySGVpZ2h0ID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBzZXRNZWFzdXJlbWVudHMgPSBmdW5jdGlvbiBzZXRNZWFzdXJlbWVudHMoKSB7XG4gICAgc2Nyb2xsYmFySGVpZ2h0LmN1cnJlbnQgPSBub2RlUmVmLmN1cnJlbnQub2Zmc2V0SGVpZ2h0IC0gbm9kZVJlZi5jdXJyZW50LmNsaWVudEhlaWdodDtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJldkhlaWdodCA9IHNjcm9sbGJhckhlaWdodC5jdXJyZW50O1xuICAgICAgc2V0TWVhc3VyZW1lbnRzKCk7XG5cbiAgICAgIGlmIChwcmV2SGVpZ2h0ICE9PSBzY3JvbGxiYXJIZWlnaHQuY3VycmVudCkge1xuICAgICAgICBvbkNoYW5nZShzY3JvbGxiYXJIZWlnaHQuY3VycmVudCk7XG4gICAgICB9XG4gICAgfSwgMTY2KTsgLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW29uQ2hhbmdlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgb25DaGFuZ2Uoc2Nyb2xsYmFySGVpZ2h0LmN1cnJlbnQpO1xuICB9LCBbb25DaGFuZ2VdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHN0eWxlOiBzdHlsZXMsXG4gICAgcmVmOiBub2RlUmVmXG4gIH0sIG90aGVyKSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTY3JvbGxiYXJTaXplLnByb3BUeXBlcyA9IHtcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6IDIsXG4gICAgICBib3R0b206IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgVGFiSW5kaWNhdG9yID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJJbmRpY2F0b3IocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJJbmRpY2F0b3IucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBUaGUgY29sb3Igb2YgdGhlIHRhYiBpbmRpY2F0b3IuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnUHJpdmF0ZVRhYkluZGljYXRvcidcbn0pKFRhYkluZGljYXRvcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi8uLi9TdmdJY29uJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCA9IFJlYWN0Lm1lbW8oUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN2Z0ljb24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWZcbiAgICB9KSwgcGF0aCk7XG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiXCIuY29uY2F0KGRpc3BsYXlOYW1lLCBcIkljb25cIik7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIENvbXBvbmVudDtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNDEgMTYuMDlsLTQuNTgtNC41OSA0LjU4LTQuNTlMMTQgNS41bC02IDYgNiA2elwiXG59KSwgJ0tleWJvYXJkQXJyb3dMZWZ0Jyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbihSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTguNTkgMTYuMzRsNC41OC00LjU5LTQuNTgtNC41OUwxMCA1Ljc1bDYgNi02IDZ6XCJcbn0pLCAnS2V5Ym9hcmRBcnJvd1JpZ2h0Jyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICogLSBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogLSBJbXByb3ZlIHRoZSB0aW1lLXRvLWZpcnN0IHBhaW50IG9uIHRoZSBjbGllbnQgYnkgb25seSByZW5kZXJpbmcgYWJvdmUgdGhlIGZvbGQuXG4gKiAtIFJlZHVjZSB0aGUgcmVuZGVyaW5nIHRpbWUgb24gdGhlIHNlcnZlci5cbiAqIC0gVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBOb1Nzcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkZWZlciA9IHByb3BzLmRlZmVyLFxuICAgICAgZGVmZXIgPSBfcHJvcHMkZGVmZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlZmVyLFxuICAgICAgX3Byb3BzJGZhbGxiYWNrID0gcHJvcHMuZmFsbGJhY2ssXG4gICAgICBmYWxsYmFjayA9IF9wcm9wcyRmYWxsYmFjayA9PT0gdm9pZCAwID8gbnVsbCA6IF9wcm9wcyRmYWxsYmFjaztcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBtb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkZWZlcikge1xuICAgICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICAgIH1cbiAgfSwgW2RlZmVyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRlZmVyKSB7XG4gICAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9LCBbZGVmZXJdKTsgLy8gV2UgbmVlZCB0aGUgRnJhZ21lbnQgaGVyZSB0byBmb3JjZSByZWFjdC1kb2NnZW4gdG8gcmVjb2duaXNlIE5vU3NyIGFzIGEgY29tcG9uZW50LlxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBtb3VudGVkU3RhdGUgPyBjaGlsZHJlbiA6IGZhbGxiYWNrKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm9Tc3IucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBub3Qgb25seSBwcmV2ZW50IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICogSXQgd2lsbCBhbHNvIGRlZmVyIHRoZSByZW5kZXJpbmcgb2YgdGhlIGNoaWxkcmVuIGludG8gYSBkaWZmZXJlbnQgc2NyZWVuIGZyYW1lLlxuICAgKi9cbiAgZGVmZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZmFsbGJhY2sgY29udGVudCB0byBkaXNwbGF5LlxuICAgKi9cbiAgZmFsbGJhY2s6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgTm9Tc3JbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoTm9Tc3IucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9Tc3I7IiwiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL3Y0LjEuNS9zcmMvZm9jdXMtdmlzaWJsZS5qc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xudmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcbnZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlLFxuICAgICAgdGFnTmFtZSA9IG5vZGUudGFnTmFtZTtcblxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICogQHBhcmFtIHtFdmVudH0gZVxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShvd25lckRvY3VtZW50KSB7XG4gIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBvd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBvd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKG93bmVyRG9jdW1lbnQpIHtcbiAgb3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBvd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBvd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRhcmdldC5tYXRjaGVzKCc6Zm9jdXMtdmlzaWJsZScpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gYnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3JcbiAgLy8gd2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vyc1xuICAvLyByZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgLy8gbm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gdGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHlcblxuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkIG9uIGEgZm9jdXMtdmlzaWJsZSBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICB9LCAxMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcblxuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHtcbiAgICBpc0ZvY3VzVmlzaWJsZTogaXNGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyVmlzaWJsZTogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiByZWZcbiAgfTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsiLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dHNTaGFwZSB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5leHBvcnQgdmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0IHZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydCB2YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0IHZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0IHZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogICBleGl0aW5nOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGV4aXRlZDogIHsgb3BhY2l0eTogMCB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQ7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTsgLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG5cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0ID8gdGhpcy5jb250ZXh0LmlzTW91bnRpbmcgOiBtb3VudGluZztcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKG5vZGUsIGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG5vZGUsIHRoaXMubmV4dENhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCB0aW1lb3V0KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pOyAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcykpO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIHJldHVybiAoLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHRpbWVvdXRzU2hhcGU7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbn0gOiB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IDA7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IDE7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gMjtcblRyYW5zaXRpb24uRU5URVJFRCA9IDM7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSA0O1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmlwcGxlKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRwdWxzYXRlID0gcHJvcHMucHVsc2F0ZSxcbiAgICAgIHB1bHNhdGUgPSBfcHJvcHMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVggPSBwcm9wcy5yaXBwbGVYLFxuICAgICAgcmlwcGxlWSA9IHByb3BzLnJpcHBsZVksXG4gICAgICByaXBwbGVTaXplID0gcHJvcHMucmlwcGxlU2l6ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwicHVsc2F0ZVwiLCBcInJpcHBsZVhcIiwgXCJyaXBwbGVZXCIsIFwicmlwcGxlU2l6ZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgdmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIGxlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0TGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgc2V0VmlzaWJsZSh0cnVlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXQoKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfTtcblxuICB2YXIgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJpcHBsZSwgY2xhc3NOYW1lLCB2aXNpYmxlICYmIGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgcHVsc2F0ZSAmJiBjbGFzc2VzLnJpcHBsZVB1bHNhdGUpO1xuICB2YXIgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgdmFyIGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdFxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IHJpcHBsZUNsYXNzTmFtZSxcbiAgICBzdHlsZTogcmlwcGxlU3R5bGVzXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gIH0pKSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiO1xuaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFJpcHBsZSBmcm9tICcuL1JpcHBsZSc7XG52YXIgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgdmFyIERFTEFZX1JJUFBMRSA9IDgwO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHpJbmRleDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGU6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIm11aS1yaXBwbGUtZW50ZXIgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCksXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRtdWktcmlwcGxlLWVudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkYCBjbGFzcy4gKi9cbiAgICBjaGlsZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRMZWF2aW5nYCBjbGFzcy4gKi9cbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwibXVpLXJpcHBsZS1leGl0IFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpLFxuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJsZSBsb2dpYyBiZXR3ZWVuIEpTUyB2OSBhbmQgdjEwLlxuICAgICAgLy8gVG8gcmVtb3ZlIHdpdGggdGhlIHJlbGVhc2Ugb2YgTWF0ZXJpYWwtVUkgdjRcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckbXVpLXJpcHBsZS1leGl0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLXB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKSxcbiAgICAgIC8vIEJhY2t3YXJkIGNvbXBhdGlibGUgbG9naWMgYmV0d2VlbiBKU1MgdjkgYW5kIHYxMC5cbiAgICAgIC8vIFRvIHJlbW92ZSB3aXRoIHRoZSByZWxlYXNlIG9mIE1hdGVyaWFsLVVJIHY0XG4gICAgICBhbmltYXRpb25OYW1lOiAnJG11aS1yaXBwbGUtcHVsc2F0ZSdcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcmlwcGxlLWV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkyKSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxudmFyIFRvdWNoUmlwcGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVG91Y2hSaXBwbGUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb3VjaFJpcHBsZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb3VjaFJpcHBsZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUb3VjaFJpcHBsZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbmV4dEtleTogMCxcbiAgICAgIHJpcHBsZXM6IFtdXG4gICAgfTtcbiAgICBfdGhpcy5jb250YWluZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcblxuICAgIF90aGlzLnB1bHNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zdGFydCh7fSwge1xuICAgICAgICBwdWxzYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICAgIF9vcHRpb25zJGNlbnRlciA9IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gX3RoaXMucHJvcHMuY2VudGVyIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgICBfb3B0aW9ucyRmYWtlRWxlbWVudCA9IG9wdGlvbnMuZmFrZUVsZW1lbnQsXG4gICAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIF90aGlzLmlnbm9yaW5nTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLmlnbm9yaW5nTW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBfdGhpcy5pZ25vcmluZ01vdXNlRG93biA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogX3RoaXMuY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgICB2YXIgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDBcbiAgICAgIH07IC8vIEdldCB0aGUgc2l6ZSBvZiB0aGUgcmlwcGxlXG5cbiAgICAgIHZhciByaXBwbGVYO1xuICAgICAgdmFyIHJpcHBsZVk7XG4gICAgICB2YXIgcmlwcGxlU2l6ZTtcblxuICAgICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpO1xuICAgICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChyZWN0LmhlaWdodCAvIDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYID8gZXZlbnQuY2xpZW50WCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgdmFyIGNsaWVudFkgPSBldmVudC5jbGllbnRZID8gZXZlbnQuY2xpZW50WSA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjZW50ZXIpIHtcbiAgICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIE1hdGgucG93KHJlY3Qud2lkdGgsIDIpICsgTWF0aC5wb3cocmVjdC5oZWlnaHQsIDIpKSAvIDMpOyAvLyBGb3Igc29tZSByZWFzb24gdGhlIGFuaW1hdGlvbiBpcyBicm9rZW4gb24gTW9iaWxlIENocm9tZSBpZiB0aGUgc2l6ZSBpZiBldmVuLlxuXG4gICAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICAgIHJpcHBsZVNpemUgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgICAgdmFyIHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoTWF0aC5wb3coc2l6ZVgsIDIpICsgTWF0aC5wb3coc2l6ZVksIDIpKTtcbiAgICAgIH0gLy8gVG91Y2hlIGRldmljZXNcblxuXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICAvLyBQcmVwYXJlIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYjogY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuc3RhcnRUaW1lckNvbW1pdCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgIGNiOiBjYlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnRDb21taXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICAgIGNiID0gcGFyYW1zLmNiO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXh0S2V5OiBzdGF0ZS5uZXh0S2V5ICsgMSxcbiAgICAgICAgICByaXBwbGVzOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnJpcHBsZXMpLCBbUmVhY3QuY3JlYXRlRWxlbWVudChSaXBwbGUsIHtcbiAgICAgICAgICAgIGtleTogc3RhdGUubmV4dEtleSxcbiAgICAgICAgICAgIGNsYXNzZXM6IF90aGlzLnByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgICB0aW1lb3V0OiB7XG4gICAgICAgICAgICAgIGV4aXQ6IERVUkFUSU9OLFxuICAgICAgICAgICAgICBlbnRlcjogRFVSQVRJT05cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICAgICAgfSldKVxuICAgICAgICB9O1xuICAgICAgfSwgY2IpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdG9wID0gZnVuY3Rpb24gKGV2ZW50LCBjYikge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnN0YXJ0VGltZXIpO1xuICAgICAgdmFyIHJpcHBsZXMgPSBfdGhpcy5zdGF0ZS5yaXBwbGVzOyAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIF90aGlzLnN0YXJ0VGltZXJDb21taXQpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQoKTtcblxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnN0b3AoZXZlbnQsIGNiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IG51bGw7XG5cbiAgICAgIGlmIChyaXBwbGVzICYmIHJpcHBsZXMubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICByaXBwbGVzOiByaXBwbGVzLnNsaWNlKDEpXG4gICAgICAgIH0sIGNiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRvdWNoUmlwcGxlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXJ0VGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjZW50ZXIgPSBfdGhpcyRwcm9wcy5jZW50ZXIsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiB0aGlzLmNvbnRhaW5lclxuICAgICAgfSwgb3RoZXIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cCwge1xuICAgICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICAgIGVudGVyOiB0cnVlLFxuICAgICAgICBleGl0OiB0cnVlXG4gICAgICB9LCB0aGlzLnN0YXRlLnJpcHBsZXMpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG91Y2hSaXBwbGU7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuVG91Y2hSaXBwbGUuZGVmYXVsdFByb3BzID0ge1xuICBjZW50ZXI6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKFRvdWNoUmlwcGxlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IE5vU3NyIGZyb20gJy4uL05vU3NyJztcbmltcG9ydCB7IHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnLi4vdXRpbHMvZm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfSxcbiAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGtleWJvYXJkIGZvY3VzZWQuICovXG4gIGZvY3VzVmlzaWJsZToge31cbn07XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNDQwMDEzODkyXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqL1xuXG5mdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gKDAsIHJlZi5jdXJyZW50KShldmVudCk7XG4gIH0sIFtdKTtcbn1cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cblxuXG52YXIgQnV0dG9uQmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBidXR0b25SZWZQcm9wID0gcHJvcHMuYnV0dG9uUmVmLFxuICAgICAgX3Byb3BzJGNlbnRlclJpcHBsZSA9IHByb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wcyRjZW50ZXJSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlclJpcHBsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmlwcGxlID0gcHJvcHMuZGlzYWJsZVJpcHBsZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJpcHBsZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9IHByb3BzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoUmksXG4gICAgICBfcHJvcHMkZm9jdXNSaXBwbGUgPSBwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gX3Byb3BzJGZvY3VzUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93biA9IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwID0gcHJvcHMub25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCA9IHByb3BzLm9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSA9IHByb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0ID0gcHJvcHMub25Ub3VjaFN0YXJ0LFxuICAgICAgb25EcmFnRW5kID0gcHJvcHMub25EcmFnRW5kLFxuICAgICAgX3Byb3BzJHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICB0YWJJbmRleCA9IF9wcm9wcyR0YWJJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyR0YWJJbmRleCxcbiAgICAgIFRvdWNoUmlwcGxlUHJvcHMgPSBwcm9wcy5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImJ1dHRvblJlZlwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcIm9uRHJhZ0VuZFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl0pO1xuXG4gIHZhciBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gZ2V0QnV0dG9uTm9kZSgpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShidXR0b25SZWYuY3VycmVudCk7XG4gIH1cblxuICB2YXIgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXNWaXNpYmxlOiBmdW5jdGlvbiBmb2N1c1Zpc2libGUoKSB7XG4gICAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSkge1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGVdKTtcblxuICBmdW5jdGlvbiB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZUFjdGlvbiwgZXZlbnRDYWxsYmFjaykge1xuICAgIHZhciBza2lwUmlwcGxlQWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkaXNhYmxlVG91Y2hSaXBwbGU7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlnbm9yZSA9IGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICB2YXIgaGFuZGxlRHJhZ0VuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkRyYWdFbmQpO1xuICB2YXIgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICB2YXIgaGFuZGxlTW91c2VMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIHZhciBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgdmFyIGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIHZhciBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIG9uQmx1clZpc2libGUoZXZlbnQpO1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICB2YXIgaGFuZGxlRm9jdXMgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcblxuXG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcblxuICAgICAgaWYgKG9uRm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIG9uRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGJ1dHRvbiA9IGdldEJ1dHRvbk5vZGUoKTsgLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmIChldmVudC5rZXkgPT09ICcgJyB8fCBldmVudC5rZXkgPT09ICdFbnRlcicpICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZikpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCwgZm9jdXNWaXNpYmxlICYmIFtjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCk7XG4gIHZhciBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiBvdGhlci5ocmVmKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9ICdhJztcbiAgfVxuXG4gIHZhciBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgfVxuXG4gIHZhciBoYW5kbGVVc2VyUmVmID0gdXNlRm9ya1JlZihidXR0b25SZWZQcm9wLCByZWYpO1xuICB2YXIgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZVVzZXJSZWYsIGhhbmRsZU93blJlZik7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0VuZDogaGFuZGxlRHJhZ0VuZCxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4XG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KE5vU3NyLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRvdWNoUmlwcGxlLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByaXBwbGVSZWYsXG4gICAgY2VudGVyOiBjZW50ZXJSaXBwbGVcbiAgfSwgVG91Y2hSaXBwbGVQcm9wcykpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gdHJpZ2dlciBhbiBhY3Rpb24gcHJvZ3JhbW1hdGljYWxseS5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb25zIFRoaXMgb2JqZWN0IGNvbnRhaW5zIGFsbCBwb3NzaWJsZSBhY3Rpb25zXG4gICAqIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVmYCBpbnN0ZWFkXG4gICAqL1xuICBidXR0b25SZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgd2lsbCBiZSBjZW50ZXJlZC5cbiAgICogVGhleSB3b24ndCBzdGFydCBhdCB0aGUgY3Vyc29yIGludGVyYWN0aW9uIHBvc2l0aW9uLlxuICAgKi9cbiAgY2VudGVyUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgYGZhbHNlYC5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9tYXN0ZXIvZXhwbGFpbmVyLm1kKS5cbiAgICogQSBbcG9seWZpbGwgY2FuIGJlIHVzZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUpIHRvIGFwcGx5IGEgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIG90aGVyIGNvbXBvbmVudHNcbiAgICogaWYgbmVlZGVkLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVXNlZCB0byBjb250cm9sIHRoZSBidXR0b24ncyBwdXJwb3NlLlxuICAgKiBUaGlzIHByb3BlcnR5IHBhc3NlcyB0aGUgdmFsdWUgdG8gdGhlIGB0eXBlYCBhdHRyaWJ1dGUgb2YgdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnc3VibWl0JywgJ3Jlc2V0JywgJ2J1dHRvbiddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvYXJpYS1yb2xlICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IEtleWJvYXJkQXJyb3dMZWZ0IGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93TGVmdCc7XG5pbXBvcnQgS2V5Ym9hcmRBcnJvd1JpZ2h0IGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93UmlnaHQnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgd2lkdGg6IDQwLFxuICAgIGZsZXhTaHJpbms6IDBcbiAgfVxufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgX3JlZiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5Ym9hcmRBcnJvd0xlZnQsIHtcbiAgZm9udFNpemU6IFwic21hbGxcIlxufSk7XG5cbnZhciBfcmVmMiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5Ym9hcmRBcnJvd1JpZ2h0LCB7XG4gIGZvbnRTaXplOiBcInNtYWxsXCJcbn0pO1xuXG52YXIgVGFiU2Nyb2xsQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJTY3JvbGxCdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBfcHJvcHMkdmlzaWJsZSA9IHByb3BzLnZpc2libGUsXG4gICAgICB2aXNpYmxlID0gX3Byb3BzJHZpc2libGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkdmlzaWJsZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlyZWN0aW9uXCIsIFwib25DbGlja1wiLCBcInZpc2libGVcIl0pO1xuXG4gIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCk7XG5cbiAgaWYgKCF2aXNpYmxlKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbkJhc2UsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFwiZGl2XCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBudWxsLFxuICAgIHRhYkluZGV4OiBudWxsXG4gIH0sIG90aGVyKSwgZGlyZWN0aW9uID09PSAnbGVmdCcgPyBfcmVmIDogX3JlZjIpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJTY3JvbGxCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogV2hpY2ggZGlyZWN0aW9uIHNob3VsZCB0aGUgYnV0dG9uIGluZGljYXRlP1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBleGVjdXRlIGZvciBidXR0b24gcHJlc3MuXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU2hvdWxkIHRoZSBidXR0b24gYmUgcHJlc2VudCBvciBqdXN0IGNvbnN1bWUgc3BhY2UuXG4gICAqL1xuICB2aXNpYmxlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlVGFiU2Nyb2xsQnV0dG9uJ1xufSkoVGFiU2Nyb2xsQnV0dG9uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG4vKipcbiAqIEVuYWJsZXMgcmVmIGZvcndhcmRpbmcgb24gYSBnaXZlbiBjb21wb25lbnQgdGhhdCB1c2VzIGBpbm5lclJlZmAgdG8gZm9yd2FyZCByZWZzXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50IGltcGxlbWVudGF0aW9ucyB0aGF0IHByZWRhdGUgYGZvcndhcmRSZWZgIGFuZFxuICogdXNlZCBvdGhlciBwcm9wcyB0byBmb3J3YXJkIHJlZnMuXG4gKlxuICogSW5zdGVhZCBvZiBgPENvbXBvbmVudCBpbm5lclJlZj17cmVmfSAvPmAgeW91IGNhbiB3cml0ZVxuICogYDx3aXRoRm9yd2FyZFJlZihDb21wb25lbnQpIHJlZj17cmVmfSAvPmAuXG4gKlxuICogVGhpcyBIT0MgZG9lcyBub3QgaGFuZGxlIHByb3AgY29sbGlzaW9uLiBJblxuICogYDx3aXRoRm9yd2FyZFJlZihDb21wb25lbnQpIHJlZj17cmVmfSBpbm5lclJlZj17aW5uZXJSZWZ9IC8+YCBgaW5uZXJSZWZgIHdpbGwgYmUgZHJvcHBlZFxuICpcbiAqIE9ubHkgY29waWVzIHN0YXRpY3MgZnJvbSBtYXRlcmlhbC11aSBvdmVyLlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29tcG9uZW50VHlwZX0gQ29tcG9uZW50XG4gKiBAcmV0dXJucyB7UmVhY3QuRm9yd2FyZFJlZkNvbXBvbmVudH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoRm9yd2FyZGVkUmVmKENvbXBvbmVudCkge1xuICB2YXIgRm9yd2FyZFJlZkNvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gKC8vIFdlIGV4cGVjdCB0aGlzIGNvbXBvbmVudCB0byBiZSB3cmFwcGVkIGluIGB3aXRoU3R5bGVzYCBpbiB3aGljaCBgaW5uZXJSZWZgXG4gICAgICAvLyBpcyBhbHJlYWR5IGludGVyY2VwdGVkIGFuZCB0aGVyZWZvcmUgd29uJ3QgYXBwZWFyIGluIGBwcm9wc2AgaGVyZS5cbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgaW5uZXJSZWY6IHJlZlxuICAgICAgfSkpXG4gICAgKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBGb3J3YXJkUmVmQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJGb3J3YXJkUmVmKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gIH1cblxuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoRm9yd2FyZFJlZkNvbXBvbmVudCwgQ29tcG9uZW50KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjtcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgRXZlbnRMaXN0ZW5lciBmcm9tICdyZWFjdC1ldmVudC1saXN0ZW5lcic7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnZGVib3VuY2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzID4gM2tiLlxuXG5pbXBvcnQgeyBnZXROb3JtYWxpemVkU2Nyb2xsTGVmdCwgZGV0ZWN0U2Nyb2xsVHlwZSB9IGZyb20gJ25vcm1hbGl6ZS1zY3JvbGwtbGVmdCc7XG5pbXBvcnQgYW5pbWF0ZSBmcm9tICcuLi9pbnRlcm5hbC9hbmltYXRlJztcbmltcG9ydCBTY3JvbGxiYXJTaXplIGZyb20gJy4vU2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFiSW5kaWNhdG9yIGZyb20gJy4vVGFiSW5kaWNhdG9yJztcbmltcG9ydCBUYWJTY3JvbGxCdXR0b24gZnJvbSAnLi9UYWJTY3JvbGxCdXR0b24nO1xuaW1wb3J0IHdpdGhGb3J3YXJkZWRSZWYgZnJvbSAnLi4vdXRpbHMvd2l0aEZvcndhcmRlZFJlZic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgbWluSGVpZ2h0OiA0OCxcbiAgICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBmbGV4IGNvbnRhaW5lciBlbGVtZW50LiAqL1xuICAgIGZsZXhDb250YWluZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZmxleCBjb250YWluZXIgZWxlbWVudCBpZiBgY2VudGVyZWQ9e3RydWV9YCAmIGAhdmFyaWFudD1cInNjcm9sbGFibGVcImAuICovXG4gICAgY2VudGVyZWQ6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdGFibGlzdCBlbGVtZW50LiAqL1xuICAgIHNjcm9sbGVyOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0YWJsaXN0IGVsZW1lbnQgaWYgYCF2YXJpYW50PVwic2Nyb2xsYWJsZVwiYFxiXGJcYi4gKi9cbiAgICBmaXhlZDoge1xuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHRhYmxpc3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInNjcm9sbGFibGVcImAuICovXG4gICAgc2Nyb2xsYWJsZToge1xuICAgICAgb3ZlcmZsb3dYOiAnc2Nyb2xsJyxcbiAgICAgIC8vIEhpZGUgZGltZW5zaW9ubGVzcyBzY3JvbGxiYXIgb24gTWFjT1NcbiAgICAgIHNjcm9sbGJhcldpZHRoOiAnbm9uZScsXG4gICAgICAvLyBGaXJlZm94XG4gICAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXInOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJyAvLyBTYWZhcmkgKyBDaHJvbWVcblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFNjcm9sbEJ1dHRvbkNvbXBvbmVudGAgY29tcG9uZW50LiAqL1xuICAgIHNjcm9sbEJ1dHRvbnM6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBTY3JvbGxCdXR0b25Db21wb25lbnRgIGNvbXBvbmVudCBpZiBgc2Nyb2xsQnV0dG9ucz1cImF1dG9cImAgb3Igc2Nyb2xsQnV0dG9ucz1cImRlc2t0b3BcImAuICovXG4gICAgc2Nyb2xsQnV0dG9uc0Rlc2t0b3A6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMuZG93bigneHMnKSwge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFRhYkluZGljYXRvcmAgY29tcG9uZW50LiAqL1xuICAgIGluZGljYXRvcjoge31cbiAgfTtcbn07XG5cbnZhciBUYWJzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUYWJzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJzKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWJzKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRhYnMpLmNhbGwodGhpcykpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaW5kaWNhdG9yU3R5bGU6IHt9LFxuICAgICAgc2Nyb2xsZXJTdHlsZToge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogbnVsbFxuICAgICAgfSxcbiAgICAgIHNob3dMZWZ0U2Nyb2xsOiBmYWxzZSxcbiAgICAgIHNob3dSaWdodFNjcm9sbDogZmFsc2UsXG4gICAgICBtb3VudGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5nZXRDb25kaXRpb25hbEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgU2Nyb2xsQnV0dG9uQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuU2Nyb2xsQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICAgIHNjcm9sbEJ1dHRvbnMgPSBfdGhpcyRwcm9wcy5zY3JvbGxCdXR0b25zLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWUsXG4gICAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQ7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICBzaG93TGVmdFNjcm9sbCA9IF90aGlzJHN0YXRlLnNob3dMZWZ0U2Nyb2xsLFxuICAgICAgICAgIHNob3dSaWdodFNjcm9sbCA9IF90aGlzJHN0YXRlLnNob3dSaWdodFNjcm9sbDtcbiAgICAgIHZhciBjb25kaXRpb25hbEVsZW1lbnRzID0ge307XG4gICAgICB2YXIgc2Nyb2xsYWJsZSA9IHZhcmlhbnQgPT09ICdzY3JvbGxhYmxlJztcbiAgICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsYmFyU2l6ZUxpc3RlbmVyID0gc2Nyb2xsYWJsZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2Nyb2xsYmFyU2l6ZSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc2Nyb2xsYWJsZSxcbiAgICAgICAgb25DaGFuZ2U6IF90aGlzLmhhbmRsZVNjcm9sbGJhclNpemVDaGFuZ2VcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIHZhciBzY3JvbGxCdXR0b25zQWN0aXZlID0gc2hvd0xlZnRTY3JvbGwgfHwgc2hvd1JpZ2h0U2Nyb2xsO1xuICAgICAgdmFyIHNob3dTY3JvbGxCdXR0b25zID0gc2Nyb2xsYWJsZSAmJiAoc2Nyb2xsQnV0dG9ucyA9PT0gJ2F1dG8nICYmIHNjcm9sbEJ1dHRvbnNBY3RpdmUgfHwgc2Nyb2xsQnV0dG9ucyA9PT0gJ2Rlc2t0b3AnIHx8IHNjcm9sbEJ1dHRvbnMgPT09ICdvbicpO1xuICAgICAgY29uZGl0aW9uYWxFbGVtZW50cy5zY3JvbGxCdXR0b25MZWZ0ID0gc2hvd1Njcm9sbEJ1dHRvbnMgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbEJ1dHRvbkNvbXBvbmVudCwge1xuICAgICAgICBkaXJlY3Rpb246IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncmlnaHQnIDogJ2xlZnQnLFxuICAgICAgICBvbkNsaWNrOiBfdGhpcy5oYW5kbGVMZWZ0U2Nyb2xsQ2xpY2ssXG4gICAgICAgIHZpc2libGU6IHNob3dMZWZ0U2Nyb2xsLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zY3JvbGxCdXR0b25zLCBzY3JvbGxCdXR0b25zICE9PSAnb24nICYmIGNsYXNzZXMuc2Nyb2xsQnV0dG9uc0Rlc2t0b3ApXG4gICAgICB9KSA6IG51bGw7XG4gICAgICBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvblJpZ2h0ID0gc2hvd1Njcm9sbEJ1dHRvbnMgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFNjcm9sbEJ1dHRvbkNvbXBvbmVudCwge1xuICAgICAgICBkaXJlY3Rpb246IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAnbGVmdCcgOiAncmlnaHQnLFxuICAgICAgICBvbkNsaWNrOiBfdGhpcy5oYW5kbGVSaWdodFNjcm9sbENsaWNrLFxuICAgICAgICB2aXNpYmxlOiBzaG93UmlnaHRTY3JvbGwsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNjcm9sbEJ1dHRvbnMsIHNjcm9sbEJ1dHRvbnMgIT09ICdvbicgJiYgY2xhc3Nlcy5zY3JvbGxCdXR0b25zRGVza3RvcClcbiAgICAgIH0pIDogbnVsbDtcbiAgICAgIHJldHVybiBjb25kaXRpb25hbEVsZW1lbnRzO1xuICAgIH07XG5cbiAgICBfdGhpcy5nZXRUYWJzTWV0YSA9IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgdGFic01ldGE7XG5cbiAgICAgIGlmIChfdGhpcy50YWJzUmVmKSB7XG4gICAgICAgIHZhciByZWN0ID0gX3RoaXMudGFic1JlZi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIENsaWVudFJlY3QgY2xhc3MgcHJvcHMgKyBzY3JvbGxMZWZ0XG5cblxuICAgICAgICB0YWJzTWV0YSA9IHtcbiAgICAgICAgICBjbGllbnRXaWR0aDogX3RoaXMudGFic1JlZi5jbGllbnRXaWR0aCxcbiAgICAgICAgICBzY3JvbGxMZWZ0OiBfdGhpcy50YWJzUmVmLnNjcm9sbExlZnQsXG4gICAgICAgICAgc2Nyb2xsTGVmdE5vcm1hbGl6ZWQ6IGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0KF90aGlzLnRhYnNSZWYsIGRpcmVjdGlvbiksXG4gICAgICAgICAgc2Nyb2xsV2lkdGg6IF90aGlzLnRhYnNSZWYuc2Nyb2xsV2lkdGgsXG4gICAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciB0YWJNZXRhO1xuXG4gICAgICBpZiAoX3RoaXMudGFic1JlZiAmJiB2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMudGFic1JlZi5jaGlsZHJlblswXS5jaGlsZHJlbjtcblxuICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciB0YWIgPSBjaGlsZHJlbltfdGhpcy52YWx1ZVRvSW5kZXguZ2V0KHZhbHVlKV07XG5cbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHRhYiwgW1wiTWF0ZXJpYWwtVUk6IHRoZSB2YWx1ZSBwcm92aWRlZCBgXCIuY29uY2F0KHZhbHVlLCBcImAgdG8gdGhlIFRhYnMgY29tcG9uZW50IGlzIGludmFsaWQuXCIpLCAnTm9uZSBvZiB0aGUgVGFicyBjaGlsZHJlbiBoYXZlIHRoaXMgdmFsdWUuJywgX3RoaXMudmFsdWVUb0luZGV4LmtleXMgPyBcIllvdSBjYW4gcHJvdmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6IFwiLmNvbmNhdChBcnJheS5mcm9tKF90aGlzLnZhbHVlVG9JbmRleC5rZXlzKCkpLmpvaW4oJywgJyksIFwiLlwiKSA6IG51bGxdLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgICB0YWJNZXRhID0gdGFiID8gdGFiLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWJzTWV0YTogdGFic01ldGEsXG4gICAgICAgIHRhYk1ldGE6IHRhYk1ldGFcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxlZnRTY3JvbGxDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLm1vdmVUYWJzU2Nyb2xsKC1fdGhpcy50YWJzUmVmLmNsaWVudFdpZHRoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmlnaHRTY3JvbGxDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLm1vdmVUYWJzU2Nyb2xsKF90aGlzLnRhYnNSZWYuY2xpZW50V2lkdGgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVTY3JvbGxiYXJTaXplQ2hhbmdlID0gZnVuY3Rpb24gKHNjcm9sbGJhckhlaWdodCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzY3JvbGxlclN0eWxlOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6IG51bGwsXG4gICAgICAgICAgbWFyZ2luQm90dG9tOiAtc2Nyb2xsYmFySGVpZ2h0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUYWJzUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMudGFic1JlZiA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMubW92ZVRhYnNTY3JvbGwgPSBmdW5jdGlvbiAoZGVsdGEpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuICAgICAgdmFyIG11bHRpcGxpZXIgPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gLTEgOiAxO1xuICAgICAgdmFyIG5leHRTY3JvbGxMZWZ0ID0gX3RoaXMudGFic1JlZi5zY3JvbGxMZWZ0ICsgZGVsdGEgKiBtdWx0aXBsaWVyOyAvLyBGaXggZm9yIEVkZ2VcblxuICAgICAgdmFyIGludmVydCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgJiYgZGV0ZWN0U2Nyb2xsVHlwZSgpID09PSAncmV2ZXJzZScgPyAtMSA6IDE7XG5cbiAgICAgIF90aGlzLnNjcm9sbChpbnZlcnQgKiBuZXh0U2Nyb2xsTGVmdCk7XG4gICAgfTtcblxuICAgIF90aGlzLnNjcm9sbFNlbGVjdGVkSW50b1ZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wczIudGhlbWUsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczIudmFsdWU7XG5cbiAgICAgIHZhciBfdGhpcyRnZXRUYWJzTWV0YSA9IF90aGlzLmdldFRhYnNNZXRhKHZhbHVlLCB0aGVtZS5kaXJlY3Rpb24pLFxuICAgICAgICAgIHRhYnNNZXRhID0gX3RoaXMkZ2V0VGFic01ldGEudGFic01ldGEsXG4gICAgICAgICAgdGFiTWV0YSA9IF90aGlzJGdldFRhYnNNZXRhLnRhYk1ldGE7XG5cbiAgICAgIGlmICghdGFiTWV0YSB8fCAhdGFic01ldGEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFiTWV0YS5sZWZ0IDwgdGFic01ldGEubGVmdCkge1xuICAgICAgICAvLyBsZWZ0IHNpZGUgb2YgYnV0dG9uIGlzIG91dCBvZiB2aWV3XG4gICAgICAgIHZhciBuZXh0U2Nyb2xsTGVmdCA9IHRhYnNNZXRhLnNjcm9sbExlZnQgKyAodGFiTWV0YS5sZWZ0IC0gdGFic01ldGEubGVmdCk7XG5cbiAgICAgICAgX3RoaXMuc2Nyb2xsKG5leHRTY3JvbGxMZWZ0KTtcbiAgICAgIH0gZWxzZSBpZiAodGFiTWV0YS5yaWdodCA+IHRhYnNNZXRhLnJpZ2h0KSB7XG4gICAgICAgIC8vIHJpZ2h0IHNpZGUgb2YgYnV0dG9uIGlzIG91dCBvZiB2aWV3XG4gICAgICAgIHZhciBfbmV4dFNjcm9sbExlZnQgPSB0YWJzTWV0YS5zY3JvbGxMZWZ0ICsgKHRhYk1ldGEucmlnaHQgLSB0YWJzTWV0YS5yaWdodCk7XG5cbiAgICAgICAgX3RoaXMuc2Nyb2xsKF9uZXh0U2Nyb2xsTGVmdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNjcm9sbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgYW5pbWF0ZSgnc2Nyb2xsTGVmdCcsIF90aGlzLnRhYnNSZWYsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMudXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgc2Nyb2xsQnV0dG9ucyA9IF90aGlzJHByb3BzMy5zY3JvbGxCdXR0b25zLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMzLnRoZW1lLFxuICAgICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wczMudmFyaWFudDtcbiAgICAgIHZhciBzY3JvbGxhYmxlID0gdmFyaWFudCA9PT0gJ3Njcm9sbGFibGUnO1xuXG4gICAgICBpZiAoc2Nyb2xsYWJsZSAmJiBzY3JvbGxCdXR0b25zICE9PSAnb2ZmJykge1xuICAgICAgICB2YXIgX3RoaXMkdGFic1JlZiA9IF90aGlzLnRhYnNSZWYsXG4gICAgICAgICAgICBzY3JvbGxXaWR0aCA9IF90aGlzJHRhYnNSZWYuc2Nyb2xsV2lkdGgsXG4gICAgICAgICAgICBjbGllbnRXaWR0aCA9IF90aGlzJHRhYnNSZWYuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoX3RoaXMudGFic1JlZiwgdGhlbWUuZGlyZWN0aW9uKTsgLy8gdXNlIDEgZm9yIHRoZSBwb3RlbnRpYWwgcm91bmRpbmcgZXJyb3Igd2l0aCBicm93c2VyIHpvb21zLlxuXG4gICAgICAgIHZhciBzaG93TGVmdFNjcm9sbCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyBzY3JvbGxMZWZ0IDwgc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCAtIDEgOiBzY3JvbGxMZWZ0ID4gMTtcbiAgICAgICAgdmFyIHNob3dSaWdodFNjcm9sbCA9IHRoZW1lLmRpcmVjdGlvbiAhPT0gJ3J0bCcgPyBzY3JvbGxMZWZ0IDwgc2Nyb2xsV2lkdGggLSBjbGllbnRXaWR0aCAtIDEgOiBzY3JvbGxMZWZ0ID4gMTtcblxuICAgICAgICBpZiAoc2hvd0xlZnRTY3JvbGwgIT09IF90aGlzLnN0YXRlLnNob3dMZWZ0U2Nyb2xsIHx8IHNob3dSaWdodFNjcm9sbCAhPT0gX3RoaXMuc3RhdGUuc2hvd1JpZ2h0U2Nyb2xsKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd0xlZnRTY3JvbGw6IHNob3dMZWZ0U2Nyb2xsLFxuICAgICAgICAgICAgc2hvd1JpZ2h0U2Nyb2xsOiBzaG93UmlnaHRTY3JvbGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIF90aGlzLmhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMudXBkYXRlSW5kaWNhdG9yU3RhdGUoX3RoaXMucHJvcHMpO1xuXG4gICAgICAgIF90aGlzLnVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlKCk7XG4gICAgICB9LCAxNjYpOyAvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG5cbiAgICAgIF90aGlzLmhhbmRsZVRhYnNTY3JvbGwgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlKCk7XG4gICAgICB9LCAxNjYpOyAvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhYnMsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1vdW50ZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdGhpcy51cGRhdGVJbmRpY2F0b3JTdGF0ZSh0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMudXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUoKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuYWN0aW9uKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9uKHtcbiAgICAgICAgICB1cGRhdGVJbmRpY2F0b3I6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAvLyBUaGUgaW5kZXggbWlnaHQgaGF2ZSBjaGFuZ2VkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGFnYWluIHRoZSByaWdodCBpbmRpY2F0b3IgcG9zaXRpb24uXG4gICAgICB0aGlzLnVwZGF0ZUluZGljYXRvclN0YXRlKHRoaXMucHJvcHMpO1xuICAgICAgdGhpcy51cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSgpO1xuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5pbmRpY2F0b3JTdHlsZSAhPT0gcHJldlN0YXRlLmluZGljYXRvclN0eWxlKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsU2VsZWN0ZWRJbnRvVmlldygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB0aGlzLmhhbmRsZVRhYnNTY3JvbGwuY2xlYXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlSW5kaWNhdG9yU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSW5kaWNhdG9yU3RhdGUocHJvcHMpIHtcbiAgICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgICAgIHZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgICAgIHZhciBfdGhpcyRnZXRUYWJzTWV0YTIgPSB0aGlzLmdldFRhYnNNZXRhKHZhbHVlLCB0aGVtZS5kaXJlY3Rpb24pLFxuICAgICAgICAgIHRhYnNNZXRhID0gX3RoaXMkZ2V0VGFic01ldGEyLnRhYnNNZXRhLFxuICAgICAgICAgIHRhYk1ldGEgPSBfdGhpcyRnZXRUYWJzTWV0YTIudGFiTWV0YTtcblxuICAgICAgdmFyIGxlZnQgPSAwO1xuXG4gICAgICBpZiAodGFiTWV0YSAmJiB0YWJzTWV0YSkge1xuICAgICAgICB2YXIgY29ycmVjdGlvbiA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyB0YWJzTWV0YS5zY3JvbGxMZWZ0Tm9ybWFsaXplZCArIHRhYnNNZXRhLmNsaWVudFdpZHRoIC0gdGFic01ldGEuc2Nyb2xsV2lkdGggOiB0YWJzTWV0YS5zY3JvbGxMZWZ0O1xuICAgICAgICBsZWZ0ID0gTWF0aC5yb3VuZCh0YWJNZXRhLmxlZnQgLSB0YWJzTWV0YS5sZWZ0ICsgY29ycmVjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRpY2F0b3JTdHlsZSA9IHtcbiAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgLy8gTWF5IGJlIHdyb25nIHVudGlsIHRoZSBmb250IGlzIGxvYWRlZC5cbiAgICAgICAgd2lkdGg6IHRhYk1ldGEgPyBNYXRoLnJvdW5kKHRhYk1ldGEud2lkdGgpIDogMFxuICAgICAgfTtcblxuICAgICAgaWYgKChpbmRpY2F0b3JTdHlsZS5sZWZ0ICE9PSB0aGlzLnN0YXRlLmluZGljYXRvclN0eWxlLmxlZnQgfHwgaW5kaWNhdG9yU3R5bGUud2lkdGggIT09IHRoaXMuc3RhdGUuaW5kaWNhdG9yU3R5bGUud2lkdGgpICYmICFpc05hTihpbmRpY2F0b3JTdHlsZS5sZWZ0KSAmJiAhaXNOYU4oaW5kaWNhdG9yU3R5bGUud2lkdGgpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGluZGljYXRvclN0eWxlOiBpbmRpY2F0b3JTdHlsZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY3Rpb24gPSBfdGhpcyRwcm9wczQuYWN0aW9uLFxuICAgICAgICAgIGNlbnRlcmVkID0gX3RoaXMkcHJvcHM0LmNlbnRlcmVkLFxuICAgICAgICAgIGNoaWxkcmVuUHJvcCA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHM0LmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wczQuY29tcG9uZW50LFxuICAgICAgICAgIGluZGljYXRvckNvbG9yID0gX3RoaXMkcHJvcHM0LmluZGljYXRvckNvbG9yLFxuICAgICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHM0LmlubmVyUmVmLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHM0Lm9uQ2hhbmdlLFxuICAgICAgICAgIFNjcm9sbEJ1dHRvbkNvbXBvbmVudCA9IF90aGlzJHByb3BzNC5TY3JvbGxCdXR0b25Db21wb25lbnQsXG4gICAgICAgICAgc2Nyb2xsQnV0dG9ucyA9IF90aGlzJHByb3BzNC5zY3JvbGxCdXR0b25zLFxuICAgICAgICAgIF90aGlzJHByb3BzNCRUYWJJbmRpYyA9IF90aGlzJHByb3BzNC5UYWJJbmRpY2F0b3JQcm9wcyxcbiAgICAgICAgICBUYWJJbmRpY2F0b3JQcm9wcyA9IF90aGlzJHByb3BzNCRUYWJJbmRpYyA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczQkVGFiSW5kaWMsXG4gICAgICAgICAgdGV4dENvbG9yID0gX3RoaXMkcHJvcHM0LnRleHRDb2xvcixcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzNC50aGVtZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzNC52YWx1ZSxcbiAgICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHM0LnZhcmlhbnQsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHM0LCBbXCJhY3Rpb25cIiwgXCJjZW50ZXJlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImluZGljYXRvckNvbG9yXCIsIFwiaW5uZXJSZWZcIiwgXCJvbkNoYW5nZVwiLCBcIlNjcm9sbEJ1dHRvbkNvbXBvbmVudFwiLCBcInNjcm9sbEJ1dHRvbnNcIiwgXCJUYWJJbmRpY2F0b3JQcm9wc1wiLCBcInRleHRDb2xvclwiLCBcInRoZW1lXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICAgICAgdmFyIHNjcm9sbGFibGUgPSB2YXJpYW50ID09PSAnc2Nyb2xsYWJsZSc7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFjZW50ZXJlZCB8fCAhc2Nyb2xsYWJsZSwgJ01hdGVyaWFsLVVJOiB5b3UgY2FuIG5vdCB1c2UgdGhlIGBjZW50ZXJlZD17dHJ1ZX1gIGFuZCBgdmFyaWFudD1cInNjcm9sbGFibGVcImAgcHJvcGVydGllcyAnICsgJ2F0IHRoZSBzYW1lIHRpbWUgb24gYSBgVGFic2AgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICAgICAgdmFyIGluZGljYXRvciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiSW5kaWNhdG9yLCBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbmRpY2F0b3IsXG4gICAgICAgIGNvbG9yOiBpbmRpY2F0b3JDb2xvclxuICAgICAgfSwgVGFiSW5kaWNhdG9yUHJvcHMsIHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB0aGlzLnN0YXRlLmluZGljYXRvclN0eWxlLCBUYWJJbmRpY2F0b3JQcm9wcy5zdHlsZSlcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMudmFsdWVUb0luZGV4ID0gbmV3IE1hcCgpO1xuICAgICAgdmFyIGNoaWxkSW5kZXggPSAwO1xuICAgICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuUHJvcCwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNoaWxkLnR5cGUgIT09IFJlYWN0LkZyYWdtZW50LCBbXCJNYXRlcmlhbC1VSTogdGhlIFRhYnMgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIGNoaWxkVmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZSA9PT0gdW5kZWZpbmVkID8gY2hpbGRJbmRleCA6IGNoaWxkLnByb3BzLnZhbHVlO1xuXG4gICAgICAgIF90aGlzMi52YWx1ZVRvSW5kZXguc2V0KGNoaWxkVmFsdWUsIGNoaWxkSW5kZXgpO1xuXG4gICAgICAgIHZhciBzZWxlY3RlZCA9IGNoaWxkVmFsdWUgPT09IHZhbHVlO1xuICAgICAgICBjaGlsZEluZGV4ICs9IDE7XG4gICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBmdWxsV2lkdGg6IHZhcmlhbnQgPT09ICdmdWxsV2lkdGgnLFxuICAgICAgICAgIGluZGljYXRvcjogc2VsZWN0ZWQgJiYgIV90aGlzMi5zdGF0ZS5tb3VudGVkICYmIGluZGljYXRvcixcbiAgICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgICAgIHRleHRDb2xvcjogdGV4dENvbG9yLFxuICAgICAgICAgIHZhbHVlOiBjaGlsZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgY29uZGl0aW9uYWxFbGVtZW50cyA9IHRoaXMuZ2V0Q29uZGl0aW9uYWxFbGVtZW50cygpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudExpc3RlbmVyLCB7XG4gICAgICAgIHRhcmdldDogXCJ3aW5kb3dcIixcbiAgICAgICAgb25SZXNpemU6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5mbGV4Q29udGFpbmVyXG4gICAgICB9LCBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvbkxlZnQsIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsYmFyU2l6ZUxpc3RlbmVyLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2Nyb2xsZXIsIHNjcm9sbGFibGUgPyBjbGFzc2VzLnNjcm9sbGFibGUgOiBjbGFzc2VzLmZpeGVkKSxcbiAgICAgICAgc3R5bGU6IHRoaXMuc3RhdGUuc2Nyb2xsZXJTdHlsZSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVRhYnNSZWYsXG4gICAgICAgIHJvbGU6IFwidGFibGlzdFwiLFxuICAgICAgICBvblNjcm9sbDogdGhpcy5oYW5kbGVUYWJzU2Nyb2xsXG4gICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZmxleENvbnRhaW5lciwgY2VudGVyZWQgJiYgIXNjcm9sbGFibGUgJiYgY2xhc3Nlcy5jZW50ZXJlZClcbiAgICAgIH0sIGNoaWxkcmVuKSwgdGhpcy5zdGF0ZS5tb3VudGVkICYmIGluZGljYXRvciksIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uUmlnaHQpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFicztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFicy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgbW91bnRzLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHRyaWdnZXIgYW4gYWN0aW9uIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGB1cGRhdGVJbmRpY2F0b3IoKWAgYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYWN0aW9ucyBUaGlzIG9iamVjdCBjb250YWlucyBhbGwgcG9zc2libGUgYWN0aW9uc1xuICAgKiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYnMgd2lsbCBiZSBjZW50ZXJlZC5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBpbnRlbmRlZCBmb3IgbGFyZ2Ugdmlld3MuXG4gICAqL1xuICBjZW50ZXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIGNvbG9yIG9mIHRoZSBpbmRpY2F0b3IuXG4gICAqL1xuICBpbmRpY2F0b3JDb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnc2Vjb25kYXJ5JywgJ3ByaW1hcnknXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogZnJvbSBgd2l0aEZvcndhcmRSZWZgXG4gICAqL1xuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBXZSBkZWZhdWx0IHRvIHRoZSBpbmRleCBvZiB0aGUgY2hpbGQgKG51bWJlcilcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgc2Nyb2xsIGJ1dHRvbnMuXG4gICAqL1xuICBTY3JvbGxCdXR0b25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGJlaGF2aW9yIG9mIHNjcm9sbCBidXR0b25zIHdoZW4gdGFicyBhcmUgc2V0IHRvIHNjcm9sbDpcbiAgICpcbiAgICogLSBgYXV0b2Agd2lsbCBvbmx5IHByZXNlbnQgdGhlbSB3aGVuIG5vdCBhbGwgdGhlIGl0ZW1zIGFyZSB2aXNpYmxlLlxuICAgKiAtIGBkZXNrdG9wYCB3aWxsIG9ubHkgcHJlc2VudCB0aGVtIG9uIG1lZGl1bSBhbmQgbGFyZ2VyIHZpZXdwb3J0cy5cbiAgICogLSBgb25gIHdpbGwgYWx3YXlzIHByZXNlbnQgdGhlbS5cbiAgICogLSBgb2ZmYCB3aWxsIG5ldmVyIHByZXNlbnQgdGhlbS5cbiAgICovXG4gIHNjcm9sbEJ1dHRvbnM6IFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nLCAnZGVza3RvcCcsICdvbicsICdvZmYnXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRhYkluZGljYXRvcmAgZWxlbWVudC5cbiAgICovXG4gIFRhYkluZGljYXRvclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjb2xvciBvZiB0aGUgYFRhYmAuXG4gICAqL1xuICB0ZXh0Q29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3NlY29uZGFyeScsICdwcmltYXJ5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGBUYWJgLlxuICAgKiBJZiB5b3UgZG9uJ3Qgd2FudCBhbnkgc2VsZWN0ZWQgYFRhYmAsIHlvdSBjYW4gc2V0IHRoaXMgcHJvcGVydHkgdG8gYGZhbHNlYC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiAgRGV0ZXJtaW5lcyBhZGRpdGlvbmFsIGRpc3BsYXkgYmVoYXZpb3Igb2YgdGhlIHRhYnM6XG4gICAqXG4gICAqICAtIGBzY3JvbGxhYmxlYCB3aWxsIGludm9rZSBzY3JvbGxpbmcgcHJvcGVydGllcyBhbmQgYWxsb3cgZm9yIGhvcml6b250YWxseVxuICAgKiAgc2Nyb2xsaW5nIChvciBzd2lwaW5nKSBvZiB0aGUgdGFiIGJhci5cbiAgICogIC1gZnVsbFdpZHRoYCB3aWxsIG1ha2UgdGhlIHRhYnMgZ3JvdyB0byB1c2UgYWxsIHRoZSBhdmFpbGFibGUgc3BhY2UsXG4gICAqICB3aGljaCBzaG91bGQgYmUgdXNlZCBmb3Igc21hbGwgdmlld3MsIGxpa2Ugb24gbW9iaWxlLlxuICAgKiAgLSBgc3RhbmRhcmRgIHdpbGwgcmVuZGVyIHRoZSBkZWZhdWx0IHN0YXRlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnc2Nyb2xsYWJsZScsICdmdWxsV2lkdGgnXSlcbn0gOiB2b2lkIDA7XG5UYWJzLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2VudGVyZWQ6IGZhbHNlLFxuICBjb21wb25lbnQ6ICdkaXYnLFxuICBpbmRpY2F0b3JDb2xvcjogJ3NlY29uZGFyeScsXG4gIFNjcm9sbEJ1dHRvbkNvbXBvbmVudDogVGFiU2Nyb2xsQnV0dG9uLFxuICBzY3JvbGxCdXR0b25zOiAnYXV0bycsXG4gIHRleHRDb2xvcjogJ2luaGVyaXQnLFxuICB2YXJpYW50OiAnc3RhbmRhcmQnXG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYnMnLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKHdpdGhGb3J3YXJkZWRSZWYoVGFicykpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgX2V4dGVuZHMyO1xuXG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIChfZXh0ZW5kczIgPSB7XG4gICAgICBtYXhXaWR0aDogMjY0LFxuICAgICAgbWluV2lkdGg6IDcyLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbkhlaWdodDogNDgsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgcGFkZGluZzogJzZweCAxMnB4J1xuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBwYWRkaW5nOiAnNnB4IDI0cHgnXG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIFwib3ZlcmZsb3dcIiwgJ2hpZGRlbicpLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCBcIndoaXRlU3BhY2VcIiwgJ25vcm1hbCcpLCBfZGVmaW5lUHJvcGVydHkoX2V4dGVuZHMyLCBcInRleHRBbGlnblwiLCAnY2VudGVyJyksIF9kZWZpbmVQcm9wZXJ0eShfZXh0ZW5kczIsIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKSxcbiAgICAgIG1pbldpZHRoOiAxNjBcbiAgICB9KSwgX2V4dGVuZHMyKSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGJvdGggYGljb25gIGFuZCBgbGFiZWxgIGFyZSBwcm92aWRlZC4gKi9cbiAgICBsYWJlbEljb246IHtcbiAgICAgIG1pbkhlaWdodDogNzIsXG4gICAgICBwYWRkaW5nVG9wOiA5LFxuICAgICAgJyYgJHdyYXBwZXIgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBtYXJnaW5Cb3R0b206IDZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgcGFyZW50IFtgVGFic2BdKC9hcGkvdGFicy8pIGhhcyBgdGV4dENvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICB0ZXh0Q29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgb3BhY2l0eTogMC43LFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgb3BhY2l0eTogMC40XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIHBhcmVudCBbYFRhYnNgXSgvYXBpL3RhYnMvKSBoYXMgYHRleHRDb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgdGV4dENvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICAnJiRzZWxlY3RlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgcGFyZW50IFtgVGFic2BdKC9hcGkvdGFicy8pIGhhcyBgdGV4dENvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIHRleHRDb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICAnJiRzZWxlY3RlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzZWxlY3RlZD17dHJ1ZX1gIChjb250cm9sbGVkIGJ5IHRoZSBUYWJzIGNvbXBvbmVudCkuICovXG4gICAgc2VsZWN0ZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YCAoY29udHJvbGxlZCBieSB0aGUgVGFicyBjb21wb25lbnQpLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gIChjb250cm9sbGVkIGJ5IHRoZSBUYWJzIGNvbXBvbmVudCkuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICBmbGV4U2hyaW5rOiAxLFxuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXBwZWQ9e3RydWV9YC4gKi9cbiAgICB3cmFwcGVkOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIGxpbmVIZWlnaHQ6IDEuNVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGljb25gIGFuZCBgbGFiZWxgJ3Mgd3JhcHBlciBlbGVtZW50LiAqL1xuICAgIHdyYXBwZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgVGFiID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGluZGljYXRvciA9IHByb3BzLmluZGljYXRvcixcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgICAgX3Byb3BzJHRleHRDb2xvciA9IHByb3BzLnRleHRDb2xvcixcbiAgICAgIHRleHRDb2xvciA9IF9wcm9wcyR0ZXh0Q29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyR0ZXh0Q29sb3IsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgX3Byb3BzJHdyYXBwZWQgPSBwcm9wcy53cmFwcGVkLFxuICAgICAgd3JhcHBlZCA9IF9wcm9wcyR3cmFwcGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR3cmFwcGVkLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZ1bGxXaWR0aFwiLCBcImljb25cIiwgXCJpbmRpY2F0b3JcIiwgXCJsYWJlbFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcInNlbGVjdGVkXCIsIFwidGV4dENvbG9yXCIsIFwidmFsdWVcIiwgXCJ3cmFwcGVkXCJdKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJ0ZXh0Q29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZSh0ZXh0Q29sb3IpKV0sIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgc2VsZWN0ZWQgJiYgY2xhc3Nlcy5zZWxlY3RlZCwgbGFiZWwgJiYgaWNvbiAmJiBjbGFzc2VzLmxhYmVsSWNvbiwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCB3cmFwcGVkICYmIGNsYXNzZXMud3JhcHBlZCksXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJ0YWJcIixcbiAgICBcImFyaWEtc2VsZWN0ZWRcIjogc2VsZWN0ZWQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZVxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlclxuICB9LCBpY29uLCBsYWJlbCksIGluZGljYXRvcik7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGlzbid0IHN1cHBvcnRlZC5cbiAgICogVXNlIHRoZSBgY29tcG9uZW50YCBwcm9wZXJ0eSBpZiB5b3UgbmVlZCB0byBjaGFuZ2UgdGhlIGNoaWxkcmVuIHN0cnVjdHVyZS5cbiAgICovXG4gIGNoaWxkcmVuOiB1bnN1cHBvcnRlZFByb3AsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgdHJ1ZS5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZyBjb25zaWRlcmF0aW9uLCB3ZSBsZXQgdGhlIHNlbGVjdGVkIHRhYlxuICAgKiByZW5kZXIgdGhlIGluZGljYXRvci5cbiAgICovXG4gIGluZGljYXRvcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRleHRDb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnc2Vjb25kYXJ5JywgJ3ByaW1hcnknLCAnaW5oZXJpdCddKSxcblxuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIHlvdXIgb3duIHZhbHVlLiBPdGhlcndpc2UsIHdlIGZhbGxiYWNrIHRvIHRoZSBjaGlsZCBwb3NpdGlvbiBpbmRleC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUYWIgbGFiZWxzIGFwcGVhciBpbiBhIHNpbmdsZSByb3cuXG4gICAqIFRoZXkgY2FuIHVzZSBhIHNlY29uZCBsaW5lIGlmIG5lZWRlZC5cbiAgICovXG4gIHdyYXBwZWQ6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYidcbn0pKFRhYik7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH1cbiAgfSwgZWxldmF0aW9ucyk7XG59O1xudmFyIFBhcGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJHNxdWFyZSA9IHByb3BzLnNxdWFyZSxcbiAgICAgIHNxdWFyZSA9IF9wcm9wcyRzcXVhcmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNxdWFyZSxcbiAgICAgIF9wcm9wcyRlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb24sXG4gICAgICBlbGV2YXRpb24gPSBfcHJvcHMkZWxldmF0aW9uID09PSB2b2lkIDAgPyAxIDogX3Byb3BzJGVsZXZhdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwic3F1YXJlXCIsIFwiZWxldmF0aW9uXCJdKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGVsZXZhdGlvbiA+PSAwICYmIGVsZXZhdGlvbiA8IDI1LCBcIk1hdGVyaWFsLVVJOiB0aGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpIDogdm9pZCAwO1xuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sIGNsYXNzTmFtZVByb3AsICFzcXVhcmUgJiYgY2xhc3Nlcy5yb3VuZGVkKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuLy8gQSBncmlkIGNvbXBvbmVudCB1c2luZyB0aGUgZm9sbG93aW5nIGxpYnMgYXMgaW5zcGlyYXRpb24uXG4vL1xuLy8gRm9yIHRoZSBpbXBsZW1lbnRhdGlvbjpcbi8vIC0gaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4zL2xheW91dC9ncmlkL1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20va3Jpc3RvZmVyam9zZXBoL2ZsZXhib3hncmlkL2Jsb2IvbWFzdGVyL3NyYy9jc3MvZmxleGJveGdyaWQuY3NzXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9yb3lsZWUwNzA0L3JlYWN0LWZsZXhib3gtZ3JpZFxuLy8gLSBodHRwczovL21hdGVyaWFsLmFuZ3VsYXJqcy5vcmcvbGF0ZXN0L2xheW91dC9pbnRyb2R1Y3Rpb25cbi8vXG4vLyBGb2xsb3cgdGhpcyBmbGV4Ym94IEd1aWRlIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1bmRlcmx5aW5nIG1vZGVsOlxuLy8gLSBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9hLWd1aWRlLXRvLWZsZXhib3gvXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsga2V5cyBhcyBicmVha3BvaW50S2V5cyB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgcmVxdWlyZVByb3BGYWN0b3J5IGZyb20gJy4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeSc7XG52YXIgU1BBQ0lOR1MgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xudmFyIEdSSURfU0laRVMgPSBbJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVHcmlkKGdsb2JhbFN0eWxlcywgdGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBHUklEX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIga2V5ID0gXCJncmlkLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNpemUpO1xuXG4gICAgaWYgKHNpemUgPT09IHRydWUpIHtcbiAgICAgIC8vIEZvciB0aGUgYXV0byBsYXlvdXRpbmdcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzaXplID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgZmxleEdyb3c6IDAsXG4gICAgICAgIG1heFdpZHRoOiAnbm9uZSdcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBLZWVwIDcgc2lnbmlmaWNhbnQgbnVtYmVycy5cblxuXG4gICAgdmFyIHdpZHRoID0gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChzaXplIC8gMTIgKiAxMGU3KSAvIDEwZTUsIFwiJVwiKTsgLy8gQ2xvc2UgdG8gdGhlIGJvb3RzdHJhcCBpbXBsZW1lbnRhdGlvbjpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi84ZmNjYWEyNDM5ZTk3ZWM3MmE0YjdkYzQyY2NjMWY2NDk3OTBhZGIwL3Njc3MvbWl4aW5zL19ncmlkLnNjc3MjTDQxXG5cbiAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgIGZsZXhCYXNpczogd2lkdGgsXG4gICAgICBmbGV4R3JvdzogMCxcbiAgICAgIG1heFdpZHRoOiB3aWR0aFxuICAgIH07XG4gIH0pOyAvLyBObyBuZWVkIGZvciBhIG1lZGlhIHF1ZXJ5IGZvciB0aGUgZmlyc3Qgc2l6ZS5cblxuICBpZiAoYnJlYWtwb2ludCA9PT0gJ3hzJykge1xuICAgIF9leHRlbmRzKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgfSBlbHNlIHtcbiAgICBnbG9iYWxTdHlsZXNbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCBicmVha3BvaW50KSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgU1BBQ0lOR1MuZm9yRWFjaChmdW5jdGlvbiAoc3BhY2luZykge1xuICAgIHZhciB0aGVtZVNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nKHNwYWNpbmcpO1xuXG4gICAgaWYgKHRoZW1lU3BhY2luZyA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0eWxlc1tcInNwYWNpbmctXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiLVwiKS5jb25jYXQoc3BhY2luZyldID0ge1xuICAgICAgbWFyZ2luOiAtdGhlbWVTcGFjaW5nIC8gMixcbiAgICAgIHdpZHRoOiBcImNhbGMoMTAwJSArIFwiLmNvbmNhdCh0aGVtZVNwYWNpbmcsIFwicHgpXCIpLFxuICAgICAgJyYgPiAkaXRlbSc6IHtcbiAgICAgICAgcGFkZGluZzogdGhlbWVTcGFjaW5nIC8gMlxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufSAvLyBEZWZhdWx0IENTUyB2YWx1ZXNcbi8vIGZsZXg6ICcwIDEgYXV0bycsXG4vLyBmbGV4RGlyZWN0aW9uOiAncm93Jyxcbi8vIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0Jyxcbi8vIGZsZXhXcmFwOiAnbm93cmFwJyxcbi8vIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG5cblxuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50ICovXG4gICAgcm9vdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb250YWluZXI9e3RydWV9YC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaXRlbT17dHJ1ZX1gLiAqL1xuICAgIGl0ZW06IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luOiAnMCcgLy8gRm9yIGluc3RhbmNlLCBpdCdzIHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCBhIGBmaWd1cmVgIGVsZW1lbnQuXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgemVyb01pbldpZHRoPXt0cnVlfWAuICovXG4gICAgemVyb01pbldpZHRoOiB7XG4gICAgICBtaW5XaWR0aDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJjb2x1bW5cImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1jb2x1bW4nOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJjb2x1bW4tcmV2ZXJzZVwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbi1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXJlY3Rpb249XCJyd28tcmV2ZXJzZVwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLXJvdy1yZXZlcnNlJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwPVwibm93cmFwXCJgLiAqL1xuICAgICd3cmFwLXhzLW5vd3JhcCc6IHtcbiAgICAgIGZsZXhXcmFwOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB3cmFwPVwicmV2ZXJzZVwiYC4gKi9cbiAgICAnd3JhcC14cy13cmFwLXJldmVyc2UnOiB7XG4gICAgICBmbGV4V3JhcDogJ3dyYXAtcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImNlbnRlclwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWZsZXgtc3RhcnQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25JdGVtcz1cImJhc2VsaW5lXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1iYXNlbGluZSc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdiYXNlbGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiY2VudGVyXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWNlbnRlcic6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiZmxleC1zdGFydFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1zdGFydCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwiZmxleC1lbmRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwic3BhY2UtYmV0d2VlblwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ25Db250ZW50PVwic3BhY2UtYXJvdW5kXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cImNlbnRlclwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1jZW50ZXInOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLWZsZXgtZW5kJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWJldHdlZW5cImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWFyb3VuZFwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1hcm91bmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBganVzdGlmeT1cInNwYWNlLWV2ZW5seVwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1ldmVubHknOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWV2ZW5seSdcbiAgICB9XG4gIH0sIGdlbmVyYXRlR3V0dGVyKHRoZW1lLCAneHMnKSwgYnJlYWtwb2ludEtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwga2V5KSB7XG4gICAgLy8gVXNlIHNpZGUgZWZmZWN0IG92ZXIgaW1tdXRhYmlsaXR5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgZ2VuZXJhdGVHcmlkKGFjY3VtdWxhdG9yLCB0aGVtZSwga2V5KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIHt9KSk7XG59O1xudmFyIEdyaWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ25Db250ZW50ID0gcHJvcHMuYWxpZ25Db250ZW50LFxuICAgICAgYWxpZ25Db250ZW50ID0gX3Byb3BzJGFsaWduQ29udGVudCA9PT0gdm9pZCAwID8gJ3N0cmV0Y2gnIDogX3Byb3BzJGFsaWduQ29udGVudCxcbiAgICAgIF9wcm9wcyRhbGlnbkl0ZW1zID0gcHJvcHMuYWxpZ25JdGVtcyxcbiAgICAgIGFsaWduSXRlbXMgPSBfcHJvcHMkYWxpZ25JdGVtcyA9PT0gdm9pZCAwID8gJ3N0cmV0Y2gnIDogX3Byb3BzJGFsaWduSXRlbXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIGNvbnRhaW5lciA9IF9wcm9wcyRjb250YWluZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAncm93JyA6IF9wcm9wcyRkaXJlY3Rpb24sXG4gICAgICBfcHJvcHMkaXRlbSA9IHByb3BzLml0ZW0sXG4gICAgICBpdGVtID0gX3Byb3BzJGl0ZW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGl0ZW0sXG4gICAgICBfcHJvcHMkanVzdGlmeSA9IHByb3BzLmp1c3RpZnksXG4gICAgICBqdXN0aWZ5ID0gX3Byb3BzJGp1c3RpZnkgPT09IHZvaWQgMCA/ICdmbGV4LXN0YXJ0JyA6IF9wcm9wcyRqdXN0aWZ5LFxuICAgICAgX3Byb3BzJGxnID0gcHJvcHMubGcsXG4gICAgICBsZyA9IF9wcm9wcyRsZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbGcsXG4gICAgICBfcHJvcHMkbWQgPSBwcm9wcy5tZCxcbiAgICAgIG1kID0gX3Byb3BzJG1kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtZCxcbiAgICAgIF9wcm9wcyRzbSA9IHByb3BzLnNtLFxuICAgICAgc20gPSBfcHJvcHMkc20gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNtLFxuICAgICAgX3Byb3BzJHNwYWNpbmcgPSBwcm9wcy5zcGFjaW5nLFxuICAgICAgc3BhY2luZyA9IF9wcm9wcyRzcGFjaW5nID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHNwYWNpbmcsXG4gICAgICBfcHJvcHMkd3JhcCA9IHByb3BzLndyYXAsXG4gICAgICB3cmFwID0gX3Byb3BzJHdyYXAgPT09IHZvaWQgMCA/ICd3cmFwJyA6IF9wcm9wcyR3cmFwLFxuICAgICAgX3Byb3BzJHhsID0gcHJvcHMueGwsXG4gICAgICB4bCA9IF9wcm9wcyR4bCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkeGwsXG4gICAgICBfcHJvcHMkeHMgPSBwcm9wcy54cyxcbiAgICAgIHhzID0gX3Byb3BzJHhzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4cyxcbiAgICAgIF9wcm9wcyR6ZXJvTWluV2lkdGggPSBwcm9wcy56ZXJvTWluV2lkdGgsXG4gICAgICB6ZXJvTWluV2lkdGggPSBfcHJvcHMkemVyb01pbldpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR6ZXJvTWluV2lkdGgsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWxpZ25Db250ZW50XCIsIFwiYWxpZ25JdGVtc1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb250YWluZXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJpdGVtXCIsIFwianVzdGlmeVwiLCBcImxnXCIsIFwibWRcIiwgXCJzbVwiLCBcInNwYWNpbmdcIiwgXCJ3cmFwXCIsIFwieGxcIiwgXCJ4c1wiLCBcInplcm9NaW5XaWR0aFwiXSk7XG5cbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wLCBjb250YWluZXIgJiYgW2NsYXNzZXMuY29udGFpbmVyLCBzcGFjaW5nICE9PSAwICYmIGNsYXNzZXNbXCJzcGFjaW5nLXhzLVwiLmNvbmNhdChTdHJpbmcoc3BhY2luZykpXV0sIGl0ZW0gJiYgY2xhc3Nlcy5pdGVtLCB6ZXJvTWluV2lkdGggJiYgY2xhc3Nlcy56ZXJvTWluV2lkdGgsIGRpcmVjdGlvbiAhPT0gJ3JvdycgJiYgY2xhc3Nlc1tcImRpcmVjdGlvbi14cy1cIi5jb25jYXQoU3RyaW5nKGRpcmVjdGlvbikpXSwgd3JhcCAhPT0gJ3dyYXAnICYmIGNsYXNzZXNbXCJ3cmFwLXhzLVwiLmNvbmNhdChTdHJpbmcod3JhcCkpXSwgYWxpZ25JdGVtcyAhPT0gJ3N0cmV0Y2gnICYmIGNsYXNzZXNbXCJhbGlnbi1pdGVtcy14cy1cIi5jb25jYXQoU3RyaW5nKGFsaWduSXRlbXMpKV0sIGFsaWduQ29udGVudCAhPT0gJ3N0cmV0Y2gnICYmIGNsYXNzZXNbXCJhbGlnbi1jb250ZW50LXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25Db250ZW50KSldLCBqdXN0aWZ5ICE9PSAnZmxleC1zdGFydCcgJiYgY2xhc3Nlc1tcImp1c3RpZnkteHMtXCIuY29uY2F0KFN0cmluZyhqdXN0aWZ5KSldLCB4cyAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQteHMtXCIuY29uY2F0KFN0cmluZyh4cykpXSwgc20gIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLXNtLVwiLmNvbmNhdChTdHJpbmcoc20pKV0sIG1kICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1tZC1cIi5jb25jYXQoU3RyaW5nKG1kKSldLCBsZyAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtbGctXCIuY29uY2F0KFN0cmluZyhsZykpXSwgeGwgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLXhsLVwiLmNvbmNhdChTdHJpbmcoeGwpKV0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGNhbid0IHVzZSBuYW1lZCBmdW5jdGlvbiBleHByZXNzaW9uIHNpbmNlIHRoZSBmdW5jdGlvbiBib2R5IHJlZmVyZW5jZXMgYEdyaWRgXG4gIC8vIHdoaWNoIHdvdWxkIHBvaW50IHRvIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZCBvZiB0aGUgYWN0dWFsIGNvbXBvbmVudFxuICBHcmlkLmRpc3BsYXlOYW1lID0gJ0ZvcndhcmRSZWYoR3JpZCknO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1jb250ZW50YCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgYWxpZ25Db250ZW50OiBQcm9wVHlwZXMub25lT2YoWydzdHJldGNoJywgJ2NlbnRlcicsICdmbGV4LXN0YXJ0JywgJ2ZsZXgtZW5kJywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24taXRlbXNgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlcicsICdmbGV4LWVuZCcsICdzdHJldGNoJywgJ2Jhc2VsaW5lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBoYXZlIHRoZSBmbGV4ICpjb250YWluZXIqIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsncm93JywgJ3Jvdy1yZXZlcnNlJywgJ2NvbHVtbicsICdjb2x1bW4tcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqaXRlbSogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqL1xuICBpdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGp1c3RpZnktY29udGVudGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBqdXN0aWZ5OiBQcm9wVHlwZXMub25lT2YoWydmbGV4LXN0YXJ0JywgJ2NlbnRlcicsICdmbGV4LWVuZCcsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCcsICdzcGFjZS1ldmVubHknXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYGxnYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgbGc6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBtZGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIG1kOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgc21gIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBzbTogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudC5cbiAgICogSXQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHR5cGUgYGNvbnRhaW5lcmAgY29tcG9uZW50LlxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mKFNQQUNJTkdTKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtd3JhcGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIHdyYXA6IFByb3BUeXBlcy5vbmVPZihbJ25vd3JhcCcsICd3cmFwJywgJ3dyYXAtcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgeGxgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMuXG4gICAqL1xuICB4bDogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgdGhlIHNjcmVlbiBzaXplcyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkuXG4gICAqL1xuICB4czogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgc2V0cyBgbWluLXdpZHRoOiAwYCBvbiB0aGUgaXRlbS5cbiAgICogUmVmZXIgdG8gdGhlIGxpbWl0YXRpb25zIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24gdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVzZSBjYXNlLlxuICAgKi9cbiAgemVyb01pbldpZHRoOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbnZhciBTdHlsZWRHcmlkID0gd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWQnXG59KShHcmlkKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHJlcXVpcmVQcm9wID0gcmVxdWlyZVByb3BGYWN0b3J5KCdHcmlkJyk7XG4gIFN0eWxlZEdyaWQucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIFN0eWxlZEdyaWQucHJvcFR5cGVzLCB7XG4gICAgYWxpZ25Db250ZW50OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgYWxpZ25JdGVtczogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGRpcmVjdGlvbjogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGp1c3RpZnk6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBsZzogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBtZDogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBzbTogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBzcGFjaW5nOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgd3JhcDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHhzOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHplcm9NaW5XaWR0aDogcmVxdWlyZVByb3AoJ2l0ZW0nKVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVkR3JpZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICcuLi9zdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBfcm9vdDtcblxuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogKF9yb290ID0ge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF9yb290LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9yb290LCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoNCksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoNClcbiAgICB9KSwgX3Jvb3QpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZml4ZWQ9e3RydWV9YC4gKi9cbiAgICBmaXhlZDogT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuXG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgICBtYXhXaWR0aDogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cInhzXCJgLiAqL1xuICAgIG1heFdpZHRoWHM6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hzJyksIHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwic21cImAuICovXG4gICAgbWF4V2lkdGhTbTogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJtZFwiYC4gKi9cbiAgICBtYXhXaWR0aE1kOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cImxnXCJgLiAqL1xuICAgIG1heFdpZHRoTGc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ2xnJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubGdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwieGxcImAuICovXG4gICAgbWF4V2lkdGhYbDogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneGwnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54bFxuICAgIH0pXG4gIH07XG59O1xudmFyIENvbnRhaW5lciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29udGFpbmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgICAgZml4ZWQgPSBfcHJvcHMkZml4ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZpeGVkLFxuICAgICAgX3Byb3BzJG1heFdpZHRoID0gcHJvcHMubWF4V2lkdGgsXG4gICAgICBtYXhXaWR0aCA9IF9wcm9wcyRtYXhXaWR0aCA9PT0gdm9pZCAwID8gJ2xnJyA6IF9wcm9wcyRtYXhXaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZml4ZWRcIiwgXCJtYXhXaWR0aFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmaXhlZCAmJiBjbGFzc2VzLmZpeGVkLCBtYXhXaWR0aCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcIm1heFdpZHRoXCIuY29uY2F0KGNhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSkpXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbWF4LXdpZHRoIHRvIG1hdGNoIHRoZSBtaW4td2lkdGggb2YgdGhlIGN1cnJlbnQgYnJlYWtwb2ludC5cbiAgICogVGhpcyBpcyB1c2VmdWwgaWYgeW91J2QgcHJlZmVyIHRvIGRlc2lnbiBmb3IgYSBmaXhlZCBzZXQgb2Ygc2l6ZXNcbiAgICogaW5zdGVhZCBvZiB0cnlpbmcgdG8gYWNjb21tb2RhdGUgYSBmdWxseSBmbHVpZCB2aWV3cG9ydC5cbiAgICogSXQncyBmbHVpZCBieSBkZWZhdWx0LlxuICAgKi9cbiAgZml4ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIG1heC13aWR0aCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBUaGUgY29udGFpbmVyIHdpZHRoIGdyb3dzIHdpdGggdGhlIHNpemUgb2YgdGhlIHNjcmVlbi5cbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBgbWF4V2lkdGhgLlxuICAgKi9cbiAgbWF4V2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDb250YWluZXInXG59KShDb250YWluZXIpOyIsImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cblxuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICByZXR1cm4gZGVlcG1lcmdlKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cblxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIG9taXQoaW5wdXQsIGZpZWxkcykge1xuICB2YXIgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKGlucHV0KS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgaWYgKGZpZWxkcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgb3V0cHV0W3Byb3BdID0gaW5wdXRbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY3NzKHN0eWxlRnVuY3Rpb24pIHtcbiAgdmFyIG5ld1N0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBuZXdTdHlsZUZ1bmN0aW9uKHByb3BzKSB7XG4gICAgdmFyIG91dHB1dCA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuXG4gICAgaWYgKHByb3BzLmNzcykge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBtZXJnZShvdXRwdXQsIHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgIH0sIHByb3BzLmNzcykpKSwgb21pdChwcm9wcy5jc3MsIFtzdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgY3NzOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ2NzcyddLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcykpO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3R5bGVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgICAgdmFyIG91dHB1dCA9IHN0eWxlKHByb3BzKTtcblxuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBvdXRwdXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTsgLy8gQWx0ZXJuYXRpdmUgYXBwcm9hY2ggdGhhdCBkb2Vzbid0IHlpZWxkIGFueSBwZXJmb3JtYW5jZSBnYWluLlxuICAvLyBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgLy8gICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAvLyAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gIC8vICAgfSk7XG4gIC8vICAgcmV0dXJuIGFjYztcbiAgLy8gfSwge30pO1xuICAvLyBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgLy8gICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gIC8vICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgLy8gICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgLy8gICAgIH1cbiAgLy8gICAgIHJldHVybiBhY2M7XG4gIC8vICAgfSwge30pO1xuICAvLyB9O1xuXG5cbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoYWNjLCBzdHlsZS5wcm9wVHlwZXMpO1xuICB9LCB7fSkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBzdHlsZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpO1xuICB9LCBbXSk7XG4gIHJldHVybiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7IC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuXG52YXIgdmFsdWVzID0ge1xuICB4czogMCxcbiAgc206IDYwMCxcbiAgbWQ6IDk2MCxcbiAgbGc6IDEyODAsXG4gIHhsOiAxOTIwXG59O1xudmFyIGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNba2V5XSwgXCJweClcIik7XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvcHMudGhlbWUsICdAbWF0ZXJpYWwtdWkvc3lzdGVtOiB5b3UgYXJlIGNhbGxpbmcgYSBzdHlsZSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgdmFsdWUuJykgOiB2b2lkIDA7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKHByb3BWYWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIF90aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGJyZWFrcG9pbnQpIHtcbiAgICAgIGFjY1tfdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgdmFyIGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaXRlbSkge1xuICAgIHJldHVybiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbDtcbiAgfSwgb2JqKTtcbn1cblxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICB2YXIgcHJvcCA9IG9wdGlvbnMucHJvcCxcbiAgICAgIF9vcHRpb25zJGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5jc3NQcm9wZXJ0eSxcbiAgICAgIGNzc1Byb3BlcnR5ID0gX29wdGlvbnMkY3NzUHJvcGVydHkgPT09IHZvaWQgMCA/IG9wdGlvbnMucHJvcCA6IF9vcHRpb25zJGNzc1Byb3BlcnR5LFxuICAgICAgdGhlbWVLZXkgPSBvcHRpb25zLnRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIHZhciB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG5cbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZnVuY3Rpb24gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZUZpbmFsKSB7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCBwcm9wVmFsdWVGaW5hbDtcblxuICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wLCByZXNwb25zaXZlUHJvcFR5cGUpIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5cbmZ1bmN0aW9uIGdldEJvcmRlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdCh2YWx1ZSwgXCJweCBzb2xpZFwiKS5jb25jYXQodmFsdWUgPT09IDAgPyAnICFpbXBvcnRhbnQnIDogJycpO1xufVxuXG5leHBvcnQgdmFyIGJvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlcicsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyVG9wID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJSaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJCb3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b20nLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlckxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUsIFwiICFpbXBvcnRhbnRcIik7XG4gIH1cbn0pO1xuZXhwb3J0IHZhciBib3JkZXJSYWRpdXMgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSYWRpdXMnLFxuICB0aGVtZUtleTogJ3NoYXBlJ1xufSk7XG52YXIgYm9yZGVycyA9IGNvbXBvc2UoYm9yZGVyLCBib3JkZXJUb3AsIGJvcmRlclJpZ2h0LCBib3JkZXJCb3R0b20sIGJvcmRlckxlZnQsIGJvcmRlckNvbG9yLCBib3JkZXJSYWRpdXMpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBkaXNwbGF5UmF3ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheSdcbn0pO1xuZXhwb3J0IHZhciBkaXNwbGF5UHJpbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5UHJpbnQnLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIG92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnb3ZlcmZsb3cnXG59KTtcbmV4cG9ydCB2YXIgdGV4dE92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dE92ZXJmbG93J1xufSk7XG5leHBvcnQgdmFyIHdoaXRlU3BhY2UgPSBzdHlsZSh7XG4gIHByb3A6ICd3aGl0ZVNwYWNlJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKGRpc3BsYXlSYXcsIGRpc3BsYXlQcmludCwgb3ZlcmZsb3csIHRleHRPdmVyZmxvdywgd2hpdGVTcGFjZSk7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgZmxleEJhc2lzID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEJhc2lzJ1xufSk7XG5leHBvcnQgdmFyIGZsZXhEaXJlY3Rpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4RGlyZWN0aW9uJ1xufSk7XG5leHBvcnQgdmFyIGZsZXhXcmFwID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFdyYXAnXG59KTtcbmV4cG9ydCB2YXIganVzdGlmeUNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5Q29udGVudCdcbn0pO1xuZXhwb3J0IHZhciBhbGlnbkl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25JdGVtcydcbn0pO1xuZXhwb3J0IHZhciBhbGlnbkNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkNvbnRlbnQnXG59KTtcbmV4cG9ydCB2YXIgb3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdvcmRlcidcbn0pO1xuZXhwb3J0IHZhciBmbGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleCdcbn0pO1xuZXhwb3J0IHZhciBmbGV4R3JvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhHcm93J1xufSk7XG5leHBvcnQgdmFyIGZsZXhTaHJpbmsgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4U2hyaW5rJ1xufSk7XG5leHBvcnQgdmFyIGFsaWduU2VsZiA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduU2VsZidcbn0pO1xuZXhwb3J0IHZhciBqdXN0aWZ5SXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5SXRlbXMnXG59KTtcbmV4cG9ydCB2YXIganVzdGlmeVNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5U2VsZidcbn0pO1xudmFyIGZsZXhib3ggPSBjb21wb3NlKGZsZXhCYXNpcywgZmxleERpcmVjdGlvbiwgZmxleFdyYXAsIGp1c3RpZnlDb250ZW50LCBhbGlnbkl0ZW1zLCBhbGlnbkNvbnRlbnQsIG9yZGVyLCBmbGV4LCBmbGV4R3JvdywgZmxleFNocmluaywgYWxpZ25TZWxmLCBqdXN0aWZ5SXRlbXMsIGp1c3RpZnlTZWxmKTtcbmV4cG9ydCBkZWZhdWx0IGZsZXhib3g7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSBzdHlsZSh7XG4gIHByb3A6ICdwb3NpdGlvbidcbn0pO1xuZXhwb3J0IHZhciB6SW5kZXggPSBzdHlsZSh7XG4gIHByb3A6ICd6SW5kZXgnLFxuICB0aGVtZUtleTogJ3pJbmRleCdcbn0pO1xuZXhwb3J0IHZhciB0b3AgPSBzdHlsZSh7XG4gIHByb3A6ICd0b3AnXG59KTtcbmV4cG9ydCB2YXIgcmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdyaWdodCdcbn0pO1xuZXhwb3J0IHZhciBib3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3R0b20nXG59KTtcbmV4cG9ydCB2YXIgbGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xlZnQnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UocG9zaXRpb24sIHpJbmRleCwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IHZhciBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgdmFyIGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbnZhciBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbnZhciBib3hTaGFkb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaGFkb3cnLFxuICB0aGVtZUtleTogJ3NoYWRvd3MnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGJveFNoYWRvdzsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgPyBcIlwiLmNvbmNhdCh2YWx1ZSAqIDEwMCwgXCIlXCIpIDogdmFsdWU7XG59XG5cbmV4cG9ydCB2YXIgd2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWF4V2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhXaWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG52YXIgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0KTtcbmV4cG9ydCBkZWZhdWx0IHNpemluZzsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xudmFyIHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG52YXIgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxudmFyIGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAzKSB7XG4gICAgcmV0dXJuIFtwcm9wXTtcbiAgfVxuXG4gIHZhciBfcHJvcCRzcGxpdCA9IHByb3Auc3BsaXQoJycpLFxuICAgICAgX3Byb3Akc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3Byb3Akc3BsaXQsIDIpLFxuICAgICAgYSA9IF9wcm9wJHNwbGl0MlswXSxcbiAgICAgIGIgPSBfcHJvcCRzcGxpdDJbMV07XG5cbiAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGZ1bmN0aW9uIChkaXIpIHtcbiAgICByZXR1cm4gcHJvcGVydHkgKyBkaXI7XG4gIH0pIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xudmFyIHNwYWNpbmdLZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAnbWFyZ2luJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnXTtcblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtZXIodGhlbWUpIHtcbiAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcgfHwgODtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGFicyA8PSB0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSwgW1wiQG1hdGVyaWFsLXVpL3N5c3RlbTogdGhlIHZhbHVlIHByb3ZpZGVkIChcIi5jb25jYXQoYWJzLCBcIikgb3ZlcmZsb3dzLlwiKSwgXCJUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6IFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh0aGVtZVNwYWNpbmcpLCBcIi5cIiksIFwiXCIuY29uY2F0KGFicywgXCIgPiBcIikuY29uY2F0KHRoZW1lU3BhY2luZy5sZW5ndGggLSAxLCBcIiwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgW1wiQG1hdGVyaWFsLXVpL3N5c3RlbTogdGhlIGB0aGVtZS5zcGFjaW5nYCB2YWx1ZSAoXCIuY29uY2F0KHRoZW1lU3BhY2luZywgXCIpIGlzIGludmFsaWQuXCIpLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cblxuICB2YXIgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgdmFyIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gXCItXCIuY29uY2F0KHRyYW5zZm9ybWVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcFZhbHVlKSB7XG4gICAgcmV0dXJuIGNzc1Byb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNzc1Byb3BlcnR5KSB7XG4gICAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgdmFyIHRyYW5zZm9ybWVyID0gZ2V0VHJhbnNmb3JtZXIodGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMTQgaXRlbXMsXG4gICAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgICBpZiAoc3BhY2luZ0tleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH0pLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgZm9udEZhbWlseSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRGYW1pbHknLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgZm9udFNpemUgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250U2l6ZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IHZhciBmb250U3R5bGUgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250U3R5bGUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgZm9udFdlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRXZWlnaHQnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgbGV0dGVyU3BhY2luZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2xldHRlclNwYWNpbmcnXG59KTtcbmV4cG9ydCB2YXIgbGluZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydCB2YXIgdGV4dEFsaWduID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dEFsaWduJ1xufSk7XG52YXIgdHlwb2dyYXBoeSA9IGNvbXBvc2UoZm9udEZhbWlseSwgZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgbGV0dGVyU3BhY2luZywgbGluZUhlaWdodCwgdGV4dEFsaWduKTtcbmV4cG9ydCBkZWZhdWx0IHR5cG9ncmFwaHk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuXG5mdW5jdGlvbiBvbWl0KGlucHV0LCBmaWVsZHMpIHtcbiAgdmFyIG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhpbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChmaWVsZHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtwcm9wXSA9IGlucHV0W3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IC8vIHN0eWxlZC1jb21wb25lbnRzJ3MgQVBJIHJlbW92ZXMgdGhlIG1hcHBpbmcgYmV0d2VlbiBjb21wb25lbnRzIGFuZCBzdHlsZXMuXG4vLyBVc2luZyBjb21wb25lbnRzIGFzIGEgbG93LWxldmVsIHN0eWxpbmcgY29uc3RydWN0IGNhbiBiZSBzaW1wbGVyLlxuXG5cbmZ1bmN0aW9uIHN0eWxlZChDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENyZWF0b3IgPSBmdW5jdGlvbiBjb21wb25lbnRDcmVhdG9yKHN0eWxlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFsnWW91IGFyZSBjYWxsaW5nIHN0eWxlZChDb21wb25lbnQpKHN0eWxlKSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFuYW1lKSB7XG4gICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZVByZWZpeCA9IGRpc3BsYXlOYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdHlsZXNPckNyZWF0b3IgPSB0eXBlb2Ygc3R5bGUgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IGZ1bmN0aW9uIHJvb3QocHJvcHMpIHtcbiAgICAgICAgICByZXR1cm4gc3R5bGUoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICAgICAgfSwgcHJvcHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IDoge1xuICAgICAgcm9vdDogc3R5bGVcbiAgICB9O1xuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBmaWx0ZXJQcm9wcztcbiAgICB2YXIgcHJvcFR5cGVzID0ge307XG5cbiAgICBpZiAoc3R5bGUuZmlsdGVyUHJvcHMpIHtcbiAgICAgIGZpbHRlclByb3BzID0gc3R5bGUuZmlsdGVyUHJvcHM7XG4gICAgICBkZWxldGUgc3R5bGUuZmlsdGVyUHJvcHM7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXMgKi9cblxuXG4gICAgaWYgKHN0eWxlLnByb3BUeXBlcykge1xuICAgICAgcHJvcFR5cGVzID0gc3R5bGUucHJvcFR5cGVzO1xuICAgICAgZGVsZXRlIHN0eWxlLnByb3BUeXBlcztcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzICovXG5cblxuICAgIHZhciBTdHlsZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0eWxlZENvbXBvbmVudChwcm9wcywgcmVmKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNsb25lID0gcHJvcHMuY2xvbmUsXG4gICAgICAgICAgQ29tcG9uZW50UHJvcCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjbG9uZVwiLCBcImNvbXBvbmVudFwiXSk7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKHByb3BzKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCk7XG5cbiAgICAgIGlmIChjbG9uZSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNwcmVhZCA9IG90aGVyO1xuXG4gICAgICBpZiAoZmlsdGVyUHJvcHMpIHtcbiAgICAgICAgc3ByZWFkID0gb21pdChzcHJlYWQsIGZpbHRlclByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4oX2V4dGVuZHMoe1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0sIHNwcmVhZCkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgRmluYWxDb21wb25lbnQgPSBDb21wb25lbnRQcm9wIHx8IENvbXBvbmVudDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZpbmFsQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgfSwgc3ByZWFkKSwgY2hpbGRyZW4pO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7XG4gICAgICAvKipcbiAgICAgICAqIEEgcmVuZGVyIGZ1bmN0aW9uIG9yIG5vZGUuXG4gICAgICAgKi9cbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAaWdub3JlXG4gICAgICAgKi9cbiAgICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCByZWN5Y2xlIGl0J3MgY2hpbGRyZW4gRE9NIGVsZW1lbnQuXG4gICAgICAgKiBJdCdzIHVzaW5nIGBSZWFjdC5jbG9uZUVsZW1lbnRgIGludGVybmFsbHkuXG4gICAgICAgKi9cbiAgICAgIGNsb25lOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5jbG9uZSAmJiBwcm9wcy5jb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgY2FuIG5vdCB1c2UgdGhlIGNsb25lIGFuZCBjb21wb25lbnQgcHJvcGVydGllcyBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAgICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gICAgfSwgcHJvcFR5cGVzKSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlN0eWxlZChcIi5jb25jYXQoY2xhc3NOYW1lUHJlZml4LCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoU3R5bGVkQ29tcG9uZW50LCBDb21wb25lbnQpO1xuICAgIHJldHVybiBTdHlsZWRDb21wb25lbnQ7XG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudENyZWF0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IHsgc3R5bGVkIGFzIHN0eWxlZFdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxudmFyIHN0eWxlZCA9IGZ1bmN0aW9uIHN0eWxlZChDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENyZWF0b3IgPSBzdHlsZWRXaXRob3V0RGVmYXVsdChDb21wb25lbnQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudENyZWF0b3Ioc3R5bGUsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gICAgfSwgb3B0aW9ucykpO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCB7IGJvcmRlcnMsIGNvbXBvc2UsIGRpc3BsYXksIGZsZXhib3gsIHBhbGV0dGUsIHBvc2l0aW9ucywgc2hhZG93cywgc2l6aW5nLCBzcGFjaW5nLCB0eXBvZ3JhcGh5LCBjc3MgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5leHBvcnQgdmFyIHN0eWxlRnVuY3Rpb24gPSBjc3MoY29tcG9zZShib3JkZXJzLCBkaXNwbGF5LCBmbGV4Ym94LCBwb3NpdGlvbnMsIHBhbGV0dGUsIHNoYWRvd3MsIHNpemluZywgc3BhY2luZywgdHlwb2dyYXBoeSkpO1xuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICovXG5cbnZhciBCb3ggPSBzdHlsZWQoJ2RpdicpKHN0eWxlRnVuY3Rpb24sIHtcbiAgbmFtZTogJ011aUJveCdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgQm94OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTJcImAuICovXG4gICAgYm9keTI6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTFcImAuICovXG4gICAgYm9keTE6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnV0dG9uXCJgLiAqL1xuICAgIGJ1dHRvbjogdGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDFcImAuICovXG4gICAgaDE6IHRoZW1lLnR5cG9ncmFwaHkuaDEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDJcImAuICovXG4gICAgaDI6IHRoZW1lLnR5cG9ncmFwaHkuaDIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDNcImAuICovXG4gICAgaDM6IHRoZW1lLnR5cG9ncmFwaHkuaDMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDRcImAuICovXG4gICAgaDQ6IHRoZW1lLnR5cG9ncmFwaHkuaDQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDVcImAuICovXG4gICAgaDU6IHRoZW1lLnR5cG9ncmFwaHkuaDUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDZcImAuICovXG4gICAgaDY6IHRoZW1lLnR5cG9ncmFwaHkuaDYsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUxXCJgLiAqL1xuICAgIHN1YnRpdGxlMTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUyXCJgLiAqL1xuICAgIHN1YnRpdGxlMjogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3ZlcmxpbmVcImAuICovXG4gICAgb3ZlcmxpbmU6IHRoZW1lLnR5cG9ncmFwaHkub3ZlcmxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3JPbmx5XCJgLiBPbmx5IGFjY2Vzc2libGUgdG8gc2NyZWVuIHJlYWRlcnMuICovXG4gICAgc3JPbmx5OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibm93cmFwXCJgLiAqL1xuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZ3V0dGVyQm90dG9tPXt0cnVlfWAuICovXG4gICAgZ3V0dGVyQm90dG9tOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhcmFncmFwaD17dHJ1ZX1gLiAqL1xuICAgIHBhcmFncmFwaDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJpbmxpbmVcImAuICovXG4gICAgZGlzcGxheUlubGluZToge1xuICAgICAgZGlzcGxheTogJ2lubGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImJsb2NrXCJgLiAqL1xuICAgIGRpc3BsYXlCbG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJ1xufTtcbnZhciBUeXBvZ3JhcGh5ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgZGlzcGxheSA9IF9wcm9wcyRkaXNwbGF5ID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkZGlzcGxheSxcbiAgICAgIF9wcm9wcyRndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBndXR0ZXJCb3R0b20gPSBfcHJvcHMkZ3V0dGVyQm90dG9tID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRndXR0ZXJCb3R0b20sXG4gICAgICBfcHJvcHMkbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgbm9XcmFwID0gX3Byb3BzJG5vV3JhcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9XcmFwLFxuICAgICAgX3Byb3BzJHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHBhcmFncmFwaCA9IF9wcm9wcyRwYXJhZ3JhcGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHBhcmFncmFwaCxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdib2R5MScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIF9wcm9wcyR2YXJpYW50TWFwcGluZyA9IHByb3BzLnZhcmlhbnRNYXBwaW5nLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPT09IHZvaWQgMCA/IGRlZmF1bHRWYXJpYW50TWFwcGluZyA6IF9wcm9wcyR2YXJpYW50TWFwcGluZyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc3BsYXlcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ0aGVtZVwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmFyaWFudCAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbdmFyaWFudF0sIGNvbG9yICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIG5vV3JhcCAmJiBjbGFzc2VzLm5vV3JhcCwgZ3V0dGVyQm90dG9tICYmIGNsYXNzZXMuZ3V0dGVyQm90dG9tLCBwYXJhZ3JhcGggJiYgY2xhc3Nlcy5wYXJhZ3JhcGgsIGFsaWduICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImFsaWduXCIuY29uY2F0KGNhcGl0YWxpemUoYWxpZ24pKV0sIGRpc3BsYXkgIT09ICdpbml0aWFsJyAmJiBjbGFzc2VzW1wiZGlzcGxheVwiLmNvbmNhdChjYXBpdGFsaXplKGRpc3BsYXkpKV0pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFR5cG9ncmFwaHkucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAnZXJyb3InXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBCeSBkZWZhdWx0LCBpdCBtYXBzIHRoZSB2YXJpYW50IHRvIGEgZ29vZCBkZWZhdWx0IGhlYWRsaW5lIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgZGlzcGxheSB0eXBlXG4gICAqL1xuICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2Jsb2NrJywgJ2lubGluZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYW4gZWxsaXBzaXMuXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFdlIGFyZSBlbXBpcmljYWxseSBtYXBwaW5nIHRoZSB2YXJpYW50IHByb3BlcnR5IHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IERPTSBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3BlcnR5LlxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoVHlwb2dyYXBoeSk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZShfcmVmKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBzdGF0ZXMgPSBfcmVmLnN0YXRlcyxcbiAgICAgIG11aUZvcm1Db250cm9sID0gX3JlZi5tdWlGb3JtQ29udHJvbDtcbiAgcmV0dXJuIHN0YXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3RhdGUpIHtcbiAgICBhY2Nbc3RhdGVdID0gcHJvcHNbc3RhdGVdO1xuXG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3N0YXRlXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWNjW3N0YXRlXSA9IG11aUZvcm1Db250cm9sW3N0YXRlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgRm9ybUNvbnRyb2xDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnZGVib3VuY2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzID4gM2tiLlxuXG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcblxuZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVtwcm9wZXJ0eV0sIDEwKSB8fCAwO1xufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzaGFkb3cgdGV4dGFyZWEgZWxlbWVudC4gKi9cbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogJzAnXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVG8gbWFrZSBwdWJsaWMgaW4gdjQrLlxuICovXG5cbnZhciBUZXh0YXJlYSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dGFyZWEocHJvcHMsIHJlZikge1xuICB2YXIgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJvbkNoYW5nZVwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIHN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmKTtcbiAgdmFyIHN5bmNIZWlnaHQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICB2YXIgaW5wdXRTaGFsbG93ID0gc2hhZG93UmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCk7XG4gICAgaW5wdXRTaGFsbG93LnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSBpbnB1dC52YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlciB8fCAneCc7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIGNvbnRlbnRcblxuICAgIHZhciBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQ7XG4gICAgdmFyIGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGVbJ2JveC1zaXppbmcnXTsgLy8gTWVhc3VyZSBoZWlnaHQgb2YgYSB0ZXh0YXJlYSB3aXRoIGEgc2luZ2xlIHJvd1xuXG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gJ3gnO1xuICAgIHZhciBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0OyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG5cbiAgICB2YXIgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblxuICAgIGlmIChyb3dzICE9IG51bGwpIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgoTnVtYmVyKHJvd3MpICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKHJvd3NNYXggIT0gbnVsbCkge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIocm93c01heCkgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KG91dGVySGVpZ2h0LCBzaW5nbGVSb3dIZWlnaHQpO1xuXG4gICAgaWYgKGJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgICAgb3V0ZXJIZWlnaHQgLT0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy1ib3R0b20nKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctdG9wJyk7XG4gICAgfSBlbHNlIGlmIChib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgb3V0ZXJIZWlnaHQgKz0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLWJvdHRvbS13aWR0aCcpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLXRvcC13aWR0aCcpO1xuICAgIH1cblxuICAgIHNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW50IHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cbiAgICAgIGlmIChpbm5lckhlaWdodCA+IDAgJiYgTWF0aC5hYnMoKHByZXZTdGF0ZS5pbm5lckhlaWdodCB8fCAwKSAtIGlubmVySGVpZ2h0KSA+IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpbm5lckhlaWdodDogaW5uZXJIZWlnaHQsXG4gICAgICAgICAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgfSk7XG4gIH0sIFtzZXRTdGF0ZSwgcm93cywgcm93c01heCwgcHJvcHMucGxhY2Vob2xkZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgc3luY0hlaWdodCgpO1xuICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtzeW5jSGVpZ2h0XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzeW5jSGVpZ2h0KCk7XG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc3luY0hlaWdodCgpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIF9leHRlbmRzKHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodCxcbiAgICAgIG92ZXJmbG93OiBzdGF0ZS5vdXRlckhlaWdodCA9PT0gc3RhdGUuaW5uZXJIZWlnaHQgPyAnaGlkZGVuJyA6IG51bGxcbiAgICB9LCBzdHlsZSlcbiAgfSwgb3RoZXIpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWUsXG4gICAgcmVhZE9ubHk6IHRydWUsXG4gICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgdGFiSW5kZXg6IC0xLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnNoYWRvdywgc3R5bGUpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGV4dGFyZWEucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIHVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYTsiLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufSAvLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsbGVkKG9iaikge1xuICB2YXIgU1NSID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59IC8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG9ybmVkU3RhcnQob2JqKSB7XG4gIHJldHVybiBvYmouc3RhcnRBZG9ybm1lbnQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2NsaWNrLWV2ZW50cy1oYXZlLWtleS1ldmVudHMsIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9ucyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCBUZXh0YXJlYSBmcm9tICcuL1RleHRhcmVhJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBwbGFjZWhvbGRlciA9IHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSlcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICAvLyBNaW1pY3MgdGhlIGRlZmF1bHQgaW5wdXQgZGlzcGxheSBwcm9wZXJ0eSB1c2VkIGJ5IGJyb3dzZXJzIGZvciBhbiBpbnB1dC5cbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgICAgbGluZUhlaWdodDogJzEuMTg3NWVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAvLyBQcmV2ZW50IHBhZGRpbmcgaXNzdWUgd2l0aCBmdWxsV2lkdGguXG4gICAgICBjdXJzb3I6ICd0ZXh0JyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkRW5kOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCg4IC0gMiwgXCJweCAwIFwiKS5jb25jYXQoOCAtIDEsIFwicHhcIiksXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogNCAtIDFcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGhlaWdodDogJzEuMTg3NWVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgLy8gUmVzZXQgZm9yIFNhZmFyaVxuICAgICAgLy8gUmVtb3ZlIGdyZXkgaGlnaGxpZ2h0XG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRml4IElFIDExIHdpZHRoIGlzc3VlXG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIElFIDExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfSxcbiAgICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICAgJyY6aW52YWxpZCc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgICAgJ2xhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArICRmb3JtQ29udHJvbCAmJzoge1xuICAgICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBFZGdlXG4gICAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAxIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogNCAtIDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7XG4gICAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnLFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge31cbiAgfTtcbn07XG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuXG52YXIgSW5wdXRCYXNlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEJhc2UocHJvcHMsIHJlZikge1xuICB2YXIgYXJpYURlc2NyaWJlZGJ5ID0gcHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcbiAgICAgIGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlbmRBZG9ybm1lbnQgPSBwcm9wcy5lbmRBZG9ybm1lbnQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzO1xuICBfcHJvcHMkaW5wdXRQcm9wcyA9IF9wcm9wcyRpbnB1dFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRpbnB1dFByb3BzO1xuXG4gIHZhciBpbnB1dFByb3BzQ2xhc3NOYW1lID0gX3Byb3BzJGlucHV0UHJvcHMuY2xhc3NOYW1lLFxuICAgICAgaW5wdXRQcm9wc1Byb3AgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzJGlucHV0UHJvcHMsIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICBpbnB1dFJlZlByb3AgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRW1wdHkgPSBwcm9wcy5vbkVtcHR5LFxuICAgICAgb25GaWxsZWQgPSBwcm9wcy5vbkZpbGxlZCxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlbmRlclByZWZpeCA9IHByb3BzLnJlbmRlclByZWZpeCxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICBzdGFydEFkb3JubWVudCA9IHByb3BzLnN0YXJ0QWRvcm5tZW50LFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkVtcHR5XCIsIFwib25GaWxsZWRcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJQcmVmaXhcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWluc3RhbmNlIHx8IGluc3RhbmNlIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCB8fCBpbnN0YW5jZS5mb2N1cywgWydNYXRlcmlhbC1VSTogeW91IGhhdmUgcHJvdmlkZWQgYSBgaW5wdXRDb21wb25lbnRgIHRvIHRoZSBpbnB1dCBjb21wb25lbnQnLCAndGhhdCBkb2VzIG5vdCBjb3JyZWN0bHkgaGFuZGxlIHRoZSBgaW5wdXRSZWZgIHByb3BlcnR5LicsICdNYWtlIHN1cmUgdGhlIGBpbnB1dFJlZmAgcHJvcGVydHkgaXMgY2FsbGVkIHdpdGggYSBIVE1MSW5wdXRFbGVtZW50LiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UHJvcHNQcm9wLnJlZiwgaGFuZGxlSW5wdXRSZWZXYXJuaW5nKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRSZWZQcm9wLCBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydkaXNhYmxlZCcsICdlcnJvcicsICdtYXJnaW4nLCAncmVxdWlyZWQnLCAnZmlsbGVkJ11cbiAgfSk7XG4gIGZjcy5mb2N1c2VkID0gbXVpRm9ybUNvbnRyb2wgPyBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIDogZm9jdXNlZDsgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghbXVpRm9ybUNvbnRyb2wgJiYgZGlzYWJsZWQgJiYgZm9jdXNlZCkge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG5cbiAgICAgIGlmIChvbkJsdXIpIHtcbiAgICAgICAgb25CbHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIGRpc2FibGVkLCBmb2N1c2VkLCBvbkJsdXJdKTtcbiAgdmFyIGNoZWNrRGlydHkgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZCkge1xuICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob25GaWxsZWQpIHtcbiAgICAgICAgb25GaWxsZWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5KSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkVtcHR5KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uRW1wdHkpIHtcbiAgICAgIG9uRW1wdHkoKTtcbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgb25FbXB0eSwgb25GaWxsZWRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFt2YWx1ZSwgY2hlY2tEaXJ0eSwgaXNDb250cm9sbGVkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7XG4gICAgfVxuICB9LCBbY2hlY2tEaXJ0eSwgaXNDb250cm9sbGVkXSk7XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICAvLyBGaXggYSBidWcgd2l0aCBJRSAxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBpbnB1dCBpcyBkaXNhYmxlZC5cbiAgICBpZiAoZmNzLmRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogKGV2ZW50LnRhcmdldCB8fCBpbnB1dFJlZi5jdXJyZW50KS52YWx1ZVxuICAgICAgfSk7XG4gICAgfSAvLyBQZXJmb3JtIGluIHRoZSB3aWxsVXBkYXRlXG5cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgb25DaGFuZ2UuYXBwbHkodm9pZCAwLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcblxuICB2YXIgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHt9LCBpbnB1dFByb3BzUHJvcCwge1xuICAgIHJlZjogaGFuZGxlSW5wdXRSZWZcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBJbnB1dENvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgLy8gUmVuYW1lIHJlZiB0byBpbnB1dFJlZiBhcyB3ZSBkb24ndCBrbm93IHRoZVxuICAgICAgLy8gcHJvdmlkZWQgYGlucHV0Q29tcG9uZW50YCBzdHJ1Y3R1cmUuXG4gICAgICBpbnB1dFJlZjogaGFuZGxlSW5wdXRSZWYsXG4gICAgICB0eXBlOiB0eXBlXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgcmVmOiBudWxsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobXVsdGlsaW5lKSB7XG4gICAgaWYgKHJvd3MgJiYgIXJvd3NNYXgpIHtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gJ3RleHRhcmVhJztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgcm93c01heDogcm93c01heFxuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgICBJbnB1dENvbXBvbmVudCA9IFRleHRhcmVhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgdHlwZTogdHlwZVxuICAgIH0sIGlucHV0UHJvcHMpO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZXJyb3IgJiYgY2xhc3Nlcy5lcnJvciwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIG11aUZvcm1Db250cm9sICYmIGNsYXNzZXMuZm9ybUNvbnRyb2wsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgbXVsdGlsaW5lICYmIGNsYXNzZXMubXVsdGlsaW5lLCBzdGFydEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuYWRvcm5lZEVuZCksXG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCByZW5kZXJQcmVmaXggPyByZW5kZXJQcmVmaXgoX2V4dGVuZHMoe30sIGZjcywge1xuICAgIHN0YXJ0QWRvcm5tZW50OiBzdGFydEFkb3JubWVudFxuICB9KSkgOiBudWxsLCBzdGFydEFkb3JubWVudCwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWludmFsaWRcIjogZmNzLmVycm9yLFxuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaW5wdXQsIGlucHV0UHJvcHNDbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCB0eXBlID09PSAnc2VhcmNoJyAmJiBjbGFzc2VzLmlucHV0VHlwZVNlYXJjaCwgbXVsdGlsaW5lICYmIGNsYXNzZXMuaW5wdXRNdWx0aWxpbmUsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5pbnB1dE1hcmdpbkRlbnNlLCBzdGFydEFkb3JubWVudCAmJiBjbGFzc2VzLmlucHV0QWRvcm5lZFN0YXJ0LCBlbmRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRFbmQpLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgaWQ6IGlkLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgb25LZXlVcDogb25LZXlVcCxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWQsXG4gICAgcm93czogcm93cyxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSwgaW5wdXRQcm9wcykpKSwgZW5kQWRvcm5tZW50KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRCYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbXB0eTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRmlsbGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyUHJlZml4OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoSW5wdXRCYXNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgICdsYWJlbCArICYnOiB7XG4gICAgICAgIG1hcmdpblRvcDogMTZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5W2xpZ2h0ID8gJ2RhcmsnIDogJ2xpZ2h0J10pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7fVxuICB9O1xufTtcbnZhciBJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgZGlzYWJsZVVuZGVybGluZSA9IHByb3BzLmRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZGlzYWJsZVVuZGVybGluZVwiLCBcImNsYXNzZXNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcIm11bHRpbGluZVwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVVbmRlcmxpbmUgJiYgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIG5hdGl2ZSBpbnB1dC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5JbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dCdcbn0pKElucHV0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDkpJztcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJyxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wOSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVVuZGVybGluZT17ZmFsc2V9YC4gKi9cbiAgICB1bmRlcmxpbmU6IHtcbiAgICAgICcmOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnlbbGlnaHQgPyAnZGFyaycgOiAnbGlnaHQnXSksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZDphZnRlcic6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJGVycm9yOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknIC8vIGVycm9yIGlzIGFsd2F5cyB1bmRlcmxpbmVkIGluIHJlZFxuXG4gICAgICB9LFxuICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcXFxcMDBhMFwiJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JvcmRlci1ib3R0b20tY29sb3InLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJjpob3ZlcjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tU3R5bGU6ICdkb3R0ZWQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDEyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAnMjdweCAxMnB4IDEwcHgnLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDIzLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiA2XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBhZGRpbmc6ICcyN3B4IDEycHggMTBweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogMjMsXG4gICAgICBwYWRkaW5nQm90dG9tOiA2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgRmlsbGVkSW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZpbGxlZElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGRpc2FibGVVbmRlcmxpbmUgPSBwcm9wcy5kaXNhYmxlVW5kZXJsaW5lLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjbGFzc2VzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJ0eXBlXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgY2xhc3Nlcywge1xuICAgICAgcm9vdDogY2xzeChjbGFzc2VzLnJvb3QsICFkaXNhYmxlVW5kZXJsaW5lICYmIGNsYXNzZXMudW5kZXJsaW5lKSxcbiAgICAgIHVuZGVybGluZTogbnVsbFxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZpbGxlZElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSB3cmFwcGVyIGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBuYXRpdmUgaW5wdXQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuRmlsbGVkSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnXG59KShGaWxsZWRJbnB1dCk7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBhbGlnbiA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogLTUsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgIC8vIE1hdGNoIHRoZSBJbnB1dCBMYWJlbFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFtcInBhZGRpbmctXCIuY29uY2F0KGFsaWduKSwgJ2JvcmRlci1jb2xvcicsICdib3JkZXItd2lkdGgnXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50LiAqL1xuICAgIGxlZ2VuZDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTm90Y2hlZE91dGxpbmUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5vdGNoZWRPdXRsaW5lKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGxhYmVsV2lkdGhQcm9wID0gcHJvcHMubGFiZWxXaWR0aCxcbiAgICAgIG5vdGNoZWQgPSBwcm9wcy5ub3RjaGVkLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibGFiZWxXaWR0aFwiLCBcIm5vdGNoZWRcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcblxuICB2YXIgYWxpZ24gPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgdmFyIGxhYmVsV2lkdGggPSBsYWJlbFdpZHRoUHJvcCA+IDAgPyBsYWJlbFdpZHRoUHJvcCAqIDAuNzUgKyA4IDogMDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyhfZGVmaW5lUHJvcGVydHkoe30sIFwicGFkZGluZ1wiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSksIDggKyAobm90Y2hlZCA/IDAgOiBsYWJlbFdpZHRoIC8gMikpLCBzdHlsZSksXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsZWdlbmRcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sZWdlbmQsXG4gICAgc3R5bGU6IHtcbiAgICAgIC8vIElFIDExOiBmaWVsZHNldCB3aXRoIGxlZ2VuZCBkb2VzIG5vdCByZW5kZXJcbiAgICAgIC8vIGEgYm9yZGVyIHJhZGl1cy4gVGhpcyBtYWludGFpbnMgY29uc2lzdGVuY3lcbiAgICAgIC8vIGJ5IGFsd2F5cyBoYXZpbmcgYSBsZWdlbmQgcmVuZGVyZWRcbiAgICAgIHdpZHRoOiBub3RjaGVkID8gbGFiZWxXaWR0aCA6IDAuMDFcbiAgICB9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vdGNoZWRPdXRsaW5lLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWxXaWR0aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVOb3RjaGVkT3V0bGluZScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoTm90Y2hlZE91dGxpbmUpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IE5vdGNoZWRPdXRsaW5lIGZyb20gJy4vTm90Y2hlZE91dGxpbmUnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGJvcmRlckNvbG9yID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAnJiAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvclxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICBib3JkZXJXaWR0aDogMlxuICAgICAgfSxcbiAgICAgICcmJGVycm9yICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAnMTguNXB4IDE0cHgnLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBOb3RjaGVkT3V0bGluZWAgZWxlbWVudC4gKi9cbiAgICBub3RjaGVkT3V0bGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBwYWRkaW5nOiAnMTguNXB4IDE0cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxMC41XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgT3V0bGluZWRJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gT3V0bGluZWRJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJGxhYmVsV2lkdGggPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbGFiZWxXaWR0aCA9IF9wcm9wcyRsYWJlbFdpZHRoID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGxhYmVsV2lkdGgsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgbm90Y2hlZCA9IHByb3BzLm5vdGNoZWQsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImxhYmVsV2lkdGhcIiwgXCJtdWx0aWxpbmVcIiwgXCJub3RjaGVkXCIsIFwidHlwZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgcmVuZGVyUHJlZml4OiBmdW5jdGlvbiByZW5kZXJQcmVmaXgoc3RhdGUpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE5vdGNoZWRPdXRsaW5lLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5ub3RjaGVkT3V0bGluZSxcbiAgICAgICAgbGFiZWxXaWR0aDogbGFiZWxXaWR0aCxcbiAgICAgICAgbm90Y2hlZDogdHlwZW9mIG5vdGNoZWQgIT09ICd1bmRlZmluZWQnID8gbm90Y2hlZCA6IEJvb2xlYW4oc3RhdGUuc3RhcnRBZG9ybm1lbnQgfHwgc3RhdGUuZmlsbGVkIHx8IHN0YXRlLmZvY3VzZWQpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgbm90Y2hlZE91dGxpbmU6IG51bGxcbiAgICB9KSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBPdXRsaW5lZElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSB3cmFwcGVyIGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBuYXRpdmUgaW5wdXQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuT3V0bGluZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0J1xufSkoT3V0bGluZWRJbnB1dCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoRm9ybUNvbnRyb2xDb250ZXh0KENvbXBvbmVudCkge1xuICB2YXIgRW5oYW5jZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2xDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIG11aUZvcm1Db250cm9sOiBjb250ZXh0LFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSwgcHJvcHMpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBFbmhhbmNlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiV2l0aEZvcm1Db250cm9sQ29udGV4dChcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIpXCIpO1xuICB9XG5cbiAgaG9pc3ROb25SZWFjdFN0YXRpY3MoRW5oYW5jZWRDb21wb25lbnQsIENvbXBvbmVudCk7XG4gIHJldHVybiBFbmhhbmNlZENvbXBvbmVudDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHdpdGhGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvd2l0aEZvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnlbdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ2RhcmsnIDogJ2xpZ2h0J11cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmlsbGVkPXt0cnVlfWAuICovXG4gICAgZmlsbGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHJlcXVpcmVkPXt0cnVlfWAuICovXG4gICAgcmVxdWlyZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFzdGVyaXNrIGVsZW1lbnQuICovXG4gICAgYXN0ZXJpc2s6IHtcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBGb3JtTGFiZWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1MYWJlbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdsYWJlbCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIG11aUZvcm1Db250cm9sID0gcHJvcHMubXVpRm9ybUNvbnRyb2wsXG4gICAgICByZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwibXVpRm9ybUNvbnRyb2xcIiwgXCJyZXF1aXJlZFwiXSk7XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3JlcXVpcmVkJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZmlsbGVkJ11cbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZXJyb3IgJiYgY2xhc3Nlcy5lcnJvciwgZmNzLmZpbGxlZCAmJiBjbGFzc2VzLmZpbGxlZCwgZmNzLmZvY3VzZWQgJiYgY2xhc3Nlcy5mb2N1c2VkLCBmY3MucmVxdWlyZWQgJiYgY2xhc3Nlcy5yZXF1aXJlZCksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiwgZmNzLnJlcXVpcmVkICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hc3RlcmlzaywgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IpXG4gIH0sIFwiXFx1MjAwOVwiLCAnKicpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUxhYmVsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQgKHVzZWQgYnkgYEZvcm1Hcm91cGAgY29tcG9uZW50cykuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJ1xufSkod2l0aEZvcm1Db250cm9sQ29udGV4dChGb3JtTGFiZWwpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHdpdGhGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvd2l0aEZvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRm9ybUxhYmVsIGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgYXN0ZXJpc2sgZWxlbWVudC4gKi9cbiAgICBhc3Rlcmlzazoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIC8vIHNsaWdodCBhbHRlcmF0aW9uIHRvIHNwZWMgc3BhY2luZyB0byBtYXRjaCB2aXN1YWwgc3BlYyByZXN1bHRcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyNHB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dERlbnNlYCBzdHlsZS5cbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMXB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc2hyaW5rPXt0cnVlfWAuICovXG4gICAgc2hyaW5rOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBkaXNhYmxlQW5pbWF0aW9uPXtmYWxzZX1gLiAqL1xuICAgIGFuaW1hdGVkOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgIC8vIENocm9tZSdzIGF1dG9maWxsIGZlYXR1cmUgZ2l2ZXMgdGhlIGlucHV0IGZpZWxkIGEgeWVsbG93IGJhY2tncm91bmQuXG4gICAgICAvLyBTaW5jZSB0aGUgaW5wdXQgZmllbGQgaXMgYmVoaW5kIHRoZSBsYWJlbCBpbiB0aGUgSFRNTCB0cmVlLFxuICAgICAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgICAgLy8gekluZGV4OiAxIHdpbGwgcmFpc2UgdGhlIGxhYmVsIGFib3ZlIG9wYXF1ZSBiYWNrZ3JvdW5kLWNvbG9ycyBvZiBpbnB1dC5cbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAyMHB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE3cHgpIHNjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJHNocmluayc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDEwcHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDdweCkgc2NhbGUoMC43NSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMjBweCkgc2NhbGUoMSknLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAxMnB4KSBzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRzaHJpbmsnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtNnB4KSBzY2FsZSgwLjc1KSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIElucHV0TGFiZWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0TGFiZWwocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZUFuaW1hdGkgPSBwcm9wcy5kaXNhYmxlQW5pbWF0aW9uLFxuICAgICAgZGlzYWJsZUFuaW1hdGlvbiA9IF9wcm9wcyRkaXNhYmxlQW5pbWF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUFuaW1hdGksXG4gICAgICBtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBtdWlGb3JtQ29udHJvbCA9IHByb3BzLm11aUZvcm1Db250cm9sLFxuICAgICAgc2hyaW5rUHJvcCA9IHByb3BzLnNocmluayxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwibWFyZ2luXCIsIFwibXVpRm9ybUNvbnRyb2xcIiwgXCJzaHJpbmtcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgc2hyaW5rID0gc2hyaW5rUHJvcDtcblxuICBpZiAodHlwZW9mIHNocmluayA9PT0gJ3VuZGVmaW5lZCcgJiYgbXVpRm9ybUNvbnRyb2wpIHtcbiAgICBzaHJpbmsgPSBtdWlGb3JtQ29udHJvbC5maWxsZWQgfHwgbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCB8fCBtdWlGb3JtQ29udHJvbC5hZG9ybmVkU3RhcnQ7XG4gIH1cblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnbWFyZ2luJywgJ3ZhcmlhbnQnXVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUxhYmVsLCBfZXh0ZW5kcyh7XG4gICAgXCJkYXRhLXNocmlua1wiOiBzaHJpbmssXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBtdWlGb3JtQ29udHJvbCAmJiBjbGFzc2VzLmZvcm1Db250cm9sLCAhZGlzYWJsZUFuaW1hdGlvbiAmJiBjbGFzc2VzLmFuaW1hdGVkLCBzaHJpbmsgJiYgY2xhc3Nlcy5zaHJpbmssIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIGNsYXNzZXMuZmlsbGVkLCBmY3MudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBjbGFzc2VzLm91dGxpbmVkKSxcbiAgICBjbGFzc2VzOiB7XG4gICAgICBmb2N1c2VkOiBjbGFzc2VzLmZvY3VzZWQsXG4gICAgICBkaXNhYmxlZDogY2xhc3Nlcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yOiBjbGFzc2VzLmVycm9yLFxuICAgICAgcmVxdWlyZWQ6IGNsYXNzZXMucmVxdWlyZWQsXG4gICAgICBhc3RlcmlzazogY2xhc3Nlcy5hc3Rlcmlza1xuICAgIH0sXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRMYWJlbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIGBJbnB1dExhYmVsYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlQW5pbWF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhcHBseSBkaXNhYmxlZCBjbGFzcy5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IG9mIHRoaXMgbGFiZWwgaXMgZm9jdXNlZC5cbiAgICovXG4gIGZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogaWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0TGFiZWwnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KElucHV0TGFiZWwpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBpc0ZpbGxlZCwgaXNBZG9ybmVkU3RhcnQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgaXNNdWlFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIFJlc2V0IGZpZWxkc2V0IGRlZmF1bHQgc3R5bGUuXG4gICAgbWluV2lkdGg6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnIC8vIEZpeCBhbGlnbm1lbnQgaXNzdWUgb24gU2FmYXJpLlxuXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwibm9ybWFsXCJgLiAqL1xuICBtYXJnaW5Ob3JtYWw6IHtcbiAgICBtYXJnaW5Ub3A6IDE2LFxuICAgIG1hcmdpbkJvdHRvbTogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICBtYXJnaW5EZW5zZToge1xuICAgIG1hcmdpblRvcDogOCxcbiAgICBtYXJnaW5Cb3R0b206IDRcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgZnVsbFdpZHRoOiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9XG59O1xuLyoqXG4gKiBQcm92aWRlcyBjb250ZXh0IHN1Y2ggYXMgZmlsbGVkL2ZvY3VzZWQvZXJyb3IvcmVxdWlyZWQgZm9yIGZvcm0gaW5wdXRzLlxuICogUmVseWluZyBvbiB0aGUgY29udGV4dCBwcm92aWRlcyBoaWdoIGZsZXhpYmlsaXR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2lzdGVudCBhY3Jvc3MgdGhlIGNoaWxkcmVuIG9mIHRoZSBgRm9ybUNvbnRyb2xgLlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqICAtIEZvcm1MYWJlbFxuICogIC0gRm9ybUhlbHBlclRleHRcbiAqICAtIElucHV0XG4gKiAgLSBJbnB1dExhYmVsXG4gKlxuICogWW91IGNhbiBmaW5kIG9uZSBjb21wb3NpdGlvbiBleGFtcGxlIGJlbG93IGFuZCBtb3JlIGdvaW5nIHRvIFt0aGUgZGVtb3NdKC9jb21wb25lbnRzL3RleHQtZmllbGRzLyNjb21wb25lbnRzKS5cbiAqXG4gKiBgYGBqc3hcbiAqIDxGb3JtQ29udHJvbD5cbiAqICAgPElucHV0TGFiZWwgaHRtbEZvcj1cIm15LWlucHV0XCI+RW1haWwgYWRkcmVzczwvSW5wdXRMYWJlbD5cbiAqICAgPElucHV0IGlkPVwibXktaW5wdXRcIiBhcmlhLWRlc2NyaWJlZGJ5PVwibXktaGVscGVyLXRleHRcIiAvPlxuICogICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJteS1oZWxwZXItdGV4dFwiPldlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwuPC9Gb3JtSGVscGVyVGV4dD5cbiAqIDwvRm9ybUNvbnRyb2w+XG4gKiBgYGBcbiAqXG4gKiDimqDvuI9Pbmx5IG9uZSBpbnB1dCBjYW4gYmUgdXNlZCB3aXRoaW4gYSBGb3JtQ29udHJvbC5cbiAqL1xuXG52YXIgRm9ybUNvbnRyb2wgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Db250cm9sKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcHJvcHMkZXJyb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVycm9yLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBtYXJnaW4gPSBfcHJvcHMkbWFyZ2luID09PSB2b2lkIDAgPyAnbm9uZScgOiBfcHJvcHMkbWFyZ2luLFxuICAgICAgX3Byb3BzJHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICByZXF1aXJlZCA9IF9wcm9wcyRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVxdWlyZWQsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICB2YXIgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAxKSxcbiAgICAgIGFkb3JuZWRTdGFydCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIHZhciBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIGZpbGxlZCA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRGaWxsZWQgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTUsIDIpLFxuICAgICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTZbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlNlsxXTtcblxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNlZCkge1xuICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICB9XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoKSB7XG4gICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZURpcnR5ID0gZnVuY3Rpb24gaGFuZGxlRGlydHkoKSB7XG4gICAgaWYgKCFmaWxsZWQpIHtcbiAgICAgIHNldEZpbGxlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsZWFuID0gZnVuY3Rpb24gaGFuZGxlQ2xlYW4oKSB7XG4gICAgaWYgKGZpbGxlZCkge1xuICAgICAgc2V0RmlsbGVkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNoaWxkQ29udGV4dCA9IHtcbiAgICBhZG9ybmVkU3RhcnQ6IGFkb3JuZWRTdGFydCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZpbGxlZDogZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uRW1wdHk6IGhhbmRsZUNsZWFuLFxuICAgIG9uRmlsbGVkOiBoYW5kbGVEaXJ0eSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgdmFyaWFudDogdmFyaWFudFxuICB9O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBtYXJnaW4gIT09ICdub25lJyAmJiBjbGFzc2VzW1wibWFyZ2luXCIuY29uY2F0KGNhcGl0YWxpemUobWFyZ2luKSldLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBmb3JtIGNvbnRyb2wuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsLCBpbnB1dCBhbmQgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ2RlbnNlJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sJ1xufSkoRm9ybUNvbnRyb2wpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgd2l0aEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC93aXRoRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbiwge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICBsaW5lSGVpZ2h0OiAnMWVtJyxcbiAgICAgIG1pbkhlaWdodDogJzFlbScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIG1hcmdpblRvcDogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgIG9yIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBtYXJnaW46ICc4cHggMTJweCAwJ1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmaWxsZWQ9e3RydWV9YC4gKi9cbiAgICBmaWxsZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge31cbiAgfTtcbn07XG52YXIgRm9ybUhlbHBlclRleHQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1IZWxwZXJUZXh0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAncCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIG11aUZvcm1Db250cm9sID0gcHJvcHMubXVpRm9ybUNvbnRyb2wsXG4gICAgICByZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwibWFyZ2luXCIsIFwibXVpRm9ybUNvbnRyb2xcIiwgXCJyZXF1aXJlZFwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWyd2YXJpYW50JywgJ21hcmdpbicsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnLCAnZm9jdXNlZCcsICdyZXF1aXJlZCddXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCAoZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnIHx8IGZjcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSAmJiBjbGFzc2VzLmNvbnRhaW5lZCwgY2xhc3NOYW1lUHJvcCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1IZWxwZXJUZXh0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgZm9jdXNlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtdWlGb3JtQ29udHJvbDogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSByZXF1aXJlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xufSkod2l0aEZvcm1Db250cm9sQ29udGV4dChGb3JtSGVscGVyVGV4dCkpOyIsImZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG93bmVyRG9jdW1lbnQ7IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcblxuZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZmFsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHdpbmRvdztcbiAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFZpZXcgfHwgZmFsbGJhY2s7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG93bmVyV2luZG93OyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIGNvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjsgLy8gI1N0cmljdE1vZGUgcmVhZHlcblxuICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoY29udGFpbmVyKTtcbn1cblxudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG4vKipcbiAqIFBvcnRhbHMgcHJvdmlkZSBhIGZpcnN0LWNsYXNzIHdheSB0byByZW5kZXIgY2hpbGRyZW4gaW50byBhIERPTSBub2RlXG4gKiB0aGF0IGV4aXN0cyBvdXRzaWRlIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICovXG5cbnZhciBQb3J0YWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBvblJlbmRlcmVkID0gcHJvcHMub25SZW5kZXJlZDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUobnVsbCksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIG1vdW50Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNb3VudE5vZGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBjaGlsZFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBjaGlsZFJlZik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldE1vdW50Tm9kZShnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBkb2N1bWVudC5ib2R5KTtcbiAgICB9XG4gIH0sIFtjb250YWluZXIsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvblJlbmRlcmVkICYmIG1vdW50Tm9kZSkge1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgIH1cbiAgfSwgW21vdW50Tm9kZSwgb25SZW5kZXJlZF0pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb3VudE5vZGUgfHwgY2hpbGRSZWYuY3VycmVudDtcbiAgfSwgW21vdW50Tm9kZV0pO1xuXG4gIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBtb3VudE5vZGUgPyBSZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIG1vdW50Tm9kZSkgOiBtb3VudE5vZGU7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcnRhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gdG8gcmVuZGVyIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIG9uY2UgdGhlIGNoaWxkcmVuIGhhcyBiZWVuIG1vdW50ZWQgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHZvaWQgMDtcblBvcnRhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVQb3J0YWw6IGZhbHNlXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhUaGVtZUNyZWF0b3IoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lO1xuXG4gIHZhciB3aXRoVGhlbWUgPSBmdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoVGhlbWUoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB2YXIgV2l0aFRoZW1lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoVGhlbWUocHJvcHMsIHJlZikge1xuICAgICAgdmFyIGlubmVyUmVmID0gcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImlubmVyUmVmXCJdKTtcblxuICAgICAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKSB8fCBkZWZhdWx0VGhlbWU7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZlxuICAgICAgfSwgb3RoZXIpKTtcbiAgICB9KTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBXaXRoVGhlbWUucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IHRoZSBgaW5uZXJSZWZgIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY1LiAnICsgJ1JlZnMgYXJlIG5vdyBhdXRvbWF0aWNhbGx5IGZvcndhcmRlZCB0byB0aGUgaW5uZXIgY29tcG9uZW50LicpO1xuICAgICAgfSlcbiAgICB9IDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9IFwiV2l0aFRoZW1lKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFRoZW1lLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoVGhlbWUuTmFrZWQgPSBDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhUaGVtZTtcbiAgfTtcblxuICByZXR1cm4gd2l0aFRoZW1lO1xufSAvLyBQcm92aWRlIHRoZSB0aGVtZSBvYmplY3QgYXMgYSBwcm9wZXJ0eSB0byB0aGUgaW5wdXQgY29tcG9uZW50LlxuLy8gSXQncyBhbiBhbHRlcm5hdGl2ZSBBUEkgdG8gdXNlVGhlbWUoKS5cbi8vIFdlIGVuY291cmFnZSB0aGUgdXNhZ2Ugb2YgdXNlVGhlbWUoKSB3aGVyZSBwb3NzaWJsZS5cblxudmFyIHdpdGhUaGVtZSA9IHdpdGhUaGVtZUNyZWF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZTsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvM2ZmZTNhNWQ4MmY2ZjU2MWI4MmZmNzhkODJiMzJhN2QxNGFlZDU1OC9qcy9zcmMvbW9kYWwuanMjTDUxMi1MNTE5XG5mdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKCkge1xuICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgcmV0dXJuIHNjcm9sbGJhclNpemU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbGJhclNpemU7IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQm9keShub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keSc7XG59IC8vIERvIHdlIGhhdmUgYSB2ZXJ0aWNhbCBzY3JvbGxiYXI/XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcik7XG4gIHZhciB3aW4gPSBvd25lcldpbmRvdyhkb2MpO1xuXG4gIGlmIChkb2MuYm9keSA9PT0gY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHdpbi5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn0iLCJ2YXIgQkxBQ0tMSVNUID0gWyd0ZW1wbGF0ZScsICdzY3JpcHQnLCAnc3R5bGUnXTtcblxuZnVuY3Rpb24gaXNIaWRlYWJsZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxICYmIEJMQUNLTElTVC5pbmRleE9mKG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnQsIGN1cnJlbnROb2RlLCBjYWxsYmFjaykge1xuICB2YXIgYmxhY2tsaXN0ID0gW21vdW50LCBjdXJyZW50Tm9kZV07XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKGJsYWNrbGlzdC5pbmRleE9mKG5vZGUpID09PSAtMSAmJiBpc0hpZGVhYmxlKG5vZGUpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGRlbihub2RlLCBzaG93KSB7XG4gIGlmIChzaG93KSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSwgY3VycmVudE5vZGUsIHNob3cpIHtcbiAgc2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGN1cnJlbnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpO1xuICB9KTtcbn0iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGlzT3ZlcmZsb3dpbmcgZnJvbSAnLi9pc092ZXJmbG93aW5nJztcbmltcG9ydCB7IGFyaWFIaWRkZW4sIGFyaWFIaWRkZW5TaWJsaW5ncyB9IGZyb20gJy4vbWFuYWdlQXJpYUhpZGRlbic7XG5cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGRhdGEsIGNhbGxiYWNrKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgZGF0YS5zb21lKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIGlmIChjYWxsYmFjayhpdGVtKSkge1xuICAgICAgaWR4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiBnZXRQYWRkaW5nUmlnaHQobm9kZSkge1xuICByZXR1cm4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSlbJ3BhZGRpbmctcmlnaHQnXSwgMTApIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHNldENvbnRhaW5lclN0eWxlKGRhdGEpIHtcbiAgLy8gV2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgYWN0dWFsIGBzdHlsZWAgaGVyZSBiZWNhdXNlIHdlIHdpbGwgb3ZlcnJpZGUgaXQuXG4gIGRhdGEuc3R5bGUgPSB7XG4gICAgb3ZlcmZsb3c6IGRhdGEuY29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgIHBhZGRpbmdSaWdodDogZGF0YS5jb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0XG4gIH07XG4gIHZhciBzdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfTtcblxuICBpZiAoZGF0YS5vdmVyZmxvd2luZykge1xuICAgIHZhciBzY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpOyAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG5cbiAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChnZXRQYWRkaW5nUmlnaHQoZGF0YS5jb250YWluZXIpICsgc2Nyb2xsYmFyU2l6ZSwgXCJweFwiKTsgLy8gLm11aS1maXhlZCBpcyBhIGdsb2JhbCBoZWxwZXIuXG5cbiAgICB2YXIgZml4ZWROb2RlcyA9IG93bmVyRG9jdW1lbnQoZGF0YS5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdWktZml4ZWQnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZml4ZWROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHBhZGRpbmdSaWdodCA9IGdldFBhZGRpbmdSaWdodChmaXhlZE5vZGVzW2ldKTtcbiAgICAgIGRhdGEucHJldlBhZGRpbmdzLnB1c2gocGFkZGluZ1JpZ2h0KTtcbiAgICAgIGZpeGVkTm9kZXNbaV0uc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQocGFkZGluZ1JpZ2h0ICsgc2Nyb2xsYmFyU2l6ZSwgXCJweFwiKTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGF0YS5jb250YWluZXIuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShkYXRhKSB7XG4gIC8vIFRoZSBtb2RhbCBtaWdodCBiZSBjbG9zZWQgYmVmb3JlIGl0IGhhZCB0aGUgY2hhbmNlIHRvIGJlIG1vdW50ZWQgaW4gdGhlIERPTS5cbiAgaWYgKGRhdGEuc3R5bGUpIHtcbiAgICBPYmplY3Qua2V5cyhkYXRhLnN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRhdGEuY29udGFpbmVyLnN0eWxlW2tleV0gPSBkYXRhLnN0eWxlW2tleV07XG4gICAgfSk7XG4gIH1cblxuICB2YXIgZml4ZWROb2RlcyA9IG93bmVyRG9jdW1lbnQoZGF0YS5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdWktZml4ZWQnKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpeGVkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmaXhlZE5vZGVzW2ldLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGRhdGEucHJldlBhZGRpbmdzW2ldLCBcInB4XCIpO1xuICB9XG59XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnZW1lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqIFNpbXBsaWZpZWQsIGJ1dCBpbnNwaXJlZCBieSByZWFjdC1vdmVybGF5J3MgTW9kYWxNYW5hZ2VyIGNsYXNzLlxuICogVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cblxuXG52YXIgTW9kYWxNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTW9kYWxNYW5hZ2VyKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbE1hbmFnZXIpO1xuXG4gICAgdmFyIF9vcHRpb25zJGhpZGVTaWJsaW5nTiA9IG9wdGlvbnMuaGlkZVNpYmxpbmdOb2RlcyxcbiAgICAgICAgaGlkZVNpYmxpbmdOb2RlcyA9IF9vcHRpb25zJGhpZGVTaWJsaW5nTiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGhpZGVTaWJsaW5nTixcbiAgICAgICAgX29wdGlvbnMkaGFuZGxlQ29udGFpID0gb3B0aW9ucy5oYW5kbGVDb250YWluZXJPdmVyZmxvdyxcbiAgICAgICAgaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBfb3B0aW9ucyRoYW5kbGVDb250YWkgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRoYW5kbGVDb250YWk7XG4gICAgdGhpcy5oaWRlU2libGluZ05vZGVzID0gaGlkZVNpYmxpbmdOb2RlcztcbiAgICB0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93ID0gaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3c7IC8vIHRoaXMubW9kYWxzW21vZGFsSWR4XSA9IG1vZGFsXG5cbiAgICB0aGlzLm1vZGFscyA9IFtdOyAvLyB0aGlzLmRhdGFbY29udGFpbmVySWR4XSA9IHtcbiAgICAvLyAgIG1vZGFsczogW10sXG4gICAgLy8gICBjb250YWluZXIsXG4gICAgLy8gICBvdmVyZmxvd2luZyxcbiAgICAvLyAgIHByZXZQYWRkaW5ncyxcbiAgICAvLyB9XG5cbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RhbE1hbmFnZXIsIFt7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobW9kYWwsIGNvbnRhaW5lcikge1xuICAgICAgdmFyIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICAgIGlmIChtb2RhbElkeCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgICAgfVxuXG4gICAgICBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmxlbmd0aDtcbiAgICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpOyAvLyBJZiB0aGUgbW9kYWwgd2UgYXJlIGFkZGluZyBpcyBhbHJlYWR5IGluIHRoZSBET00uXG5cbiAgICAgIGlmIChtb2RhbC5tb2RhbFJlZikge1xuICAgICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW9kYWwubW91bnROb2RlLCBtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJZHggPSBmaW5kSW5kZXhPZih0aGlzLmRhdGEsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb250YWluZXJJZHggIT09IC0xKSB7XG4gICAgICAgIHRoaXMuZGF0YVtjb250YWluZXJJZHhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgbW9kYWxzOiBbbW9kYWxdLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgb3ZlcmZsb3dpbmc6IGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSxcbiAgICAgICAgcHJldlBhZGRpbmdzOiBbXVxuICAgICAgfTtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKGRhdGEpO1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudChtb2RhbCkge1xuICAgICAgdmFyIGNvbnRhaW5lcklkeCA9IGZpbmRJbmRleE9mKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGFbY29udGFpbmVySWR4XTtcblxuICAgICAgaWYgKCFkYXRhLnN0eWxlICYmIHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgICAgc2V0Q29udGFpbmVyU3R5bGUoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUobW9kYWwpIHtcbiAgICAgIHZhciBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJZHggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lcklkeCA9IGZpbmRJbmRleE9mKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGFbY29udGFpbmVySWR4XTtcbiAgICAgIGRhdGEubW9kYWxzLnNwbGljZShkYXRhLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG4gICAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJZHgsIDEpOyAvLyBJZiB0aGF0IHdhcyB0aGUgbGFzdCBtb2RhbCBpbiBhIGNvbnRhaW5lciwgY2xlYW4gdXAgdGhlIGNvbnRhaW5lci5cblxuICAgICAgaWYgKGRhdGEubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdykge1xuICAgICAgICAgIHJlbW92ZUNvbnRhaW5lclN0eWxlKGRhdGEpO1xuICAgICAgICB9IC8vIEluIGNhc2UgdGhlIG1vZGFsIHdhc24ndCBpbiB0aGUgRE9NIHlldC5cblxuXG4gICAgICAgIGlmIChtb2RhbC5tb2RhbFJlZikge1xuICAgICAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhkYXRhLmNvbnRhaW5lciwgbW9kYWwubW91bnROb2RlLCBtb2RhbC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXRhLnNwbGljZShjb250YWluZXJJZHgsIDEpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICAgIHZhciBuZXh0VG9wID0gZGF0YS5tb2RhbHNbZGF0YS5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAgIC8vIHdoZW4gbW9kYWwgd2FzIHVubW91bnRlZCBiZWZvcmUgbW9kYWxSZWYgZ2V0cyBudWxsXG5cbiAgICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVG9wTW9kYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUb3BNb2RhbChtb2RhbCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5tb2RhbHMubGVuZ3RoICYmIHRoaXMubW9kYWxzW3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdID09PSBtb2RhbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWxNYW5hZ2VyO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbE1hbmFnZXI7IiwiLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4sIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLXRhYmluZGV4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuXG5mdW5jdGlvbiBUcmFwRm9jdXMocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1cyA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPSBwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVuZm9yY2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPSBwcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJlc3RvcmUsXG4gICAgICBnZXREb2MgPSBwcm9wcy5nZXREb2MsXG4gICAgICBpc0VuYWJsZWQgPSBwcm9wcy5pc0VuYWJsZWQsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbjtcbiAgdmFyIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHNlbnRpbmVsU3RhcnQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBzZW50aW5lbEVuZCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGxhc3RGb2N1cyA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBkcm9wIHN1cHBvcnQgZm9yIG5vbiByZWYgZm9yd2FyZGluZyBjbGFzcyBjb21wb25lbnRzXG5cbiAgdmFyIGhhbmRsZU93blJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcm9vdFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTsgLy8g4pqg77iPIFlvdSBtYXkgcmVseSBvbiBSZWFjdC51c2VNZW1vIGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLCBub3QgYXMgYSBzZW1hbnRpYyBndWFyYW50ZWUuXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VtZW1vXG5cbiAgUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGFzdEZvY3VzLmN1cnJlbnQgPSBnZXREb2MoKS5hY3RpdmVFbGVtZW50O1xuICB9LCBbb3Blbl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQocm9vdFJlZi5jdXJyZW50KTsgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuXG4gICAgaWYgKCFkaXNhYmxlQXV0b0ZvY3VzICYmIHJvb3RSZWYuY3VycmVudCAmJiAhcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgaWYgKCFyb290UmVmLmN1cnJlbnQuaGFzQXR0cmlidXRlKCd0YWJJbmRleCcpKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFsnTWF0ZXJpYWwtVUk6IHRoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLicsICdGb3IgdGhlIGJlbmVmaXQgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgJyArICd0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgLTEpO1xuICAgICAgfVxuXG4gICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICB2YXIgZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gZW5mb3JjZUZvY3VzKCkge1xuICAgICAgaWYgKGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCkge1xuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9vdFJlZi5jdXJyZW50ICYmICFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbG9vcEZvY3VzID0gZnVuY3Rpb24gbG9vcEZvY3VzKGV2ZW50KSB7XG4gICAgICAvLyA5ID0gVGFiXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgZXZlbnQua2V5Q29kZSAhPT0gOSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuXG5cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaWdub3JlIHRoZSBuZXh0IGVuZm9yY2VGb2N1cyBhc1xuICAgICAgICAvLyBpdCB3aWxsIHRyeSB0byBtb3ZlIHRoZSBmb2N1cyBiYWNrIHRvIHRoZSByb290UmVmIGVsZW1lbnQuXG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG5cbiAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgc2VudGluZWxFbmQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbnRpbmVsU3RhcnQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGVuZm9yY2VGb2N1cywgdHJ1ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBlbmZvcmNlRm9jdXMsIHRydWUpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpOyAvLyByZXN0b3JlTGFzdEZvY3VzKClcblxuICAgICAgaWYgKCFkaXNhYmxlUmVzdG9yZUZvY3VzKSB7XG4gICAgICAgIC8vIEluIElFIDExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIGxhc3RGb2N1cy5jdXJyZW50IGJlaW5nIG51bGwuXG4gICAgICAgIC8vIE5vdCBhbGwgZWxlbWVudHMgaW4gSUUgMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRSAxMSBzdXBwb3J0IGlzIGRyb3BwZWQgdGhlIGZvY3VzKCkgY2FsbCBjYW4gYmUgdW5jb25kaXRpb25hbC5cbiAgICAgICAgaWYgKGxhc3RGb2N1cy5jdXJyZW50ICYmIGxhc3RGb2N1cy5jdXJyZW50LmZvY3VzKSB7XG4gICAgICAgICAgbGFzdEZvY3VzLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RGb2N1cy5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgfSksIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsRW5kLFxuICAgIFwiZGF0YS10ZXN0XCI6IFwic2VudGluZWxFbmRcIlxuICB9KSk7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUcmFwRm9jdXMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZG9jdW1lbnQgdG8gY29uc2lkZXIuXG4gICAqIFdlIHVzZSBpdCB0byBpbXBsZW1lbnQgdGhlIHJlc3RvcmUgZm9jdXMgYmV0d2VlbiBkaWZmZXJlbnQgYnJvd3NlciBkb2N1bWVudHMuXG4gICAqL1xuICBnZXREb2M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIERvIHdlIHN0aWxsIHdhbnQgdG8gZW5mb3JjZSB0aGUgZm9jdXM/XG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgbmVzdGluZyBUcmFwRm9jdXMgZWxlbWVudHMuXG4gICAqL1xuICBpc0VuYWJsZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVHJhcEZvY3VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgekluZGV4OiAtMSxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBEaXNhYmxlIHNjcm9sbCBjYXBhYmlsaXRpZXMuXG4gICAgdG91Y2hBY3Rpb246ICdub25lJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGludmlzaWJsZT17dHJ1ZX1gLiAqL1xuICBpbnZpc2libGU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfVxufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgU2ltcGxlQmFja2Ryb3AgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNpbXBsZUJhY2tkcm9wKHByb3BzLCByZWYpIHtcbiAgdmFyIGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImludmlzaWJsZVwiLCBcIm9wZW5cIl0pO1xuXG4gIHJldHVybiBvcGVuID8gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgaW52aXNpYmxlID8gc3R5bGVzLmludmlzaWJsZSA6IHt9LCBvdGhlci5zdHlsZSlcbiAgfSkpIDogbnVsbDtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2ltcGxlQmFja2Ryb3AucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuU2ltcGxlQmFja2Ryb3AuZGVmYXVsdFByb3BzID0ge1xuICBpbnZpc2libGU6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgU2ltcGxlQmFja2Ryb3A7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI7XG5pbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCB7IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgc2V0UmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcbmltcG9ydCB3aXRoRm9yd2FyZGVkUmVmIGZyb20gJy4uL3V0aWxzL3dpdGhGb3J3YXJkZWRSZWYnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi4vc3R5bGVzL3pJbmRleCc7XG5pbXBvcnQgTW9kYWxNYW5hZ2VyIGZyb20gJy4vTW9kYWxNYW5hZ2VyJztcbmltcG9ydCBUcmFwRm9jdXMgZnJvbSAnLi9UcmFwRm9jdXMnO1xuaW1wb3J0IFNpbXBsZUJhY2tkcm9wIGZyb20gJy4vU2ltcGxlQmFja2Ryb3AnO1xuaW1wb3J0IHsgYXJpYUhpZGRlbiB9IGZyb20gJy4vbWFuYWdlQXJpYUhpZGRlbic7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoY29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gcHJvcHMuY2hpbGRyZW4gPyBwcm9wcy5jaGlsZHJlbi5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaW4nKSA6IGZhbHNlO1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5tb2RhbCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBgTW9kYWxgIGhhcyBleGl0ZWQuICovXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIE1vZGFsIGlzIGEgbG93ZXItbGV2ZWwgY29uc3RydWN0IHRoYXQgaXMgbGV2ZXJhZ2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtEaWFsb2ddKC9hcGkvZGlhbG9nLylcbiAqIC0gW0RyYXdlcl0oL2FwaS9kcmF3ZXIvKVxuICogLSBbTWVudV0oL2FwaS9tZW51LylcbiAqIC0gW1BvcG92ZXJdKC9hcGkvcG9wb3Zlci8pXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIG1vZGFsIGRpYWxvZywgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pIGNvbXBvbmVudFxuICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgdXNpbmcgTW9kYWwuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2hhcmVzIG1hbnkgY29uY2VwdHMgd2l0aCBbcmVhY3Qtb3ZlcmxheXNdKGh0dHBzOi8vcmVhY3QtYm9vdHN0cmFwLmdpdGh1Yi5pby9yZWFjdC1vdmVybGF5cy8jbW9kYWxzKS5cbiAqL1xuXG52YXIgTW9kYWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNb2RhbCkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVPcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihfdGhpcy5wcm9wcy5jb250YWluZXIpIHx8IF90aGlzLmdldERvYygpLmJvZHk7XG5cbiAgICAgIF90aGlzLnByb3BzLm1hbmFnZXIuYWRkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBjb250YWluZXIpO1xuXG4gICAgICBpZiAoX3RoaXMubW9kYWxSZWYpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlT3BlbmVkKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25SZW5kZXJlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICBfdGhpcy5oYW5kbGVPcGVuZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyaWFIaWRkZW4oX3RoaXMubW9kYWxSZWYsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVPcGVuZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLm1vdW50KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gRml4IGEgYnVnIG9uIENocm9tZSB3aGVyZSB0aGUgc2Nyb2xsIGlzbid0IGluaXRpYWxseSAwLlxuXG5cbiAgICAgIF90aGlzLm1vZGFsUmVmLnNjcm9sbFRvcCA9IDA7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdmFyIGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKF90aGlzLnByb3BzKTtcbiAgICAgIC8qIElmIHRoZSBjb21wb25lbnQgZG9lcyBub3QgaGF2ZSBhIHRyYW5zaXRpb24gb3IgaXMgdW5tb3VudGluZyByZW1vdmUgdGhlIE1vZGFsXG4gICAgICBvdGhlcndpc2UgbGV0IHRoZSB0cmFuc2l0aW9uIGhhbmRsZSByZW1vdmluZyB0aGUgc3R5bGUsIHRoaXMgcHJldmVudHMgZWxlbWVudHNcbiAgICAgIG1vdmluZyBhcm91bmQgd2hlbiB0aGUgTW9kYWwgaXMgY2xvc2VkLiAqL1xuXG4gICAgICBpZiAoIShoYXNUcmFuc2l0aW9uICYmIF90aGlzLnByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB8fCByZWFzb24gPT09ICd1bm1vdW50Jykge1xuICAgICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLnJlbW92ZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleGl0ZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm1hbmFnZXIucmVtb3ZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleGl0ZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmFja2Ryb3BDbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrICYmIF90aGlzLnByb3BzLm9uQ2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCwgJ2JhY2tkcm9wQ2xpY2snKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gV2UgZG9uJ3QgdGFrZSBldmVudC5kZWZhdWx0UHJldmVudGVkIGludG8gYWNjb3VudDpcbiAgICAgIC8vXG4gICAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvdXJzIGxpa2VcbiAgICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAgIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gICAgICAvLyBPbmx5IHNwZWNpYWwgSFRNTCBlbGVtZW50cyBoYXZlIHRoZXNlIGRlZmF1bHQgYmVoYXZpb3JzLlxuICAgICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgIV90aGlzLmlzVG9wTW9kYWwoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFN3YWxsb3cgdGhlIGV2ZW50LCBpbiBjYXNlIHNvbWVvbmUgaXMgbGlzdGVuaW5nIGZvciB0aGUgZXNjYXBlIGtleSBvbiB0aGUgYm9keS5cblxuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXNjYXBlS2V5RG93bikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVzY2FwZUtleURvd24oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duICYmIF90aGlzLnByb3BzLm9uQ2xvc2UpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUG9ydGFsUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubW91bnROb2RlID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb2RhbFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLm1vZGFsUmVmID0gcmVmO1xuICAgICAgc2V0UmVmKF90aGlzLnByb3BzLmlubmVyUmVmLCByZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5pc1RvcE1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLm1hbmFnZXIuaXNUb3BNb2RhbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgfTtcblxuICAgIF90aGlzLmdldERvYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvd25lckRvY3VtZW50KF90aGlzLm1vdW50Tm9kZSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZXhpdGVkOiAhcHJvcHMub3BlblxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLm9wZW4gJiYgIXRoaXMucHJvcHMub3Blbikge1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7XG4gICAgICB9IGVsc2UgaWYgKCFwcmV2UHJvcHMub3BlbiAmJiB0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub3BlbiB8fCBnZXRIYXNUcmFuc2l0aW9uKHRoaXMucHJvcHMpICYmICF0aGlzLnN0YXRlLmV4aXRlZCkge1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCd1bm1vdW50Jyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuQmFja2Ryb3BDb21wb25lbnQsXG4gICAgICAgICAgQmFja2Ryb3BQcm9wcyA9IF90aGlzJHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzLmNsb3NlQWZ0ZXJUcmFuc2l0aW9uLFxuICAgICAgICAgIGNvbnRhaW5lciA9IF90aGlzJHByb3BzLmNvbnRhaW5lcixcbiAgICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3RoaXMkcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgICBkaXNhYmxlQmFja2Ryb3BDbGljayA9IF90aGlzJHByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgICAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBfdGhpcyRwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gX3RoaXMkcHJvcHMuZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgICAgICAgZGlzYWJsZVBvcnRhbCA9IF90aGlzJHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF90aGlzJHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICAgICAgaGlkZUJhY2tkcm9wID0gX3RoaXMkcHJvcHMuaGlkZUJhY2tkcm9wLFxuICAgICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgICAga2VlcE1vdW50ZWQgPSBfdGhpcyRwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgICAgICBtYW5hZ2VyID0gX3RoaXMkcHJvcHMubWFuYWdlcixcbiAgICAgICAgICBvbkJhY2tkcm9wQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkJhY2tkcm9wQ2xpY2ssXG4gICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb25Fc2NhcGVLZXlEb3duID0gX3RoaXMkcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgICAgIG9uUmVuZGVyZWQgPSBfdGhpcyRwcm9wcy5vblJlbmRlcmVkLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wcy5vcGVuLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMudGhlbWUsXG4gICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3RoaXMkcHJvcHMsIFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUJhY2tkcm9wQ2xpY2tcIiwgXCJkaXNhYmxlRW5mb3JjZUZvY3VzXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImlubmVyUmVmXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUmVuZGVyZWRcIiwgXCJvcGVuXCIsIFwidGhlbWVcIl0pO1xuXG4gICAgICB2YXIgZXhpdGVkID0gdGhpcy5zdGF0ZS5leGl0ZWQ7XG4gICAgICB2YXIgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24odGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZFByb3BzID0ge307IC8vIEl0J3MgYSBUcmFuc2l0aW9uIGxpa2UgY29tcG9uZW50XG5cbiAgICAgIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgIGNoaWxkUHJvcHMub25FbnRlciA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyLCBjaGlsZHJlbi5wcm9wcy5vbkVudGVyKTtcbiAgICAgICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRyZW4ucHJvcHMucm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoaWxkUHJvcHMucm9sZSA9IGNoaWxkcmVuLnByb3BzLnJvbGUgfHwgJ2RvY3VtZW50JztcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2hpbGRQcm9wcy50YWJJbmRleCA9IGNoaWxkcmVuLnByb3BzLnRhYkluZGV4IHx8ICctMSc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZXNSZW5kZXIgPSBzdHlsZXModGhlbWUgfHwge1xuICAgICAgICB6SW5kZXg6IHpJbmRleFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQb3J0YWwsIHtcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVBvcnRhbFJlZixcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgICAgIG9uUmVuZGVyZWQ6IHRoaXMuaGFuZGxlUmVuZGVyZWRcbiAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlTW9kYWxSZWYsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gICAgICB9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlc1JlbmRlci5yb290LCAhb3BlbiAmJiBleGl0ZWQgPyBzdHlsZXNSZW5kZXIuaGlkZGVuIDoge30sIG90aGVyLnN0eWxlKVxuICAgICAgfSksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQmFja2Ryb3BDbGlja1xuICAgICAgfSwgQmFja2Ryb3BQcm9wcykpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYXBGb2N1cywge1xuICAgICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzOiBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgICBnZXREb2M6IHRoaXMuZ2V0RG9jLFxuICAgICAgICBpc0VuYWJsZWQ6IHRoaXMuaXNUb3BNb2RhbCxcbiAgICAgICAgb3Blbjogb3BlblxuICAgICAgfSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKSkpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3BlcnR5IGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSBhbnkgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIGFueSBjYWxsYmFjay5cbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogZnJvbSBgd2l0aEZvcndhcmRSZWZgXG4gICAqL1xuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBBIG1vZGFsIG1hbmFnZXIgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuXG4gICAqIE1vZGFscy4gVGhpcyBlbmFibGVzIGN1c3RvbWl6aW5nIGhvdyBtb2RhbHMgaW50ZXJhY3Qgd2l0aGluIGEgY29udGFpbmVyLlxuICAgKi9cbiAgbWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTpgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKiBJdCBzaWduYWxzIHRoYXQgdGhlIGBvcGVuPXt0cnVlfWAgcHJvcGVydHkgdG9vayBlZmZlY3QuXG4gICAqL1xuICBvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBCYWNrZHJvcENvbXBvbmVudDogU2ltcGxlQmFja2Ryb3AsXG4gIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uOiBmYWxzZSxcbiAgZGlzYWJsZUF1dG9Gb2N1czogZmFsc2UsXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBmYWxzZSxcbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogZmFsc2UsXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBmYWxzZSxcbiAgZGlzYWJsZVBvcnRhbDogZmFsc2UsXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IGZhbHNlLFxuICBoaWRlQmFja2Ryb3A6IGZhbHNlLFxuICBrZWVwTW91bnRlZDogZmFsc2UsXG4gIC8vIE1vZGFscyBkb24ndCBvcGVuIG9uIHRoZSBzZXJ2ZXIgc28gdGhpcyB3b24ndCBjb25mbGljdCB3aXRoIGNvbmN1cnJlbnQgcmVxdWVzdHMuXG4gIG1hbmFnZXI6IG5ldyBNb2RhbE1hbmFnZXIoKVxufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZSh3aXRoRm9yd2FyZGVkUmVmKE1vZGFsKSk7IiwiaW1wb3J0IHsgd2l0aFRoZW1lQ3JlYXRvciB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG52YXIgd2l0aFRoZW1lID0gd2l0aFRoZW1lQ3JlYXRvcih7XG4gIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG59KTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZTsiLCJleHBvcnQgdmFyIHJlZmxvdyA9IGZ1bmN0aW9uIHJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BzKHByb3BzLCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIF9wcm9wcyRzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgc3R5bGUgPSBfcHJvcHMkc3R5bGUgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJHN0eWxlO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gfHwgdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IHRpbWVvdXRbb3B0aW9ucy5tb2RlXSxcbiAgICBkZWxheTogc3R5bGUudHJhbnNpdGlvbkRlbGF5XG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHdpdGhUaGVtZSBmcm9tICcuLi9zdHlsZXMvd2l0aFRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG5cbmZ1bmN0aW9uIGdldFNjYWxlKHZhbHVlKSB7XG4gIHJldHVybiBcInNjYWxlKFwiLmNvbmNhdCh2YWx1ZSwgXCIsIFwiKS5jb25jYXQoTWF0aC5wb3codmFsdWUsIDIpLCBcIilcIik7XG59XG5cbnZhciBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIC8vIFVzZSB0cmFuc2xhdGVaIHRvIHNjcm9sbGluZyBpc3N1ZSBvbiBDaHJvbWUuXG4gICAgdHJhbnNmb3JtOiBcIlwiLmNvbmNhdChnZXRTY2FsZSgxKSwgXCIgdHJhbnNsYXRlWigwKVwiKVxuICB9XG59O1xuLyoqXG4gKiBUaGUgR3JvdyB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtUb29sdGlwXSgvY29tcG9uZW50cy90b29sdGlwcy8pIGFuZFxuICogW1BvcG92ZXJdKC9jb21wb25lbnRzL3BvcG92ZXIvKSBjb21wb25lbnRzLlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgR3JvdyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3Jvdyhwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRXhpdFwiLCBcInN0eWxlXCIsIFwidGhlbWVcIiwgXCJ0aW1lb3V0XCJdKTtcblxuICB2YXIgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGF1dG9UaW1lb3V0ID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcmVmKTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcihub2RlKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kZWxheTtcblxuICAgIHZhciBkdXJhdGlvbiA9IDA7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheVxuICAgIH0pXS5qb2luKCcsJyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0KG5vZGUpIHtcbiAgICB2YXIgZHVyYXRpb24gPSAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMyID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZGVsYXk7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzXG4gICAgfSldLmpvaW4oJywnKTtcbiAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBnZXRTY2FsZSgwLjc1KTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFkZEVuZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRW5kTGlzdGVuZXIoXywgbmV4dCkge1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KG5leHQsIGF1dG9UaW1lb3V0LmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGFkZEVuZExpc3RlbmVyLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3Jvdy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KSwgUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoR3Jvdyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgPiAza2IuXG5cbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JztcbmltcG9ydCB7IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRUb3AocmVjdCwgdmVydGljYWwpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG5cbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldExlZnQocmVjdCwgaG9yaXpvbnRhbCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKSB7XG4gIHJldHVybiBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG4sIFwicHhcIikgOiBuO1xuICB9KS5qb2luKCcgJyk7XG59IC8vIFN1bSB0aGUgc2Nyb2xsVG9wIGJldHdlZW4gdHdvIGVsZW1lbnRzLlxuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBlbGVtZW50ID0gY2hpbGQ7XG4gIHZhciBzY3JvbGxUb3AgPSAwO1xuXG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHBhcmVudCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgc2Nyb2xsVG9wICs9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgcmV0dXJuIHNjcm9sbFRvcDtcbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbmNob3JFbCA9PT0gJ2Z1bmN0aW9uJyA/IGFuY2hvckVsKCkgOiBhbmNob3JFbDtcbn1cblxuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgIC8vIFNvIHdlIHNlZSB0aGUgcG9wb3ZlciB3aGVuIGl0J3MgZW1wdHkuXG4gICAgLy8gSXQncyBtb3N0IGxpa2VseSBvbiBpc3N1ZSBvbiB1c2VybGFuZC5cbiAgICBtaW5XaWR0aDogMTYsXG4gICAgbWluSGVpZ2h0OiAxNixcbiAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufTtcbnZhciBQb3BvdmVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BvdmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGFuY2hvckVsID0gcHJvcHMuYW5jaG9yRWwsXG4gICAgICBhbmNob3JPcmlnaW4gPSBwcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICBhbmNob3JQb3NpdGlvbiA9IHByb3BzLmFuY2hvclBvc2l0aW9uLFxuICAgICAgYW5jaG9yUmVmZXJlbmNlID0gcHJvcHMuYW5jaG9yUmVmZXJlbmNlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY29udGFpbmVyUHJvcCA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGdldENvbnRlbnRBbmNob3JFbCA9IHByb3BzLmdldENvbnRlbnRBbmNob3JFbCxcbiAgICAgIG1hcmdpblRocmVzaG9sZCA9IHByb3BzLm1hcmdpblRocmVzaG9sZCxcbiAgICAgIE1vZGFsQ2xhc3NlcyA9IHByb3BzLk1vZGFsQ2xhc3NlcyxcbiAgICAgIG9uRW50ZXIgPSBwcm9wcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBQYXBlclByb3BzID0gX3Byb3BzJFBhcGVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFBhcGVyUHJvcHMsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW4gPSBwcm9wcy50cmFuc2Zvcm1PcmlnaW4sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvblByb3AgPSBwcm9wcy5UcmFuc2l0aW9uUHJvcHMsXG4gICAgICBUcmFuc2l0aW9uUHJvcHMgPSBfcHJvcHMkVHJhbnNpdGlvblByb3AgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFRyYW5zaXRpb25Qcm9wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImFuY2hvckVsXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYW5jaG9yUG9zaXRpb25cIiwgXCJhbmNob3JSZWZlcmVuY2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjb250YWluZXJcIiwgXCJlbGV2YXRpb25cIiwgXCJnZXRDb250ZW50QW5jaG9yRWxcIiwgXCJtYXJnaW5UaHJlc2hvbGRcIiwgXCJNb2RhbENsYXNzZXNcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJ0cmFuc2Zvcm1PcmlnaW5cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICB2YXIgcGFwZXJSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGhhbmRsZVJlc2l6ZVJlZiA9IFJlYWN0LnVzZVJlZihmdW5jdGlvbiAoKSB7fSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZVBvc2l0aW9uOiBoYW5kbGVSZXNpemVSZWYuY3VycmVudFxuICAgIH07XG4gIH0sIFtdKTsgLy8gUmV0dXJucyB0aGUgdG9wL2xlZnQgb2Zmc2V0IG9mIHRoZSBwb3NpdGlvblxuICAvLyB0byBhdHRhY2ggdG8gb24gdGhlIGFuY2hvciBlbGVtZW50IChvciBib2R5IGlmIG5vbmUgaXMgcHJvdmlkZWQpXG5cbiAgdmFyIGdldEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChjb250ZW50QW5jaG9yT2Zmc2V0KSB7XG4gICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvclBvc2l0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhbmNob3JQb3NpdGlvbiwgJ01hdGVyaWFsLVVJOiB5b3UgbmVlZCB0byBwcm92aWRlIGEgYGFuY2hvclBvc2l0aW9uYCBwcm9wZXJ0eSB3aGVuIHVzaW5nICcgKyAnPFBvcG92ZXIgYW5jaG9yUmVmZXJlbmNlPVwiYW5jaG9yUG9zaXRpb25cIiAvPi4nKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgcmVzb2x2ZWRBbmNob3JFbCA9IGdldEFuY2hvckVsKGFuY2hvckVsKTsgLy8gSWYgYW4gYW5jaG9yIGVsZW1lbnQgd2Fzbid0IHByb3ZpZGVkLCBqdXN0IHVzZSB0aGUgcGFyZW50IGJvZHkgZWxlbWVudCBvZiB0aGlzIFBvcG92ZXJcblxuICAgIHZhciBhbmNob3JFbGVtZW50ID0gcmVzb2x2ZWRBbmNob3JFbCBpbnN0YW5jZW9mIEVsZW1lbnQgPyByZXNvbHZlZEFuY2hvckVsIDogb3duZXJEb2N1bWVudChwYXBlclJlZi5jdXJyZW50KS5ib2R5O1xuICAgIHZhciBhbmNob3JSZWN0ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgYW5jaG9yVmVydGljYWwgPSBjb250ZW50QW5jaG9yT2Zmc2V0ID09PSAwID8gYW5jaG9yT3JpZ2luLnZlcnRpY2FsIDogJ2NlbnRlcic7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AgKyBnZXRPZmZzZXRUb3AoYW5jaG9yUmVjdCwgYW5jaG9yVmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTsgLy8gUmV0dXJucyB0aGUgdmVydGljYWwgb2Zmc2V0IG9mIGlubmVyIGNvbnRlbnQgdG8gYW5jaG9yIHRoZSB0cmFuc2Zvcm0gb24gaWYgcHJvdmlkZWRcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSAwO1xuXG4gICAgaWYgKGdldENvbnRlbnRBbmNob3JFbCAmJiBhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpIHtcbiAgICAgIHZhciBjb250ZW50QW5jaG9yRWwgPSBnZXRDb250ZW50QW5jaG9yRWwoZWxlbWVudCk7XG5cbiAgICAgIGlmIChjb250ZW50QW5jaG9yRWwgJiYgZWxlbWVudC5jb250YWlucyhjb250ZW50QW5jaG9yRWwpKSB7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCwgY29udGVudEFuY2hvckVsKTtcbiAgICAgICAgY29udGVudEFuY2hvck9mZnNldCA9IGNvbnRlbnRBbmNob3JFbC5vZmZzZXRUb3AgKyBjb250ZW50QW5jaG9yRWwuY2xpZW50SGVpZ2h0IC8gMiAtIHNjcm9sbFRvcCB8fCAwO1xuICAgICAgfSAvLyAhPSB0aGUgZGVmYXVsdCB2YWx1ZVxuXG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJywgWydNYXRlcmlhbC1VSTogeW91IGNhbiBub3QgY2hhbmdlIHRoZSBkZWZhdWx0IGBhbmNob3JPcmlnaW4udmVydGljYWxgIHZhbHVlICcsICd3aGVuIGFsc28gcHJvdmlkaW5nIHRoZSBgZ2V0Q29udGVudEFuY2hvckVsYCBwcm9wZXJ0eSB0byB0aGUgcG9wb3ZlciBjb21wb25lbnQuJywgJ09ubHkgdXNlIG9uZSBvZiB0aGUgdHdvIHByb3BlcnRpZXMuJywgJ1NldCBgZ2V0Q29udGVudEFuY2hvckVsYCB0byBgbnVsbCB8IHVuZGVmaW5lZGAnICsgJyBvciBsZWF2ZSBgYW5jaG9yT3JpZ2luLnZlcnRpY2FsYCB1bmNoYW5nZWQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50QW5jaG9yT2Zmc2V0O1xuICB9LCBbYW5jaG9yT3JpZ2luLnZlcnRpY2FsLCBhbmNob3JSZWZlcmVuY2UsIGdldENvbnRlbnRBbmNob3JFbF0pOyAvLyBSZXR1cm4gdGhlIGJhc2UgdHJhbnNmb3JtIG9yaWdpbiB1c2luZyB0aGUgZWxlbWVudFxuICAvLyBhbmQgdGFraW5nIHRoZSBjb250ZW50IGFuY2hvciBvZmZzZXQgaW50byBhY2NvdW50IGlmIGluIHVzZVxuXG4gIHZhciBnZXRUcmFuc2Zvcm1PcmlnaW4gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZWxlbVJlY3QpIHtcbiAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgdmVydGljYWw6IGdldE9mZnNldFRvcChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsKSArIGNvbnRlbnRBbmNob3JPZmZzZXQsXG4gICAgICBob3Jpem9udGFsOiBnZXRPZmZzZXRMZWZ0KGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0pO1xuICB2YXIgZ2V0UG9zaXRpb25pbmdTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBhcmVudCBoYXMgcmVxdWVzdGVkIGFuY2hvcmluZyBvbiBhbiBpbm5lciBjb250ZW50IG5vZGVcbiAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IGdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCk7XG4gICAgdmFyIGVsZW1SZWN0ID0ge1xuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfTsgLy8gR2V0IHRoZSB0cmFuc2Zvcm0gb3JpZ2luIHBvaW50IG9uIHRoZSBlbGVtZW50IGl0c2VsZlxuXG4gICAgdmFyIGVsZW1UcmFuc2Zvcm1PcmlnaW4gPSBnZXRUcmFuc2Zvcm1PcmlnaW4oZWxlbVJlY3QsIGNvbnRlbnRBbmNob3JPZmZzZXQpO1xuXG4gICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IG51bGwsXG4gICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUoZWxlbVRyYW5zZm9ybU9yaWdpbilcbiAgICAgIH07XG4gICAgfSAvLyBHZXQgdGhlIG9mZnNldCBvZiBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcblxuXG4gICAgdmFyIGFuY2hvck9mZnNldCA9IGdldEFuY2hvck9mZnNldChjb250ZW50QW5jaG9yT2Zmc2V0KTsgLy8gQ2FsY3VsYXRlIGVsZW1lbnQgcG9zaXRpb25pbmdcblxuICAgIHZhciB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbDtcbiAgICB2YXIgbGVmdCA9IGFuY2hvck9mZnNldC5sZWZ0IC0gZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgIHZhciBib3R0b20gPSB0b3AgKyBlbGVtUmVjdC5oZWlnaHQ7XG4gICAgdmFyIHJpZ2h0ID0gbGVmdCArIGVsZW1SZWN0LndpZHRoOyAvLyBVc2UgdGhlIHBhcmVudCB3aW5kb3cgb2YgdGhlIGFuY2hvckVsIGlmIHByb3ZpZGVkXG5cbiAgICB2YXIgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coZ2V0QW5jaG9yRWwoYW5jaG9yRWwpKTsgLy8gV2luZG93IHRocmVzaG9sZHMgdGFraW5nIHJlcXVpcmVkIG1hcmdpbiBpbnRvIGFjY291bnRcblxuICAgIHZhciBoZWlnaHRUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgdmFyIHdpZHRoVGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVyV2lkdGggLSBtYXJnaW5UaHJlc2hvbGQ7IC8vIENoZWNrIGlmIHRoZSB2ZXJ0aWNhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICBpZiAodG9wIDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICB2YXIgZGlmZiA9IHRvcCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBkaWZmO1xuICAgIH0gZWxzZSBpZiAoYm90dG9tID4gaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICB2YXIgX2RpZmYgPSBib3R0b20gLSBoZWlnaHRUaHJlc2hvbGQ7XG5cbiAgICAgIHRvcCAtPSBfZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gX2RpZmY7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhlbGVtUmVjdC5oZWlnaHQgPD0gaGVpZ2h0VGhyZXNob2xkIHx8ICFlbGVtUmVjdC5oZWlnaHQgfHwgIWhlaWdodFRocmVzaG9sZCwgWydNYXRlcmlhbC1VSTogdGhlIHBvcG92ZXIgY29tcG9uZW50IGlzIHRvbyB0YWxsLicsIFwiU29tZSBwYXJ0IG9mIGl0IGNhbiBub3QgYmUgc2VlbiBvbiB0aGUgc2NyZWVuIChcIi5jb25jYXQoZWxlbVJlY3QuaGVpZ2h0IC0gaGVpZ2h0VGhyZXNob2xkLCBcInB4KS5cIiksICdQbGVhc2UgY29uc2lkZXIgYWRkaW5nIGEgYG1heC1oZWlnaHRgIHRvIGltcHJvdmUgdGhlIHVzZXItZXhwZXJpZW5jZS4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7IC8vIENoZWNrIGlmIHRoZSBob3Jpem9udGFsIGF4aXMgbmVlZHMgc2hpZnRpbmdcblxuICAgIGlmIChsZWZ0IDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICB2YXIgX2RpZmYyID0gbGVmdCAtIG1hcmdpblRocmVzaG9sZDtcblxuICAgICAgbGVmdCAtPSBfZGlmZjI7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gX2RpZmYyO1xuICAgIH0gZWxzZSBpZiAocmlnaHQgPiB3aWR0aFRocmVzaG9sZCkge1xuICAgICAgdmFyIF9kaWZmMyA9IHJpZ2h0IC0gd2lkdGhUaHJlc2hvbGQ7XG5cbiAgICAgIGxlZnQgLT0gX2RpZmYzO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IF9kaWZmMztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBcIlwiLmNvbmNhdCh0b3AsIFwicHhcIiksXG4gICAgICBsZWZ0OiBcIlwiLmNvbmNhdChsZWZ0LCBcInB4XCIpLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgIH07XG4gIH0sIFthbmNob3JFbCwgYW5jaG9yUmVmZXJlbmNlLCBnZXRBbmNob3JPZmZzZXQsIGdldENvbnRlbnRBbmNob3JPZmZzZXQsIGdldFRyYW5zZm9ybU9yaWdpbiwgbWFyZ2luVGhyZXNob2xkXSk7XG4gIHZhciBzZXRQb3NpdGlvbmluZ1N0eWxlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdmFyIHBvc2l0aW9uaW5nID0gZ2V0UG9zaXRpb25pbmdTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChwb3NpdGlvbmluZy50b3AgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gcG9zaXRpb25pbmcudG9wO1xuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbmluZy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBwb3NpdGlvbmluZy5sZWZ0O1xuICAgIH1cblxuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gcG9zaXRpb25pbmcudHJhbnNmb3JtT3JpZ2luO1xuICB9LCBbZ2V0UG9zaXRpb25pbmdTdHlsZV0pO1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyaW5nKGVsZW1lbnQpIHtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50KTtcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcyhlbGVtZW50KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUGFwZXJSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHBhcGVyUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBoYW5kbGVSZXNpemVSZWYuY3VycmVudCA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEJlY2F1c2Ugd2UgZGVib3VuY2UgdGhlIGV2ZW50LCB0aGUgb3BlbiBwcm9wZXJ0eSBtaWdodCBubyBsb25nZXIgYmUgdHJ1ZVxuICAgICAgLy8gd2hlbiB0aGUgY2FsbGJhY2sgcmVzb2x2ZXMuXG4gICAgICBpZiAoIW9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcyhwYXBlclJlZi5jdXJyZW50KTtcbiAgICB9LCAxNjYpOyAvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplUmVmLmN1cnJlbnQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemVSZWYuY3VycmVudC5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZVJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG5cbiAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgfSAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAvLyBJZiBuZWl0aGVyIGFyZSBwcm92aWRlZCBsZXQgdGhlIE1vZGFsIHRha2UgY2FyZSBvZiBjaG9vc2luZyB0aGUgY29udGFpbmVyXG5cblxuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KGdldEFuY2hvckVsKGFuY2hvckVsKSkuYm9keSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogTW9kYWxDbGFzc2VzLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgQmFja2Ryb3BQcm9wczoge1xuICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgfVxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogb3BlbixcbiAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRXhpdDogb25FeGl0LFxuICAgIG9uRXhpdGVkOiBvbkV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgb25FbnRlcmluZzogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyaW5nLCBUcmFuc2l0aW9uUHJvcHMub25FbnRlcmluZylcbiAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBlbGV2YXRpb246IGVsZXZhdGlvbixcbiAgICByZWY6IGhhbmRsZVBhcGVyUmVmXG4gIH0sIFBhcGVyUHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wYXBlciwgUGFwZXJQcm9wcy5jbGFzc05hbWUpXG4gIH0pLCBjaGlsZHJlbikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9wb3Zlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGlzIGlzIGNhbGxiYWNrIHByb3BlcnR5LiBJdCdzIGNhbGxlZCBieSB0aGUgY29tcG9uZW50IG9uIG1vdW50LlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHRyaWdnZXIgYW4gYWN0aW9uIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHVwZGF0ZVBvc2l0aW9uKCkgYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYWN0aW9ucyBUaGlzIG9iamVjdCBjb250YWlucyBhbGwgcG9zc2libGUgYWN0aW9uc1xuICAgKiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIERPTSBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgRE9NIGVsZW1lbnQsXG4gICAqIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAocHJvcHMub3BlbiAmJiBwcm9wcy5hbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpIHtcbiAgICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBub2RlIGVsZW1lbnQgc2hvdWxkIGJlIHZpc2libGUuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIFwiSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgYFwiLmNvbmNhdChyZXNvbHZlZEFuY2hvckVsLCBcImAgaW5zdGVhZC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgYW5jaG9yRWxgIHdpbGwgYXR0YWNoIHRvLiBUaGlzIGlzIG5vdCB1c2VkIHdoZW4gdGhlXG4gICAqIGFuY2hvclJlZmVyZW5jZSBpcyAnYW5jaG9yUG9zaXRpb24nLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodF0uXG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnXSldKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbSddKV0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWRcbiAgICogdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0b1xuICAgKiB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKlxuICAgKiBUaGlzIGRldGVybWluZXMgd2hpY2ggYW5jaG9yIHByb3AgdG8gcmVmZXIgdG8gdG8gc2V0XG4gICAqIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvclJlZmVyZW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnYW5jaG9yRWwnLCAnYW5jaG9yUG9zaXRpb24nLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgaW4gb3JkZXIgdG8gcmV0cmlldmUgdGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEl0J3MgdGhlIG9wcG9zaXRlIG9mIHRoZSBgYW5jaG9yRWxgIHByb3BlcnR5LlxuICAgKiBUaGUgY29udGVudCBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgYW4gZWxlbWVudCBpbnNpZGUgdGhlIHBvcG92ZXIuXG4gICAqIEl0J3MgdXNlZCB0byBjb3JyZWN0bHkgc2Nyb2xsIGFuZCBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgcG9zaXRpb25pbmcgc3RyYXRlZ3kgdHJpZXMgdG8gbWFrZSB0aGUgY29udGVudCBhbmNob3IgZWxlbWVudCBqdXN0IGFib3ZlIHRoZVxuICAgKiBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIGdldENvbnRlbnRBbmNob3JFbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBob3cgY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdyB0aGUgcG9wb3ZlciBjYW4gYXBwZWFyLlxuICAgKi9cbiAgbWFyZ2luVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcGVydHkgYXBwbGllZCB0byB0aGUgW2BNb2RhbGBdKC9hcGkvbW9kYWwvKSBlbGVtZW50LlxuICAgKi9cbiAgTW9kYWxDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOmBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImBcbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBvcG92ZXIgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaFxuICAgKiB3aWxsIGF0dGFjaCB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b20sIHgocHgpXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHQsIHgocHgpXS5cbiAgICovXG4gIHRyYW5zZm9ybU9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddKV0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vbmVPZihbJ3RvcCcsICdjZW50ZXInLCAnYm90dG9tJ10pXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcblBvcG92ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhbmNob3JSZWZlcmVuY2U6ICdhbmNob3JFbCcsXG4gIGFuY2hvck9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgZWxldmF0aW9uOiA4LFxuICBtYXJnaW5UaHJlc2hvbGQ6IDE2LFxuICB0cmFuc2Zvcm1PcmlnaW46IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0sXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IEdyb3csXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogJ2F1dG8nXG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInXG59KShQb3BvdmVyKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBMaXN0Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgIG1hcmdpbjogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVBhZGRpbmc9e2ZhbHNlfWAuICovXG4gIHBhZGRpbmc6IHtcbiAgICBwYWRkaW5nVG9wOiA4LFxuICAgIHBhZGRpbmdCb3R0b206IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGRlbnNlLiAqL1xuICBkZW5zZToge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBhIGBzdWJoZWFkZXJgIGlzIHByb3ZpZGVkLiAqL1xuICBzdWJoZWFkZXI6IHtcbiAgICBwYWRkaW5nVG9wOiAwXG4gIH1cbn07XG52YXIgTGlzdCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3VsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGVuc2UgPSBwcm9wcy5kZW5zZSxcbiAgICAgIGRlbnNlID0gX3Byb3BzJGRlbnNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZW5zZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUGFkZGluZyA9IHByb3BzLmRpc2FibGVQYWRkaW5nLFxuICAgICAgZGlzYWJsZVBhZGRpbmcgPSBfcHJvcHMkZGlzYWJsZVBhZGRpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQYWRkaW5nLFxuICAgICAgc3ViaGVhZGVyID0gcHJvcHMuc3ViaGVhZGVyLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRlbnNlXCIsIFwiZGlzYWJsZVBhZGRpbmdcIiwgXCJzdWJoZWFkZXJcIl0pO1xuXG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlbnNlOiBkZW5zZVxuICAgIH07XG4gIH0sIFtkZW5zZV0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBkZW5zZSAmJiBjbGFzc2VzLmRlbnNlLCAhZGlzYWJsZVBhZGRpbmcgJiYgY2xhc3Nlcy5wYWRkaW5nLCBzdWJoZWFkZXIgJiYgY2xhc3Nlcy5zdWJoZWFkZXIpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgc3ViaGVhZGVyLCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgd2lsbCBiZSB1c2VkIGZvclxuICAgKiB0aGUgbGlzdCBhbmQgbGlzdCBpdGVtcy5cbiAgICogVGhlIHByb3BlcnR5IGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LlxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3QnXG59KShMaXN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi4vTGlzdCc7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscy9yZWFjdEhlbHBlcnMnO1xuXG5mdW5jdGlvbiBuZXh0SXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGl0ZW0gJiYgaXRlbS5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbnVsbCA6IGxpc3QuZmlyc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gcHJldmlvdXNJdGVtKGxpc3QsIGl0ZW0sIGRpc2FibGVMaXN0V3JhcCkge1xuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0Lmxhc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkge1xuICBpZiAodGV4dENyaXRlcmlhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciB0ZXh0ID0gbmV4dEZvY3VzLmlubmVyVGV4dDtcblxuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8ganNkb20gZG9lc24ndCBzdXBwb3J0IGlubmVyVGV4dFxuICAgIHRleHQgPSBuZXh0Rm9jdXMudGV4dENvbnRlbnQ7XG4gIH1cblxuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdGV4dCA9IHRleHQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRleHRDcml0ZXJpYS5yZXBlYXRpbmcpIHtcbiAgICByZXR1cm4gdGV4dFswXSA9PT0gdGV4dENyaXRlcmlhLmtleXNbMF07XG4gIH1cblxuICByZXR1cm4gdGV4dC5pbmRleE9mKHRleHRDcml0ZXJpYS5rZXlzLmpvaW4oJycpKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCB0cmF2ZXJzYWxGdW5jdGlvbiwgdGV4dENyaXRlcmlhKSB7XG4gIHZhciB3cmFwcGVkT25jZSA9IGZhbHNlO1xuICB2YXIgbmV4dEZvY3VzID0gdHJhdmVyc2FsRnVuY3Rpb24obGlzdCwgY3VycmVudEZvY3VzLCBjdXJyZW50Rm9jdXMgPyBkaXNhYmxlTGlzdFdyYXAgOiBmYWxzZSk7XG5cbiAgd2hpbGUgKG5leHRGb2N1cykge1xuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcC5cbiAgICBpZiAobmV4dEZvY3VzID09PSBsaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgIGlmICh3cmFwcGVkT25jZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHdyYXBwZWRPbmNlID0gdHJ1ZTtcbiAgICB9IC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudC5cblxuXG4gICAgaWYgKCFuZXh0Rm9jdXMuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpIHx8IG5leHRGb2N1cy5kaXNhYmxlZCB8fCBuZXh0Rm9jdXMuZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJykgPT09ICd0cnVlJyB8fCAhdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkpIHtcbiAgICAgIG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIG5leHRGb2N1cywgZGlzYWJsZUxpc3RXcmFwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKG5leHRGb2N1cykge1xuICAgIG5leHRGb2N1cy5mb2N1cygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbnZhciBNZW51TGlzdCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9ucyA9IHByb3BzLmFjdGlvbnMsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBfcHJvcHMkZGlzYWJsZUxpc3RXcmEgPSBwcm9wcy5kaXNhYmxlTGlzdFdyYXAsXG4gICAgICBkaXNhYmxlTGlzdFdyYXAgPSBfcHJvcHMkZGlzYWJsZUxpc3RXcmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVMaXN0V3JhLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc05hbWVcIiwgXCJvbktleURvd25cIiwgXCJkaXNhYmxlTGlzdFdyYXBcIl0pO1xuXG4gIHZhciBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgdGV4dENyaXRlcmlhUmVmID0gUmVhY3QudXNlUmVmKHtcbiAgICBrZXlzOiBbXSxcbiAgICByZXBlYXRpbmc6IHRydWUsXG4gICAgcHJldmlvdXNLZXlNYXRjaGVkOiB0cnVlLFxuICAgIGxhc3RUaW1lOiBudWxsXG4gIH0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGF1dG9Gb2N1cykge1xuICAgICAgbGlzdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9ucywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhZGp1c3RTdHlsZUZvclNjcm9sbGJhcjogZnVuY3Rpb24gYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoY29udGFpbmVyRWxlbWVudCwgdGhlbWUpIHtcbiAgICAgICAgLy8gTGV0J3MgaWdub3JlIHRoYXQgcGllY2Ugb2YgbG9naWMgaWYgdXNlcnMgYXJlIGFscmVhZHkgb3ZlcnJpZGluZyB0aGUgd2lkdGhcbiAgICAgICAgLy8gb2YgdGhlIG1lbnUuXG4gICAgICAgIHZhciBub0V4cGxpY2l0V2lkdGggPSAhbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoO1xuXG4gICAgICAgIGlmIChjb250YWluZXJFbGVtZW50LmNsaWVudEhlaWdodCA8IGxpc3RSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgJiYgbm9FeHBsaWNpdFdpZHRoKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbGJhclNpemUgPSBcIlwiLmNvbmNhdChnZXRTY3JvbGxiYXJTaXplKHRydWUpLCBcInB4XCIpO1xuICAgICAgICAgIGxpc3RSZWYuY3VycmVudC5zdHlsZVt0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3BhZGRpbmdMZWZ0JyA6ICdwYWRkaW5nUmlnaHQnXSA9IHNjcm9sbGJhclNpemU7XG4gICAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gXCJjYWxjKDEwMCUgKyBcIi5jb25jYXQoc2Nyb2xsYmFyU2l6ZSwgXCIpXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3RSZWYuY3VycmVudDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgdmFyIGxpc3QgPSBsaXN0UmVmLmN1cnJlbnQ7XG4gICAgdmFyIGtleSA9IGV2ZW50LmtleTtcbiAgICB2YXIgY3VycmVudEZvY3VzID0gb3duZXJEb2N1bWVudChsaXN0KS5hY3RpdmVFbGVtZW50O1xuXG4gICAgaWYgKChrZXkgPT09ICdBcnJvd1VwJyB8fCBrZXkgPT09ICdBcnJvd0Rvd24nKSAmJiAoIWN1cnJlbnRGb2N1cyB8fCBjdXJyZW50Rm9jdXMgJiYgIWxpc3QuY29udGFpbnMoY3VycmVudEZvY3VzKSkpIHtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnSG9tZScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBuZXh0SXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdFbmQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIG51bGwsIGRpc2FibGVMaXN0V3JhcCwgcHJldmlvdXNJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjcml0ZXJpYSA9IHRleHRDcml0ZXJpYVJlZi5jdXJyZW50O1xuICAgICAgdmFyIGxvd2VyS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgY3VyclRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgICAgaWYgKGNyaXRlcmlhLmtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBSZXNldFxuICAgICAgICBpZiAoY3VyclRpbWUgLSBjcml0ZXJpYS5sYXN0VGltZSA+IDUwMCkge1xuICAgICAgICAgIGNyaXRlcmlhLmtleXMgPSBbXTtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3JpdGVyaWEucmVwZWF0aW5nICYmIGxvd2VyS2V5ICE9PSBjcml0ZXJpYS5rZXlzWzBdKSB7XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3JpdGVyaWEubGFzdFRpbWUgPSBjdXJyVGltZTtcbiAgICAgIGNyaXRlcmlhLmtleXMucHVzaChsb3dlcktleSk7XG4gICAgICB2YXIga2VlcEZvY3VzT25DdXJyZW50ID0gY3VycmVudEZvY3VzICYmICFjcml0ZXJpYS5yZXBlYXRpbmcgJiYgdGV4dENyaXRlcmlhTWF0Y2hlcyhjdXJyZW50Rm9jdXMsIGNyaXRlcmlhKTtcblxuICAgICAgaWYgKGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCAmJiAoa2VlcEZvY3VzT25DdXJyZW50IHx8IG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGZhbHNlLCBuZXh0SXRlbSwgY3JpdGVyaWEpKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZU93blJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgbGlzdFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGhhbmRsZU93blJlZiwgcmVmKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IFwibWVudVwiLFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICB0YWJJbmRleDogYXV0b0ZvY3VzID8gMCA6IC0xXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnVMaXN0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGFjdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogRm9jdXMgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcyBmcm9tIGZhbHNlIHRvIHRydWUuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNZW51TGlzdCBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpdGVtcyB3aWxsIG5vdCB3cmFwIGZvY3VzLlxuICAgKi9cbiAgZGlzYWJsZUxpc3RXcmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuY1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVMaXN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vUG9wb3Zlcic7XG5pbXBvcnQgTWVudUxpc3QgZnJvbSAnLi4vTWVudUxpc3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IHNldFJlZiB9IGZyb20gJy4uL3V0aWxzL3JlYWN0SGVscGVycyc7XG52YXIgUlRMX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAncmlnaHQnXG59O1xudmFyIExUUl9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ2xlZnQnXG59O1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICAvLyBzcGVjWjogVGhlIG1heGltdW0gaGVpZ2h0IG9mIGEgc2ltcGxlIG1lbnUgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHJvd3MgbGVzcyB0aGFuIHRoZSB2aWV3XG4gICAgLy8gaGVpZ2h0LiBUaGlzIGVuc3VyZXMgYSB0YXBhYmxlIGFyZWEgb3V0c2lkZSBvZiB0aGUgc2ltcGxlIG1lbnUgd2l0aCB3aGljaCB0byBkaXNtaXNzXG4gICAgLy8gdGhlIG1lbnUuXG4gICAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gOTZweCknLFxuICAgIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBMaXN0YCBjb21wb25lbnQgdmlhIGBNZW51TGlzdGAuICovXG4gIGxpc3Q6IHtcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6ICdub25lJ1xuICB9XG59O1xudmFyIE1lbnUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnUocHJvcHMsIHJlZikge1xuICB2YXIgYXV0b0ZvY3VzUHJvcCA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXNJdGVtLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJE1lbnVMaXN0UHJvcHMgPSBwcm9wcy5NZW51TGlzdFByb3BzLFxuICAgICAgTWVudUxpc3RQcm9wcyA9IF9wcm9wcyRNZW51TGlzdFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNZW51TGlzdFByb3BzLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgUG9wb3ZlckNsYXNzZXMgPSBwcm9wcy5Qb3BvdmVyQ2xhc3NlcyxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3NlbGVjdGVkTWVudScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzSXRlbVwiLCBcIk1lbnVMaXN0UHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib25FbnRlcmluZ1wiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiUG9wb3ZlckNsYXNzZXNcIiwgXCJ0aGVtZVwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBhdXRvRm9jdXMgPSBhdXRvRm9jdXNQcm9wICE9PSB1bmRlZmluZWQgPyBhdXRvRm9jdXNQcm9wIDogIWRpc2FibGVBdXRvRm9jdXNJdGVtO1xuICB2YXIgbWVudUxpc3RBY3Rpb25zUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgZmlyc3RWYWxpZEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmaXJzdFNlbGVjdGVkSXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvckVsID0gZnVuY3Rpb24gZ2V0Q29udGVudEFuY2hvckVsKCkge1xuICAgIHJldHVybiBmaXJzdFNlbGVjdGVkSXRlbVJlZi5jdXJyZW50IHx8IGZpcnN0VmFsaWRJdGVtUmVmLmN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcoZWxlbWVudCkge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwgdGhlbWUpO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlTGlzdEtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVMaXN0S2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAndGFiS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgZmlyc3RWYWxpZEVsZW1lbnRJbmRleCA9IG51bGw7XG4gIHZhciBmaXJzdFNlbGVjdGVkSW5kZXggPSBudWxsO1xuICB2YXIgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjaGlsZC50eXBlICE9PSBSZWFjdC5GcmFnbWVudCwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoZmlyc3RWYWxpZEVsZW1lbnRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgZmlyc3RWYWxpZEVsZW1lbnRJbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIHZhciBuZXdDaGlsZFByb3BzID0gbnVsbDtcblxuICAgIGlmICh2YXJpYW50ICE9PSBcIm1lbnVcIiAmJiBmaXJzdFNlbGVjdGVkSW5kZXggPT09IG51bGwgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQgJiYgIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBmaXJzdFNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSB7fTtcblxuICAgICAgaWYgKGF1dG9Gb2N1cykge1xuICAgICAgICBuZXdDaGlsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICBuZXdDaGlsZFByb3BzLnJlZiA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgICBmaXJzdFNlbGVjdGVkSXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICBzZXRSZWYoY2hpbGQucmVmLCBpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGZpcnN0VmFsaWRFbGVtZW50SW5kZXgpIHtcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSB7XG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGluc3RhbmNlKSB7XG4gICAgICAgICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICAgICAgICBmaXJzdFZhbGlkSXRlbVJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICAgIHNldFJlZihjaGlsZC5yZWYsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUG9wb3ZlciwgX2V4dGVuZHMoe1xuICAgIGdldENvbnRlbnRBbmNob3JFbDogZ2V0Q29udGVudEFuY2hvckVsLFxuICAgIGNsYXNzZXM6IFBvcG92ZXJDbGFzc2VzLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgYW5jaG9yT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgUGFwZXJQcm9wczogX2V4dGVuZHMoe30sIFBhcGVyUHJvcHMsIHtcbiAgICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLmNsYXNzZXMsIHtcbiAgICAgICAgcm9vdDogY2xhc3Nlcy5wYXBlclxuICAgICAgfSlcbiAgICB9KSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51TGlzdCwgX2V4dGVuZHMoe1xuICAgIG9uS2V5RG93bjogaGFuZGxlTGlzdEtleURvd24sXG4gICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzICYmIGZpcnN0U2VsZWN0ZWRJbmRleCA9PT0gbnVsbFxuICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGlzdCwgTWVudUxpc3RQcm9wcy5jbGFzc05hbWUpXG4gIH0pLCBpdGVtcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBET00gZWxlbWVudCB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgIChkZWZhdWx0KSwgdGhlIG1lbnUgbGlzdCAocG9zc2libHkgYSBwYXJ0aWN1bGFyIGl0ZW0gZGVwZW5kaW5nIG9uIHRoZSBtZW51IHZhcmlhbnQpIHdpbGwgcmVjZWl2ZSBmb2N1cyBvbiBvcGVuLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIGBhdXRvRm9jdXM9ZmFsc2VgLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGF1dG9Gb2N1c2AgaW5zdGVhZFxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgTWVudUxpc3RgXSgvYXBpL21lbnUtbGlzdC8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51TGlzdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6YFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYFxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBlbnRlcnMuXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNZW51IGV4aXRzLlxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGlzIHZpc2libGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcGVydHkgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXNcbiAgICogYW5kIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgcmVsYXRpdmUgdG8gdGhlIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoTWVudSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgeyB1c2VGb3JrUmVmIH0gZnJvbSAnLi4vdXRpbHMvcmVhY3RIZWxwZXJzJztcblxuZnVuY3Rpb24gYXJlRXF1YWxWYWx1ZXMoYSwgYikge1xuICBpZiAoX3R5cGVvZihiKSA9PT0gJ29iamVjdCcgJiYgYiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxudmFyIFNlbGVjdElucHV0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBhdXRvV2lkdGggPSBwcm9wcy5hdXRvV2lkdGgsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzcGxheUVtcHR5ID0gcHJvcHMuZGlzcGxheUVtcHR5LFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgX3Byb3BzJE1lbnVQcm9wcyA9IHByb3BzLk1lbnVQcm9wcyxcbiAgICAgIE1lbnVQcm9wcyA9IF9wcm9wcyRNZW51UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1lbnVQcm9wcyxcbiAgICAgIG11bHRpcGxlID0gcHJvcHMubXVsdGlwbGUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25PcGVuID0gcHJvcHMub25PcGVuLFxuICAgICAgb3BlblByb3AgPSBwcm9wcy5vcGVuLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlbmRlclZhbHVlID0gcHJvcHMucmVuZGVyVmFsdWUsXG4gICAgICByZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gcHJvcHMuU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgdGFiSW5kZXhQcm9wID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdoaWRkZW4nIDogX3Byb3BzJHR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0ZvY3VzXCIsIFwiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyVmFsdWVcIiwgXCJyZXF1aXJlZFwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGRpc3BsYXlSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBpZ25vcmVOZXh0Qmx1ciA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYocHJvcHMub3BlbiAhPSBudWxsKSxcbiAgICAgIGlzT3BlbkNvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIG1lbnVNaW5XaWR0aFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIG9wZW5TdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRPcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gUmVhY3QudXNlU3RhdGUoMCksXG4gICAgICBfUmVhY3QkdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlNSwgMiksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTZbMV07XG5cbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZik7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaGFuZGxlUmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9LFxuICAgICAgbm9kZTogaW5wdXRSZWYgPyBpbnB1dFJlZi5jdXJyZW50IDogbnVsbCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH0sIFtpbnB1dFJlZiwgdmFsdWVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNPcGVuQ29udHJvbGxlZCAmJiBvcGVuUHJvcCkge1xuICAgICAgLy8gRm9jdXMgdGhlIGRpc3BsYXkgbm9kZSBzbyB0aGUgZm9jdXMgaXMgcmVzdG9yZWQgb24gdGhpcyBlbGVtZW50IG9uY2VcbiAgICAgIC8vIHRoZSBtZW51IGlzIGNsb3NlZC5cbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpOyAvLyBSZXJlbmRlciB3aXRoIHRoZSByZXNvbHZlIGBkaXNwbGF5UmVmYCByZWZlcmVuY2UuXG5cbiAgICAgIGZvcmNlVXBkYXRlKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiAhbjtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1cywgaXNPcGVuQ29udHJvbGxlZCwgb3BlblByb3BdKTtcblxuICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG9wZW4sIGV2ZW50KSB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGlmIChvbk9wZW4pIHtcbiAgICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICghaXNPcGVuQ29udHJvbGxlZCkge1xuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUoYXV0b1dpZHRoID8gbnVsbCA6IGRpc3BsYXlSZWYuY3VycmVudC5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgLy8gT3BlbmluZyB0aGUgbWVudSBpcyBnb2luZyB0byBibHVyIHRoZS4gSXQgd2lsbCBiZSBmb2N1c2VkIGJhY2sgd2hlbiBjbG9zZWQuXG4gICAgaWdub3JlTmV4dEJsdXIuY3VycmVudCA9IHRydWU7XG4gICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiBoYW5kbGVDbG9zZShldmVudCkge1xuICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVJdGVtQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWUpIDogW107XG4gICAgICAgICAgdmFyIGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZS5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgICAgZXZlbnQudGFyZ2V0ID0ge1xuICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG4gICAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAoaWdub3JlTmV4dEJsdXIuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gVGhlIHBhcmVudCBjb21wb25lbnRzIGFyZSByZWx5aW5nIG9uIHRoZSBidWJibGluZyBvZiB0aGUgZXZlbnQuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlnbm9yZU5leHRCbHVyLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICBldmVudC50YXJnZXQgPSB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfTtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmICghcmVhZE9ubHkpIHtcbiAgICAgIHZhciB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAvLyBUaGUgbmF0aXZlIHNlbGVjdCBkb2Vzbid0IHJlc3BvbmQgdG8gZW50ZXIgb24gTWFjT1MsIGJ1dCBpdCdzIHJlY29tbWVuZGVkIGJ5XG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL2xpc3Rib3gvbGlzdGJveC1jb2xsYXBzaWJsZS5odG1sXG4gICAgICAnRW50ZXInXTtcblxuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIE9wZW5pbmcgdGhlIG1lbnUgaXMgZ29pbmcgdG8gYmx1ciB0aGUuIEl0IHdpbGwgYmUgZm9jdXNlZCBiYWNrIHdoZW4gY2xvc2VkLlxuXG4gICAgICAgIGlnbm9yZU5leHRCbHVyLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgb3BlbiA9IGlzT3BlbkNvbnRyb2xsZWQgJiYgZGlzcGxheVJlZi5jdXJyZW50ID8gb3BlblByb3AgOiBvcGVuU3RhdGU7XG4gIGRlbGV0ZSBvdGhlclsnYXJpYS1pbnZhbGlkJ107XG4gIHZhciBkaXNwbGF5O1xuICB2YXIgZGlzcGxheVNpbmdsZSA9ICcnO1xuICB2YXIgZGlzcGxheU11bHRpcGxlID0gW107XG4gIHZhciBjb21wdXRlRGlzcGxheSA9IGZhbHNlOyAvLyBObyBuZWVkIHRvIGRpc3BsYXkgYW55IHZhbHVlIGlmIHRoZSBmaWVsZCBpcyBlbXB0eS5cblxuICBpZiAoaXNGaWxsZWQocHJvcHMpIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgIGlmIChyZW5kZXJWYWx1ZSkge1xuICAgICAgZGlzcGxheSA9IHJlbmRlclZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcHV0ZURpc3BsYXkgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpdGVtcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2hpbGQudHlwZSAhPT0gUmVhY3QuRnJhZ21lbnQsIFtcIk1hdGVyaWFsLVVJOiB0aGUgU2VsZWN0IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgdmFyIHNlbGVjdGVkO1xuXG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IHRoZSBgdmFsdWVgIHByb3BlcnR5IG11c3QgYmUgYW4gYXJyYXkgJyArICd3aGVuIHVzaW5nIHRoZSBgU2VsZWN0YCBjb21wb25lbnQgd2l0aCBgbXVsdGlwbGVgLicpO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RlZCA9IHZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIGFyZUVxdWFsVmFsdWVzKHYsIGNoaWxkLnByb3BzLnZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5U2luZ2xlID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25DbGljazogaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSB2YWx1ZSBpcyBtb3N0IGxpa2VseSBub3QgYSB2YWxpZCBIVE1MIGF0dHJpYnV0ZS5cbiAgICAgICdkYXRhLXZhbHVlJzogY2hpbGQucHJvcHMudmFsdWUgLy8gSW5zdGVhZCwgd2UgcHJvdmlkZSBpdCBhcyBhIGRhdGEgYXR0cmlidXRlLlxuXG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChjb21wdXRlRGlzcGxheSkge1xuICAgIGRpc3BsYXkgPSBtdWx0aXBsZSA/IGRpc3BsYXlNdWx0aXBsZS5qb2luKCcsICcpIDogZGlzcGxheVNpbmdsZTtcbiAgfSAvLyBBdm9pZCBwZXJmb3JtaW5nIGEgbGF5b3V0IGNvbXB1dGF0aW9uIGluIHRoZSByZW5kZXIgbWV0aG9kLlxuXG5cbiAgdmFyIG1lbnVNaW5XaWR0aCA9IG1lbnVNaW5XaWR0aFN0YXRlO1xuXG4gIGlmICghYXV0b1dpZHRoICYmIGlzT3BlbkNvbnRyb2xsZWQuY3VycmVudCAmJiBkaXNwbGF5UmVmLmN1cnJlbnQpIHtcbiAgICBtZW51TWluV2lkdGggPSBkaXNwbGF5UmVmLmN1cnJlbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICB2YXIgdGFiSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgY2xhc3Nlcy5zZWxlY3RNZW51LCBjbGFzc05hbWUsIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIHZhcmlhbnQgPT09ICdmaWxsZWQnICYmIGNsYXNzZXMuZmlsbGVkLCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIGNsYXNzZXMub3V0bGluZWQpLFxuICAgIHJlZjogZGlzcGxheVJlZixcbiAgICBcImFyaWEtcHJlc3NlZFwiOiBvcGVuID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgcm9sZTogXCJidXR0b25cIixcbiAgICBcImFyaWEtb3duc1wiOiBvcGVuID8gXCJtZW51LVwiLmNvbmNhdChuYW1lIHx8ICcnKSA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJ0cnVlXCIsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBkaXNhYmxlZCB8fCByZWFkT25seSA/IG51bGwgOiBoYW5kbGVDbGljayxcbiAgICBvbkZvY3VzOiBvbkZvY3VzIC8vIFRoZSBpZCBjYW4gaGVscCB3aXRoIGVuZC10by1lbmQgdGVzdGluZyBhdXRvbWF0aW9uLlxuICAgICxcbiAgICBpZDogbmFtZSA/IFwic2VsZWN0LVwiLmNvbmNhdChuYW1lKSA6IHVuZGVmaW5lZFxuICB9LCBTZWxlY3REaXNwbGF5UHJvcHMpLCBkaXNwbGF5ICE9IG51bGwgPyBkaXNwbGF5IDogUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgX2V4dGVuZHMoe1xuICAgIHZhbHVlOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdHlwZTogdHlwZSxcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1c1xuICB9LCBvdGhlcikpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChNZW51LCBfZXh0ZW5kcyh7XG4gICAgaWQ6IFwibWVudS1cIi5jb25jYXQobmFtZSB8fCAnJyksXG4gICAgYW5jaG9yRWw6IGRpc3BsYXlSZWYuY3VycmVudCxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IGhhbmRsZUNsb3NlXG4gIH0sIE1lbnVQcm9wcywge1xuICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgIGRpc2FibGVMaXN0V3JhcDogdHJ1ZVxuICAgIH0sIE1lbnVQcm9wcy5NZW51TGlzdFByb3BzKSxcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLlBhcGVyUHJvcHMsIHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIG1pbldpZHRoOiBtZW51TWluV2lkdGhcbiAgICAgIH0sIE1lbnVQcm9wcy5QYXBlclByb3BzICE9IG51bGwgPyBNZW51UHJvcHMuUGFwZXJQcm9wcy5zdHlsZSA6IG51bGwpXG4gICAgfSlcbiAgfSksIGl0ZW1zKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBpdHMgdmFsdWUgaXMgZW1wdHkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbCBgc2VsZWN0YCBvcGVuIHN0YXRlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3RJbnB1dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNyAxMGw1IDUgNS01elwiXG59KSwgJ0Fycm93RHJvcERvd24nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTmF0aXZlU2VsZWN0SW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zZWxlY3QsIGNsYXNzTmFtZSwgdmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYgY2xhc3Nlcy5maWxsZWQsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgY2xhc3Nlcy5vdXRsaW5lZCwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgbmFtZTogbmFtZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICByZWY6IGlucHV0UmVmIHx8IHJlZlxuICB9LCBvdGhlcikpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5hdGl2ZVNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPG9wdGlvbj5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTZWxlY3RJbnB1dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi9OYXRpdmVTZWxlY3RJbnB1dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB3aXRoRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL3dpdGhGb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBgcm9vdGAgY2xhc3MuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBgc2VsZWN0YCBjbGFzcy4gKi9cbiAgICBzZWxlY3Q6IHtcbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgICAvLyBSZXNldFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICAvLyBXaGVuIGludGVyYWN0aW5nIHF1aWNrbHksIHRoZSB0ZXh0IGNhbiBlbmQgdXAgc2VsZWN0ZWQuXG4gICAgICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHBhZGRpbmdSaWdodDogMzIsXG4gICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAvLyBSZXNldFxuICAgICAgd2lkdGg6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgICBtaW5XaWR0aDogMTYsXG4gICAgICAvLyBTbyBpdCBkb2Vzbid0IGNvbGxhcHNlLlxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgLy8gU2hvdyB0aGF0IGl0J3Mgbm90IGFuIHRleHQgaW5wdXRcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KScsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcblxuICAgICAgfSxcbiAgICAgIC8vIFJlbW92ZSBJRSAxMSBhcnJvd1xuICAgICAgJyY6Oi1tcy1leHBhbmQnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfSxcbiAgICAgICcmW211bHRpcGxlXSc6IHtcbiAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgIH0sXG4gICAgICAnJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGZpbGxlZDoge1xuICAgICAgd2lkdGg6ICdjYWxjKDEwMCUgLSA0NHB4KSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gNDZweCknLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGBzZWxlY3RNZW51YCBjbGFzcy4gKi9cbiAgICBzZWxlY3RNZW51OiB7XG4gICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgLy8gRml4IFNhZmFyaSB0ZXh0T3ZlcmZsb3dcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBgZGlzYWJsZWRgIGNsYXNzLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBgaWNvbmAgY2xhc3MuICovXG4gICAgaWNvbjoge1xuICAgICAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgICAgIC8vIHRvIHRoZSBpbnB1dC5cbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6ICdjYWxjKDUwJSAtIDEycHgpJyxcbiAgICAgIC8vIENlbnRlciB2ZXJ0aWNhbGx5XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgJ3BvaW50ZXItZXZlbnRzJzogJ25vbmUnIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG5cbiAgICB9XG4gIH07XG59O1xudmFyIGRlZmF1bHRJbnB1dCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIG51bGwpO1xuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB0byBgPFNlbGVjdCBuYXRpdmUgLz5gIHdpdGggYSBtdWNoIHNtYWxsZXIgYnVuZGxlIHNpemUgZm9vdHByaW50LlxuICovXG5cbnZhciBOYXRpdmVTZWxlY3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IEFycm93RHJvcERvd25JY29uIDogX3Byb3BzJEljb25Db21wb25lbnQsXG4gICAgICBfcHJvcHMkaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0ID0gX3Byb3BzJGlucHV0ID09PSB2b2lkIDAgPyBkZWZhdWx0SW5wdXQgOiBfcHJvcHMkaW5wdXQsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIG11aUZvcm1Db250cm9sID0gcHJvcHMubXVpRm9ybUNvbnRyb2wsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwibXVpRm9ybUNvbnRyb2xcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGlucHV0LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYE5hdGl2ZVNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogTmF0aXZlU2VsZWN0SW5wdXQsXG4gICAgaW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIEljb25Db21wb25lbnQ6IEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0sIGlucHV0UHJvcHMsIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3QucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbk5hdGl2ZVNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0J1xufSkod2l0aEZvcm1Db250cm9sQ29udGV4dChOYXRpdmVTZWxlY3QpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBtZXJnZUNsYXNzZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICcuL1NlbGVjdElucHV0JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHdpdGhGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvd2l0aEZvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCB7IHN0eWxlcyBhcyBuYXRpdmVTZWxlY3RTdHlsZXMgfSBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0JztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBuYXRpdmVTZWxlY3RTdHlsZXM7XG52YXIgZGVmYXVsdElucHV0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgbnVsbCk7XG52YXIgU2VsZWN0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGF1dG9XaWR0aCA9IHByb3BzLmF1dG9XaWR0aCxcbiAgICAgIGF1dG9XaWR0aCA9IF9wcm9wcyRhdXRvV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNwbGF5RW1wdHkgPSBwcm9wcy5kaXNwbGF5RW1wdHksXG4gICAgICBkaXNwbGF5RW1wdHkgPSBfcHJvcHMkZGlzcGxheUVtcHR5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNwbGF5RW1wdHksXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IEFycm93RHJvcERvd25JY29uIDogX3Byb3BzJEljb25Db21wb25lbnQsXG4gICAgICBfcHJvcHMkaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0ID0gX3Byb3BzJGlucHV0ID09PSB2b2lkIDAgPyBkZWZhdWx0SW5wdXQgOiBfcHJvcHMkaW5wdXQsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIE1lbnVQcm9wcyA9IHByb3BzLk1lbnVQcm9wcyxcbiAgICAgIG11aUZvcm1Db250cm9sID0gcHJvcHMubXVpRm9ybUNvbnRyb2wsXG4gICAgICBfcHJvcHMkbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG11bHRpcGxlID0gX3Byb3BzJG11bHRpcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aXBsZSxcbiAgICAgIF9wcm9wcyRuYXRpdmUgPSBwcm9wcy5uYXRpdmUsXG4gICAgICBuYXRpdmUgPSBfcHJvcHMkbmF0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRuYXRpdmUsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uT3BlbiA9IHByb3BzLm9uT3BlbixcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgcmVuZGVyVmFsdWUgPSBwcm9wcy5yZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHByb3BzLlNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWlGb3JtQ29udHJvbFwiLCBcIm11bHRpcGxlXCIsIFwibmF0aXZlXCIsIFwib25DbG9zZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWyd2YXJpYW50J11cbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoaW5wdXQsIF9leHRlbmRzKHtcbiAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgU2VsZWN0SW5wdXRgLlxuICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBJY29uQ29tcG9uZW50OiBJY29uQ29tcG9uZW50LFxuICAgICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAvLyBXZSByZW5kZXIgYSBzZWxlY3QuIFdlIGNhbiBpZ25vcmUgdGhlIHR5cGUgcHJvdmlkZWQgYnkgdGhlIGBJbnB1dGAuXG4gICAgICBtdWx0aXBsZTogbXVsdGlwbGVcbiAgICB9LCBuYXRpdmUgPyB7fSA6IHtcbiAgICAgIGF1dG9XaWR0aDogYXV0b1dpZHRoLFxuICAgICAgZGlzcGxheUVtcHR5OiBkaXNwbGF5RW1wdHksXG4gICAgICBNZW51UHJvcHM6IE1lbnVQcm9wcyxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICBvbk9wZW46IG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICByZW5kZXJWYWx1ZTogcmVuZGVyVmFsdWUsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHM6IFNlbGVjdERpc3BsYXlQcm9wc1xuICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgIGNsYXNzZXM6IGlucHV0UHJvcHMgPyBtZXJnZUNsYXNzZXMoe1xuICAgICAgICBiYXNlQ2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgbmV3Q2xhc3NlczogaW5wdXRQcm9wcy5jbGFzc2VzLFxuICAgICAgICBDb21wb25lbnQ6IFNlbGVjdFxuICAgICAgfSkgOiBjbGFzc2VzXG4gICAgfSwgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYE1lbnVJdGVtYCB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlIGFuZCBgb3B0aW9uYCB3aGVuIGBuYXRpdmVgIGlzIHRydWUuXG4gICAqXG4gICAqIOKaoO+4j1RoZSBgTWVudUl0ZW1gIGVsZW1lbnRzICoqbXVzdCoqIGJlIGRpcmVjdCBkZXNjZW5kYW50cyB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBpdHMgdmFsdWUgaXMgZW1wdHkuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcGVydHkgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBmcm9tIGB3aXRoRm9ybUNvbnRyb2xDb250ZXh0YFxuICAgKi9cbiAgbXVpRm9ybUNvbnRyb2w6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlIHVzaW5nIGEgbmF0aXZlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBuYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkIHdoZW4gYG5hdGl2ZWAgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2wgYHNlbGVjdGAgb3BlbiBzdGF0ZS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wZXJ0eSBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3BlcnR5IGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcGVydHkgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuU2VsZWN0Lm11aU5hbWUgPSAnU2VsZWN0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KFNlbGVjdCkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuaW1wb3J0IElucHV0TGFiZWwgZnJvbSAnLi4vSW5wdXRMYWJlbCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1IZWxwZXJUZXh0IGZyb20gJy4uL0Zvcm1IZWxwZXJUZXh0JztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbnZhciB2YXJpYW50Q29tcG9uZW50ID0ge1xuICBzdGFuZGFyZDogSW5wdXQsXG4gIGZpbGxlZDogRmlsbGVkSW5wdXQsXG4gIG91dGxpbmVkOiBPdXRsaW5lZElucHV0XG59O1xudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge31cbn07XG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtGb3JtQ29udHJvbF0oL2FwaS9mb3JtLWNvbnRyb2wvKVxuICogLSBbSW5wdXRMYWJlbF0oL2FwaS9pbnB1dC1sYWJlbC8pXG4gKiAtIFtGaWxsZWRJbnB1dF0oL2FwaS9maWxsZWQtaW5wdXQvKVxuICogLSBbT3V0bGluZWRJbnB1dF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8pXG4gKiAtIFtJbnB1dF0oL2FwaS9pbnB1dC8pXG4gKiAtIFtGb3JtSGVscGVyVGV4dF0oL2FwaS9mb3JtLWhlbHBlci10ZXh0LylcbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBhbHRlciB0aGUgcHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHlvdSBjYW4gZG8gc28gYXMgZm9sbG93czpcbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IGlucHV0UHJvcHMgPSB7XG4gKiAgIHN0ZXA6IDMwMCxcbiAqIH07XG4gKlxuICogcmV0dXJuIDxUZXh0RmllbGQgaWQ9XCJ0aW1lXCIgdHlwZT1cInRpbWVcIiBpbnB1dFByb3BzPXtpbnB1dFByb3BzfSAvPjtcbiAqIGBgYFxuICpcbiAqIEZvciBhZHZhbmNlZCBjYXNlcywgcGxlYXNlIGxvb2sgYXQgdGhlIHNvdXJjZSBvZiBUZXh0RmllbGQgYnkgY2xpY2tpbmcgb24gdGhlXG4gKiBcIkVkaXQgdGhpcyBwYWdlXCIgYnV0dG9uIGFib3ZlLiBDb25zaWRlciBlaXRoZXI6XG4gKlxuICogLSB1c2luZyB0aGUgdXBwZXIgY2FzZSBwcm9wcyBmb3IgcGFzc2luZyB2YWx1ZXMgZGlyZWN0bHkgdG8gdGhlIGNvbXBvbmVudHNcbiAqIC0gdXNpbmcgdGhlIHVuZGVybHlpbmcgY29tcG9uZW50cyBkaXJlY3RseSBhcyBzaG93biBpbiB0aGUgZGVtb3NcbiAqL1xuXG52YXIgVGV4dEZpZWxkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0RmllbGQocHJvcHMsIHJlZikge1xuICB2YXIgYXV0b0NvbXBsZXRlID0gcHJvcHMuYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBGb3JtSGVscGVyVGV4dFByb3BzID0gcHJvcHMuRm9ybUhlbHBlclRleHRQcm9wcyxcbiAgICAgIGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGhlbHBlclRleHQgPSBwcm9wcy5oZWxwZXJUZXh0LFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIElucHV0TGFiZWxQcm9wcyA9IHByb3BzLklucHV0TGFiZWxQcm9wcyxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyA9IHByb3BzLklucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIF9wcm9wcyRyZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgcmVxdWlyZWQgPSBfcHJvcHMkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJlcXVpcmVkLFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIF9wcm9wcyRzZWxlY3QgPSBwcm9wcy5zZWxlY3QsXG4gICAgICBzZWxlY3QgPSBfcHJvcHMkc2VsZWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzZWxlY3QsXG4gICAgICBTZWxlY3RQcm9wcyA9IHByb3BzLlNlbGVjdFByb3BzLFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc3RhbmRhcmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZXJyb3JcIiwgXCJGb3JtSGVscGVyVGV4dFByb3BzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGVscGVyVGV4dFwiLCBcImlkXCIsIFwiSW5wdXRMYWJlbFByb3BzXCIsIFwiaW5wdXRQcm9wc1wiLCBcIklucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVxdWlyZWRcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInNlbGVjdFwiLCBcIlNlbGVjdFByb3BzXCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKDApLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBsYWJlbFdpZHRoID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldExhYmVsV2lkdGggPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBsYWJlbFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICAgIHZhciBsYWJlbE5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShsYWJlbFJlZi5jdXJyZW50KTtcbiAgICAgIHNldExhYmVsV2lkdGgobGFiZWxOb2RlICE9IG51bGwgPyBsYWJlbE5vZGUub2Zmc2V0V2lkdGggOiAwKTtcbiAgICB9XG4gIH0sIFt2YXJpYW50LCByZXF1aXJlZF0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFzZWxlY3QgfHwgQm9vbGVhbihjaGlsZHJlbiksICdNYXRlcmlhbC1VSTogYGNoaWxkcmVuYCBtdXN0IGJlIHBhc3NlZCB3aGVuIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgd2l0aCBgc2VsZWN0YC4nKSA6IHZvaWQgMDtcbiAgdmFyIElucHV0TW9yZSA9IHt9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgaWYgKElucHV0TGFiZWxQcm9wcyAmJiB0eXBlb2YgSW5wdXRMYWJlbFByb3BzLnNocmluayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIElucHV0TW9yZS5ub3RjaGVkID0gSW5wdXRMYWJlbFByb3BzLnNocmluaztcbiAgICB9XG5cbiAgICBJbnB1dE1vcmUubGFiZWxXaWR0aCA9IGxhYmVsV2lkdGg7XG4gIH1cblxuICB2YXIgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1oZWxwZXItdGV4dFwiKSA6IHVuZGVmaW5lZDtcbiAgdmFyIElucHV0Q29tcG9uZW50ID0gdmFyaWFudENvbXBvbmVudFt2YXJpYW50XTtcbiAgdmFyIElucHV0RWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcm93czogcm93cyxcbiAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlkOiBpZCxcbiAgICBpbnB1dFJlZjogaW5wdXRSZWYsXG4gICAgb25CbHVyOiBvbkJsdXIsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGlucHV0UHJvcHM6IGlucHV0UHJvcHNcbiAgfSwgSW5wdXRNb3JlLCBJbnB1dFByb3BzKSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCksXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIHJlZjogcmVmLFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH0sIG90aGVyKSwgbGFiZWwgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dExhYmVsLCBfZXh0ZW5kcyh7XG4gICAgaHRtbEZvcjogaWQsXG4gICAgcmVmOiBsYWJlbFJlZlxuICB9LCBJbnB1dExhYmVsUHJvcHMpLCBsYWJlbCksIHNlbGVjdCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGhlbHBlclRleHRJZCxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgaW5wdXQ6IElucHV0RWxlbWVudFxuICB9LCBTZWxlY3RQcm9wcyksIGNoaWxkcmVuKSA6IElucHV0RWxlbWVudCwgaGVscGVyVGV4dCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1IZWxwZXJUZXh0LCBfZXh0ZW5kcyh7XG4gICAgaWQ6IGhlbHBlclRleHRJZFxuICB9LCBGb3JtSGVscGVyVGV4dFByb3BzKSwgaGVscGVyVGV4dCkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0RmllbGQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgRm9ybUhlbHBlclRleHRgXSgvYXBpL2Zvcm0taGVscGVyLXRleHQvKSBlbGVtZW50LlxuICAgKi9cbiAgRm9ybUhlbHBlclRleHRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaGVscGVyIHRleHQgY29udGVudC5cbiAgICovXG4gIGhlbHBlclRleHQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogVXNlIHRoaXMgcHJvcGVydHkgdG8gbWFrZSBgbGFiZWxgIGFuZCBgaGVscGVyVGV4dGAgYWNjZXNzaWJsZSBmb3Igc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYElucHV0TGFiZWxgXSgvYXBpL2lucHV0LWxhYmVsLykgZWxlbWVudC5cbiAgICovXG4gIElucHV0TGFiZWxQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBJbnB1dCBlbGVtZW50LlxuICAgKiBJdCB3aWxsIGJlIGEgW2BGaWxsZWRJbnB1dGBdKC9hcGkvZmlsbGVkLWlucHV0LyksXG4gICAqIFtgT3V0bGluZWRJbnB1dGBdKC9hcGkvb3V0bGluZWQtaW5wdXQvKSBvciBbYElucHV0YF0oL2FwaS9pbnB1dC8pXG4gICAqIGNvbXBvbmVudCBkZXBlbmRpbmcgb24gdGhlIGB2YXJpYW50YCBwcm9wIHZhbHVlLlxuICAgKi9cbiAgSW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgY29udGVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdkZW5zZScsICdub3JtYWwnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQgaW5zdGVhZCBvZiBhbiBpbnB1dC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgYXMgcmVxdWlyZWQgYW5kIHRoZSBgaW5wdXRgIGVsZW1lbnRgIHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudCB3aGlsZSBwYXNzaW5nIHRoZSBJbnB1dCBlbGVtZW50IHRvIGBTZWxlY3RgIGFzIGBpbnB1dGAgcGFyYW1ldGVyLlxuICAgKiBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgeW91IG11c3QgcGFzcyB0aGUgb3B0aW9ucyBvZiB0aGUgc2VsZWN0IGFzIGNoaWxkcmVuLlxuICAgKi9cbiAgc2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRleHRGaWVsZCdcbn0pKFRleHRGaWVsZCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgbGluZUhlaWdodDogMS43NVxuICAgIH0sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBFbnN1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge1xuICAgICAgcGFkZGluZzogJzZweCA4cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIHRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgcGFkZGluZzogJzVweCAxNnB4JyxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJyksXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBvdXRsaW5lZFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgb3V0bGluZWRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdLFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH0sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF1cbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbnRhaW5lZFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5kYXJrLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb250YWluZWRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5kYXJrLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIEJ1dHRvbkJhc2Ugcm9vdCBlbGVtZW50IGlmIHRoZSBidXR0b24gaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgICBmb2N1c1Zpc2libGU6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgYm9yZGVyQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICc0cHggOHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBzaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc4cHggMjRweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG59O1xudmFyIEJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcImZ1bGxXaWR0aFwiLCBcInNpemVcIiwgXCJ0eXBlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHRleHQgPSB2YXJpYW50ID09PSAndGV4dCc7XG4gIHZhciBvdXRsaW5lZCA9IHZhcmlhbnQgPT09ICdvdXRsaW5lZCc7XG4gIHZhciBjb250YWluZWQgPSB2YXJpYW50ID09PSAnY29udGFpbmVkJztcbiAgdmFyIHByaW1hcnkgPSBjb2xvciA9PT0gJ3ByaW1hcnknO1xuICB2YXIgc2Vjb25kYXJ5ID0gY29sb3IgPT09ICdzZWNvbmRhcnknO1xuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIHRleHQgJiYgW2NsYXNzZXMudGV4dCwgcHJpbWFyeSAmJiBjbGFzc2VzLnRleHRQcmltYXJ5LCBzZWNvbmRhcnkgJiYgY2xhc3Nlcy50ZXh0U2Vjb25kYXJ5XSwgb3V0bGluZWQgJiYgW2NsYXNzZXMub3V0bGluZWQsIHByaW1hcnkgJiYgY2xhc3Nlcy5vdXRsaW5lZFByaW1hcnksIHNlY29uZGFyeSAmJiBjbGFzc2VzLm91dGxpbmVkU2Vjb25kYXJ5XSwgY29udGFpbmVkICYmIFtjbGFzc2VzLmNvbnRhaW5lZCwgcHJpbWFyeSAmJiBjbGFzc2VzLmNvbnRhaW5lZFByaW1hcnksIHNlY29uZGFyeSAmJiBjbGFzc2VzLmNvbnRhaW5lZFNlY29uZGFyeV0sIHNpemUgIT09ICdtZWRpdW0nICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCBjb2xvciA9PT0gJ2luaGVyaXQnICYmIGNsYXNzZXMuY29sb3JJbmhlcml0KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICogYGRpc2FibGVSaXBwbGVgIG11c3QgYWxzbyBiZSB0cnVlLlxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYGZvY3VzVmlzaWJsZUNsYXNzTmFtZWAuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsndGV4dCcsICdvdXRsaW5lZCcsICdjb250YWluZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uJ1xufSkoQnV0dG9uKTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5cbmZ1bmN0aW9uIFRhYkNvbnRhaW5lciAocHJvcHMpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9XCJkaXZcIiBzdHlsZT17eyBwYWRkaW5nOiA4ICogMyB9fT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICk7XG59XG5UYWJDb250YWluZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkXG59O1xuZXhwb3J0IGRlZmF1bHQgVGFiQ29udGFpbmVyO1xuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUYWJzIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYnMnO1xuaW1wb3J0IFRhYiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWInO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyJztcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Db250YWluZXInO1xuaW1wb3J0IEJveCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Cb3gnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RleHRGaWVsZCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCAnQ29tcG9uZW50cy9Mb2dpblNjcmVlbi9Mb2dpblNjcmVlbi5jc3MnO1xuXG5pbXBvcnQgVGFiQ29udGFpbmVyIGZyb20gJ0NvbXBvbmVudHMvVGFiQ29udGFpbmVyL1RhYkNvbnRhaW5lcic7XG5cbmNvbnN0IEFETUlOX1BBU1NXT1JEID0gJ2FzZGYnO1xuXG5jb25zdCBsb2dpbkFkbWluID0gKHBhc3N3b3JkKSA9PiB7XG4gIGlmIChwYXNzd29yZCA9PT0gQURNSU5fUEFTU1dPUkQpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvYWRtaW4tZGFzaGJvYXJkJztcbiAgfSBlbHNlIHtcbiAgICBhbGVydCgnUGFzc3dvcmQgc2FsYWgnKTtcbiAgfVxufTtcblxuY2xhc3MgTG9naW5TY3JlZW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGFiVmFsdWU6IDAsXG4gICAgICB1c2VybmFtZTogJycsXG4gICAgICBwYXNzd29yZDogJycsXG4gICAgfTtcbiAgICB0aGlzLmNoYW5nZVRhYlZhbHVlID0gdGhpcy5jaGFuZ2VUYWJWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hhbmdlVXNlcm5hbWVWYWx1ZSA9IHRoaXMuY2hhbmdlVXNlcm5hbWVWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hhbmdlUGFzc3dvcmRWYWx1ZSA9IHRoaXMuY2hhbmdlUGFzc3dvcmRWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9naW5CdXR0b25DbGlja0hhbmRsZXIgPSB0aGlzLmxvZ2luQnV0dG9uQ2xpY2tIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBjaGFuZ2VUYWJWYWx1ZShldmVudCwgbmV3VmFsdWUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdGFiVmFsdWU6IG5ld1ZhbHVlIH0pO1xuICB9XG5cbiAgY2hhbmdlVXNlcm5hbWVWYWx1ZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB1c2VybmFtZTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgY2hhbmdlUGFzc3dvcmRWYWx1ZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBwYXNzd29yZDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgbG9naW5CdXR0b25DbGlja0hhbmRsZXIoKSB7XG4gICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIHRhYlZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuICAgIHN3aXRjaCAodGFiVmFsdWUpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gTG9naW4gcGViaXNuaXNcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIExvZ2luIHByb21vdG9yXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICAvLyBMb2dpbiBhZG1pblxuICAgICAgICBsb2dpbkFkbWluKHBhc3N3b3JkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0YWJWYWx1ZSwgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIkxvZ2luU2NyZWVuXCI+XG4gICAgICAgIDxHcmlkXG4gICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgZGlyZWN0aW9uPVwicm93XCJcbiAgICAgICAgICBqdXN0aWZ5PVwiY2VudGVyXCJcbiAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICBzcGFjaW5nPXswfVxuICAgICAgICA+XG4gICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9PlxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPVwiSGVhZGVyXCIgdmFyaWFudD1cImgxXCIgY29tcG9uZW50PVwiaDJcIj5cbiAgICAgICAgICAgICAgICBWSVJBTElOXG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfT48YnIgLz48L0dyaWQ+XG4gICAgICAgICAgPEdyaWQgaXRlbSB4cz17M30gLz5cbiAgICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0gc209ezZ9PlxuICAgICAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT1cIlBhcGVyXCI+XG4gICAgICAgICAgICAgICAgPFRhYnNcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0YWJWYWx1ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZVRhYlZhbHVlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxUYWIgbGFiZWw9XCJBa3VuIEJpc25pc1wiIC8+XG4gICAgICAgICAgICAgICAgICA8VGFiIGxhYmVsPVwiQWt1biBQcm9tb3RvclwiIC8+XG4gICAgICAgICAgICAgICAgICA8VGFiIGxhYmVsPVwiQWt1biBBZG1pblwiIC8+XG4gICAgICAgICAgICAgICAgPC9UYWJzPlxuICAgICAgICAgICAgICAgIDxUYWJDb250YWluZXI+XG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICh0YWJWYWx1ZSA9PT0gMCB8fCB0YWJWYWx1ZSA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJmaWxsZWQtdXNlcm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJVc2VybmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dXNlcm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VVc2VybmFtZVZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJmaWxsZWQtcGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZVBhc3N3b3JkVmFsdWV9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5sb2dpbkJ1dHRvbkNsaWNrSGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPkxvZ2luPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICh0YWJWYWx1ZSA9PT0gMCB8fCB0YWJWYWx1ZSA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgPEJveCBjb21wb25lbnQ9XCJzcGFuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvZm9yZ290LXBhc3N3b3JkXCIgY2xhc3NOYW1lPVwiQnV0dG9uXCI+Rm9yZ290IFBhc3N3b3JkPzwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyB8ICZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvcmVnaXN0ZXJcIiBjbGFzc05hbWU9XCJCdXR0b25cIj5SZWdpc3RlcjwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9UYWJDb250YWluZXI+XG4gICAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAodGFiVmFsdWUgPT09IDAgfHwgdGFiVmFsdWUgPT09IDEpXG4gICAgICAgICAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICBQcm9tb3NpPyBWaXJhbGluIGFqYWFhLi5cbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgPEdyaWQgaXRlbSB4cz17M30gLz5cbiAgICAgICAgPC9HcmlkPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2dpblNjcmVlbjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB3aXRoRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL3dpdGhGb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgaGVpZ2h0OiAnMC4wMWVtJyxcbiAgICAvLyBGaXggSUUgMTEgZmxleGJveCBhbGlnbm1lbnQuIFRvIHJlbW92ZSBhdCBzb21lIHBvaW50LlxuICAgIG1heEhlaWdodDogJzJlbScsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICBmaWxsZWQ6IHtcbiAgICAnJiRwb3NpdGlvblN0YXJ0Jzoge1xuICAgICAgbWFyZ2luVG9wOiAxNlxuICAgIH1cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXJ0XCJgLiAqL1xuICBwb3NpdGlvblN0YXJ0OiB7XG4gICAgbWFyZ2luUmlnaHQ6IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImVuZFwiYC4gKi9cbiAgcG9zaXRpb25FbmQ6IHtcbiAgICBtYXJnaW5MZWZ0OiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVBvaW50ZXJFdmVudHM9dHJ1ZWAuICovXG4gIGRpc2FibGVQb2ludGVyRXZlbnRzOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH1cbn07XG52YXIgSW5wdXRBZG9ybm1lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0QWRvcm5tZW50KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvaW50ZXIgPSBwcm9wcy5kaXNhYmxlUG9pbnRlckV2ZW50cyxcbiAgICAgIGRpc2FibGVQb2ludGVyRXZlbnRzID0gX3Byb3BzJGRpc2FibGVQb2ludGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9pbnRlcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlVHlwb2dyYSA9IHByb3BzLmRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBfcHJvcHMkZGlzYWJsZVR5cG9ncmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUeXBvZ3JhLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBwcm9wcy5tdWlGb3JtQ29udHJvbCxcbiAgICAgIHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICB2YXJpYW50UHJvcCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVBvaW50ZXJFdmVudHNcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcIm11aUZvcm1Db250cm9sXCIsIFwicG9zaXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgdmFyaWFudCA9IHZhcmlhbnRQcm9wO1xuXG4gIGlmICh2YXJpYW50UHJvcCAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFyaWFudFByb3AgIT09IG11aUZvcm1Db250cm9sLnZhcmlhbnQsICdNYXRlcmlhbC1VSTogVGhlIGBJbnB1dEFkb3JubWVudGAgdmFyaWFudCBpbmZlcnMgdGhlIHZhcmlhbnQgcHJvcGVydHkgJyArICd5b3UgZG8gbm90IGhhdmUgdG8gcHJvdmlkZSBvbmUuJykgOiB2b2lkIDA7XG4gIH1cblxuICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgIXZhcmlhbnQpIHtcbiAgICB2YXJpYW50ID0gbXVpRm9ybUNvbnRyb2wudmFyaWFudDtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ID09PSAnZmlsbGVkJyAmJiBjbGFzc2VzLmZpbGxlZCwgcG9zaXRpb24gPT09ICdzdGFydCcgJiYgY2xhc3Nlcy5wb3NpdGlvblN0YXJ0LCBwb3NpdGlvbiA9PT0gJ2VuZCcgJiYgY2xhc3Nlcy5wb3NpdGlvbkVuZCwgZGlzYWJsZVBvaW50ZXJFdmVudHMgJiYgY2xhc3Nlcy5kaXNhYmxlUG9pbnRlckV2ZW50cyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnICYmICFkaXNhYmxlVHlwb2dyYXBoeSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwge1xuICAgIGNvbG9yOiBcInRleHRTZWNvbmRhcnlcIlxuICB9LCBjaGlsZHJlbikgOiBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEFkb3JubWVudC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBhbiBgSWNvbkJ1dHRvbmAgb3Igc3RyaW5nLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgcG9pbnRlciBldmVudHMgb24gdGhlIHJvb3QuXG4gICAqIFRoaXMgYWxsb3dzIGZvciB0aGUgY29udGVudCBvZiB0aGUgYWRvcm5tZW50IHRvIGZvY3VzIHRoZSBpbnB1dCBvbiBjbGljay5cbiAgICovXG4gIGRpc2FibGVQb2ludGVyRXZlbnRzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgY2hpbGRyZW4gaXMgYSBzdHJpbmcgdGhlbiBkaXNhYmxlIHdyYXBwaW5nIGluIGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11aUZvcm1Db250cm9sOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb24gdGhpcyBhZG9ybm1lbnQgc2hvdWxkIGFwcGVhciByZWxhdGl2ZSB0byB0aGUgYElucHV0YC5cbiAgICovXG4gIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogTm90ZTogSWYgeW91IGFyZSB1c2luZyB0aGUgYFRleHRGaWVsZGAgY29tcG9uZW50IG9yIHRoZSBgRm9ybUNvbnRyb2xgIGNvbXBvbmVudFxuICAgKiB5b3UgZG8gbm90IGhhdmUgdG8gc2V0IHRoaXMgbWFudWFsbHkuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRBZG9ybm1lbnQnXG59KSh3aXRoRm9ybUNvbnRyb2xDb250ZXh0KElucHV0QWRvcm5tZW50KSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvaGVscGVycyc7XG52YXIgU0laRSA9IDQ0O1xuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVZhbHVlKHZhbHVlLCBtaW4sIG1heCkge1xuICB2YXIgY2xhbXBlZFZhbHVlID0gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG4gIHJldHVybiAoY2xhbXBlZFZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xufVxuXG5mdW5jdGlvbiBlYXNlT3V0KHQpIHtcbiAgdCA9IGdldFJlbGF0aXZlVmFsdWUodCwgMCwgMSk7IC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dyZS8xNjUwMjk0XG5cbiAgdCA9ICh0IC09IDEpICogdCAqIHQgKyAxO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gZWFzZUluKHQpIHtcbiAgcmV0dXJuIHQgKiB0O1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBsaW5lSGVpZ2h0OiAxIC8vIEtlZXAgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN0YXRpY1wiYC4gKi9cbiAgICBzdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImluZGV0ZXJtaW5hdGVcImAuICovXG4gICAgaW5kZXRlcm1pbmF0ZToge1xuICAgICAgYW5pbWF0aW9uOiAnbXVpLXByb2dyZXNzLWNpcmN1bGFyLXJvdGF0ZSAxLjRzIGxpbmVhciBpbmZpbml0ZScsXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRtdWktcHJvZ3Jlc3MtY2lyY3VsYXItcm90YXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgc3ZnYCBlbGVtZW50LiAqL1xuICAgIHN2Zzoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGguICovXG4gICAgY2lyY2xlOiB7XG4gICAgICBzdHJva2U6ICdjdXJyZW50Q29sb3InIC8vIFVzZSBidXR0IHRvIGZvbGxvdyB0aGUgc3BlY2lmaWNhdGlvbiwgYnkgY2hhbmNlLCBpdCdzIGFscmVhZHkgdGhlIGRlZmF1bHQgQ1NTIHZhbHVlLlxuICAgICAgLy8gc3Ryb2tlTGluZWNhcDogJ2J1dHQnLFxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgdmFyaWFudD1cInN0YXRpY1wiYC4gKi9cbiAgICBjaXJjbGVTdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlXCJgLiAqL1xuICAgIGNpcmNsZUluZGV0ZXJtaW5hdGU6IHtcbiAgICAgIGFuaW1hdGlvbjogJ211aS1wcm9ncmVzcy1jaXJjdWxhci1kYXNoIDEuNHMgZWFzZS1pbi1vdXQgaW5maW5pdGUnLFxuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJsZSBsb2dpYyBiZXR3ZWVuIEpTUyB2OSBhbmQgdjEwLlxuICAgICAgLy8gVG8gcmVtb3ZlIHdpdGggdGhlIHJlbGVhc2Ugb2YgTWF0ZXJpYWwtVUkgdjRcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckbXVpLXByb2dyZXNzLWNpcmN1bGFyLWRhc2gnLFxuICAgICAgLy8gU29tZSBkZWZhdWx0IHZhbHVlIHRoYXQgbG9va3MgZmluZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGtpY2tzIGluLlxuICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnODBweCwgMjAwcHgnLFxuICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCcgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cblxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXByb2dyZXNzLWNpcmN1bGFyLXJvdGF0ZSc6IHtcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMzYwZGVnKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1kYXNoJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJzBweCdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxMDBweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnLTE1cHgnXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHN0cm9rZURhc2hhcnJheTogJzEwMHB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICctMTI1cHgnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY2lyY2xlYCBzdmcgcGF0aCBpZiBgZGlzYWJsZVNocmluaz17dHJ1ZX1gLiAqL1xuICAgIGNpcmNsZURpc2FibGVTaHJpbms6IHtcbiAgICAgIGFuaW1hdGlvbjogJ25vbmUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG52YXIgQ2lyY3VsYXJQcm9ncmVzcyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU2hyaW5rID0gcHJvcHMuZGlzYWJsZVNocmluayxcbiAgICAgIGRpc2FibGVTaHJpbmsgPSBfcHJvcHMkZGlzYWJsZVNocmluayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNocmluayxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gNDAgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGhpY2tuZXNzID0gcHJvcHMudGhpY2tuZXNzLFxuICAgICAgdGhpY2tuZXNzID0gX3Byb3BzJHRoaWNrbmVzcyA9PT0gdm9pZCAwID8gMy42IDogX3Byb3BzJHRoaWNrbmVzcyxcbiAgICAgIF9wcm9wcyR2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFsdWUgPSBfcHJvcHMkdmFsdWUgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkdmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdpbmRldGVybWluYXRlJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVTaHJpbmtcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0aGlja25lc3NcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBjaXJjbGVTdHlsZSA9IHt9O1xuICB2YXIgcm9vdFN0eWxlID0ge307XG4gIHZhciByb290UHJvcHMgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAnc3RhdGljJykge1xuICAgIHZhciBjaXJjdW1mZXJlbmNlID0gMiAqIE1hdGguUEkgKiAoKFNJWkUgLSB0aGlja25lc3MpIC8gMik7XG4gICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gY2lyY3VtZmVyZW5jZS50b0ZpeGVkKDMpO1xuICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG5cbiAgICBpZiAodmFyaWFudCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBcIlwiLmNvbmNhdCgoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyksIFwicHhcIik7XG4gICAgICByb290U3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgtOTBkZWcpJztcbiAgICB9IGVsc2Uge1xuICAgICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IFwiXCIuY29uY2F0KChlYXNlSW4oKDEwMCAtIHZhbHVlKSAvIDEwMCkgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpLCBcInB4XCIpO1xuICAgICAgcm9vdFN0eWxlLnRyYW5zZm9ybSA9IFwicm90YXRlKFwiLmNvbmNhdCgoZWFzZU91dCh2YWx1ZSAvIDcwKSAqIDI3MCkudG9GaXhlZCgzKSwgXCJkZWcpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjbGFzc2VzLmluZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdzdGF0aWMnICYmIGNsYXNzZXMuc3RhdGljKSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9LCByb290U3R5bGUsIHN0eWxlKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdmcsXG4gICAgdmlld0JveDogXCJcIi5jb25jYXQoU0laRSAvIDIsIFwiIFwiKS5jb25jYXQoU0laRSAvIDIsIFwiIFwiKS5jb25jYXQoU0laRSwgXCIgXCIpLmNvbmNhdChTSVpFKVxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5jaXJjbGUsIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjbGFzc2VzLmNpcmNsZUluZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdzdGF0aWMnICYmIGNsYXNzZXMuY2lyY2xlU3RhdGljLCBkaXNhYmxlU2hyaW5rICYmIGNsYXNzZXMuY2lyY2xlRGlzYWJsZVNocmluayksXG4gICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgIGN4OiBTSVpFLFxuICAgIGN5OiBTSVpFLFxuICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlV2lkdGg6IHRoaWNrbmVzc1xuICB9KSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDaXJjdWxhclByb2dyZXNzLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVTaHJpbmsgJiYgcHJvcHMudmFyaWFudCAmJiBwcm9wcy52YXJpYW50ICE9PSAnaW5kZXRlcm1pbmF0ZScpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiB5b3UgaGF2ZSBwcm92aWRlZCB0aGUgYGRpc2FibGVTaHJpbmtgIHByb3BlcnR5ICcgKyAnd2l0aCBhIHZhcmlhbnQgb3RoZXIgdGhhbiBgaW5kZXRlcm1pbmF0ZWAuIFRoaXMgd2lsbCBoYXZlIG5vIGVmZmVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICB0aGlja25lc3M6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIHN0YXRpYyB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdzdGF0aWMnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIGZsaXA6IGZhbHNlXG59KShDaXJjdWxhclByb2dyZXNzKTsiLCJjb25zdCBwcm94eVVybCA9ICdodHRwczovL2NvcnMtYW55d2hlcmUuaGVyb2t1YXBwLmNvbS8nO1xuY29uc3QgdGFyZ2V0VXJsID0gJ2h0dHBzOi8vZGV2LmZhcml6ZG90aWQuY29tL2FwaS9kYWVyYWhpbmRvbmVzaWEvcHJvdmluc2knO1xuY29uc3QgZmV0Y2hQcm92aW5zaUFwaSA9IGZldGNoKHByb3h5VXJsICsgdGFyZ2V0VXJsLCB7XG4gIGNyb3NzRG9tYWluOiB0cnVlLFxuICBtZXRob2Q6ICdHRVQnLFxufSlcbiAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpO1xuZXhwb3J0IGRlZmF1bHQgZmV0Y2hQcm92aW5zaUFwaTtcbiIsImNvbnN0IHByb3h5VXJsID0gJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLyc7XG5jb25zdCB0YXJnZXRVcmwgPSAnaHR0cHM6Ly9kZXYuZmFyaXpkb3RpZC5jb20vYXBpL2RhZXJhaGluZG9uZXNpYS9wcm92aW5zaS8nO1xuY29uc3QgZmV0Y2hLYWJ1cGF0ZW5Lb3RhQXBpID0gaWQgPT4gZmV0Y2goYCR7cHJveHlVcmx9JHt0YXJnZXRVcmx9JHtpZH0va2FidXBhdGVuYCxcbiAge1xuICAgIGNyb3NzRG9tYWluOiB0cnVlLFxuICAgIG1ldGhvZDogJ0dFVCcsXG4gIH0pXG4gIC50aGVuKHJlcyA9PiByZXMuanNvbigpKTtcbmV4cG9ydCBkZWZhdWx0IGZldGNoS2FidXBhdGVuS290YUFwaTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0TGFiZWwnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9TZWxlY3QnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ZpbGxlZElucHV0JztcbmltcG9ydCBJbnB1dEFkb3JubWVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEFkb3JubWVudCc7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DaXJjdWxhclByb2dyZXNzJztcblxuaW1wb3J0IGZldGNoUHJvdmluc2lBcGkgZnJvbSAnQXBpL2ZldGNoUHJvdmluc2lBcGknO1xuaW1wb3J0IGZldGNoS2FidXBhdGVuS290YUFwaSBmcm9tICdBcGkvZmV0Y2hLYWJ1cGF0ZW5Lb3RhQXBpJztcblxuY2xhc3MgUmVnaXN0ZXJTZWxsZXJGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hbWFVc2FoYTogJycsXG4gICAgICBzdWJtaXR0ZWROYW1hVXNhaGE6ICcnLFxuICAgICAgamVuaXNVc2FoYTogJycsXG4gICAgICBzdWJtaXR0ZWRKZW5pc1VzYWhhOiAnJyxcbiAgICAgIG5hbWFQZWJpc25pczogJycsXG4gICAgICBzdWJtaXR0ZWROYW1hUGViaXNuaXM6ICcnLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgc3VibWl0dGVkRW1haWw6ICcnLFxuICAgICAgbm9tb3JUZWxlcG9uOiAnJyxcbiAgICAgIHN1Ym1pdHRlZE5vbW9yVGVsZXBvbjogJycsXG4gICAgICB0ZW1wYXRMYWhpcjogJycsXG4gICAgICBzdWJtaXR0ZWRUZW1wYXRMYWhpcjogJycsXG4gICAgICB0YW5nZ2FsTGFoaXI6ICcnLFxuICAgICAgc3VibWl0dGVkVGFuZ2dhbExhaGlyOiAnJyxcbiAgICAgIGlzTG9hZGluZ1Byb3ZpbnNpOiBmYWxzZSxcbiAgICAgIGlzUHJvdmluc2lMb2FkZWQ6IGZhbHNlLFxuICAgICAgcHJvdmluc2lBcnJheTogW10sXG4gICAgICBwcm92aW5zaTogJycsXG4gICAgICBwcm92aW5zaVZhbHVlOiAwLFxuICAgICAgc3VibWl0dGVkUHJvdmluc2k6ICcnLFxuICAgICAgaXNMb2FkaW5nS2FidXBhdGVuS290YTogZmFsc2UsXG4gICAgICBpc0thYnVwYXRlbktvdGFMb2FkZWQ6IGZhbHNlLFxuICAgICAga2FidXBhdGVuS290YUFycmF5OiBbXSxcbiAgICAgIGthYnVwYXRlbktvdGE6ICcnLFxuICAgICAga2FidXBhdGVuS290YVZhbHVlOiAwLFxuICAgICAgc3VibWl0dGVkS2FidXBhdGVuS290YTogJycsXG4gICAgICBhbGFtYXQ6ICcnLFxuICAgICAgc3VibWl0dGVkQWxhbWF0OiAnJyxcbiAgICAgIHVzZXJuYW1lOiAnJyxcbiAgICAgIHN1Ym1pdHRlZFVzZXJuYW1lOiAnJyxcbiAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uOiAnJyxcbiAgICAgIHN1Ym1pdHRlZFBhc3N3b3JkOiAnJyxcbiAgICB9O1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoYW5nZVRhbmdnYWxMYWhpclZhbHVlID0gdGhpcy5jaGFuZ2VUYW5nZ2FsTGFoaXJWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hhbmdlUHJvdmluc2lWYWx1ZSA9IHRoaXMuY2hhbmdlUHJvdmluc2lWYWx1ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hhbmdlS2FidXBhdGVuS290YVZhbHVlID0gdGhpcy5jaGFuZ2VLYWJ1cGF0ZW5Lb3RhVmFsdWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlID0gdGhpcy5oYW5kbGVJbnB1dENoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5mZXRjaFByb3ZpbnNpKCk7XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1hVXNhaGEsXG4gICAgICBqZW5pc1VzYWhhLFxuICAgICAgbmFtYVBlYmlzbmlzLFxuICAgICAgZW1haWwsXG4gICAgICBub21vclRlbGVwb24sXG4gICAgICB0ZW1wYXRMYWhpcixcbiAgICAgIHRhbmdnYWxMYWhpcixcbiAgICAgIHByb3ZpbnNpLFxuICAgICAga2FidXBhdGVuS290YSxcbiAgICAgIGFsYW1hdCxcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBwYXNzd29yZENvbmZpcm1hdGlvbixcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChwYXNzd29yZCA9PT0gcGFzc3dvcmRDb25maXJtYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdWJtaXR0ZWROYW1hVXNhaGE6IG5hbWFVc2FoYSxcbiAgICAgICAgc3VibWl0dGVkSmVuaXNVc2FoYTogamVuaXNVc2FoYSxcbiAgICAgICAgc3VibWl0dGVkTmFtYVBlYmlzbmlzOiBuYW1hUGViaXNuaXMsXG4gICAgICAgIHN1Ym1pdHRlZEVtYWlsOiBlbWFpbCxcbiAgICAgICAgc3VibWl0dGVkTm9tb3JUZWxlcG9uOiBub21vclRlbGVwb24sXG4gICAgICAgIHN1Ym1pdHRlZFRlbXBhdExhaGlyOiB0ZW1wYXRMYWhpcixcbiAgICAgICAgc3VibWl0dGVkVGFuZ2dhbExhaGlyOiB0YW5nZ2FsTGFoaXIsXG4gICAgICAgIHN1Ym1pdHRlZFByb3ZpbnNpOiBwcm92aW5zaSxcbiAgICAgICAgc3VibWl0dGVkS2FidXBhdGVuS290YToga2FidXBhdGVuS290YSxcbiAgICAgICAgc3VibWl0dGVkQWxhbWF0OiBhbGFtYXQsXG4gICAgICAgIHN1Ym1pdHRlZFVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgc3VibWl0dGVkUGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc3VibWl0dGVkTmFtYVVzYWhhLFxuICAgICAgICAgIHN1Ym1pdHRlZEplbmlzVXNhaGEsXG4gICAgICAgICAgc3VibWl0dGVkTmFtYVBlYmlzbmlzLFxuICAgICAgICAgIHN1Ym1pdHRlZEVtYWlsLFxuICAgICAgICAgIHN1Ym1pdHRlZE5vbW9yVGVsZXBvbixcbiAgICAgICAgICBzdWJtaXR0ZWRUZW1wYXRMYWhpcixcbiAgICAgICAgICBzdWJtaXR0ZWRUYW5nZ2FsTGFoaXIsXG4gICAgICAgICAgc3VibWl0dGVkUHJvdmluc2ksXG4gICAgICAgICAgc3VibWl0dGVkS2FidXBhdGVuS290YSxcbiAgICAgICAgICBzdWJtaXR0ZWRBbGFtYXQsXG4gICAgICAgICAgc3VibWl0dGVkVXNlcm5hbWUsXG4gICAgICAgICAgc3VibWl0dGVkUGFzc3dvcmQsXG4gICAgICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBzdWJtaXR0ZWQgPSB7XG4gICAgICAgICAgbmFtYVVzYWhhOiBzdWJtaXR0ZWROYW1hVXNhaGEsXG4gICAgICAgICAgamVuaXNVc2FoYTogc3VibWl0dGVkSmVuaXNVc2FoYSxcbiAgICAgICAgICBuYW1hUGViaXNuaXM6IHN1Ym1pdHRlZE5hbWFQZWJpc25pcyxcbiAgICAgICAgICBlbWFpbDogc3VibWl0dGVkRW1haWwsXG4gICAgICAgICAgbm9tb3JUZWxlcG9uOiBzdWJtaXR0ZWROb21vclRlbGVwb24sXG4gICAgICAgICAgYWxhbWF0OiBzdWJtaXR0ZWRBbGFtYXQsXG4gICAgICAgICAgcHJvdmluc2k6IHN1Ym1pdHRlZFByb3ZpbnNpLFxuICAgICAgICAgIGthYnVwYXRlbktvdGE6IHN1Ym1pdHRlZEthYnVwYXRlbktvdGEsXG4gICAgICAgICAgdGVtcGF0TGFoaXI6IHN1Ym1pdHRlZFRlbXBhdExhaGlyLFxuICAgICAgICAgIHRhbmdnYWxMYWhpcjogc3VibWl0dGVkVGFuZ2dhbExhaGlyLFxuICAgICAgICAgIHVzZXJuYW1lOiBzdWJtaXR0ZWRVc2VybmFtZSxcbiAgICAgICAgICBwYXNzd29yZDogc3VibWl0dGVkUGFzc3dvcmQsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUudGFibGUoc3VibWl0dGVkKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygncGFzc3dvcmQgbm90IG1hdGNoJyk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlSW5wdXRDaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zdCB7IHZhbHVlLCBuYW1lIH0gPSBldmVudC50YXJnZXQ7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbbmFtZV06IHZhbHVlLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlVGFuZ2dhbExhaGlyVmFsdWUoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdGFuZ2dhbExhaGlyOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICBjaGFuZ2VQcm92aW5zaVZhbHVlKGV2ZW50KSB7XG4gICAgdGhpcy5mZXRjaEthYnVwYXRlbktvdGEoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHByb3ZpbnNpOiBldmVudC50YXJnZXQub3B0aW9uc1tldmVudC50YXJnZXQuc2VsZWN0ZWRJbmRleF0udGV4dCxcbiAgICAgIHByb3ZpbnNpVmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZUthYnVwYXRlbktvdGFWYWx1ZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAga2FidXBhdGVuS290YTogZXZlbnQudGFyZ2V0Lm9wdGlvbnNbZXZlbnQudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnRleHQsXG4gICAgICBrYWJ1cGF0ZW5Lb3RhVmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGZldGNoUHJvdmluc2koKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZ1Byb3ZpbnNpOiB0cnVlIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBmZXRjaFByb3ZpbnNpQXBpO1xuICAgIGRhdGEudGhlbihcbiAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNQcm92aW5zaUxvYWRlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByb3ZpbnNpQXJyYXk6IHJlc3VsdC5zZW11YXByb3ZpbnNpLCBpc0xvYWRpbmdQcm92aW5zaTogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgZmV0Y2hLYWJ1cGF0ZW5Lb3RhKGlkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZ0thYnVwYXRlbktvdGE6IHRydWUgfSk7XG4gICAgY29uc3QgZGF0YSA9IGZldGNoS2FidXBhdGVuS290YUFwaShpZCk7XG4gICAgZGF0YS50aGVuKFxuICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0thYnVwYXRlbktvdGFMb2FkZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3VsdC5lcnJvcikge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBrYWJ1cGF0ZW5Lb3RhQXJyYXk6IHJlc3VsdC5rYWJ1cGF0ZW5zLCBpc0xvYWRpbmdLYWJ1cGF0ZW5Lb3RhOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBnb1RvRGFzaGJvYXJkKCkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gXCIvc2VsbGVyLWRhc2hib2FyZFwiO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWFVc2FoYSxcbiAgICAgIGplbmlzVXNhaGEsXG4gICAgICBuYW1hUGViaXNuaXMsXG4gICAgICBlbWFpbCxcbiAgICAgIG5vbW9yVGVsZXBvbixcbiAgICAgIHRlbXBhdExhaGlyLFxuICAgICAgdGFuZ2dhbExhaGlyLFxuICAgICAgaXNMb2FkaW5nUHJvdmluc2ksXG4gICAgICBpc1Byb3ZpbnNpTG9hZGVkLFxuICAgICAgcHJvdmluc2lWYWx1ZSxcbiAgICAgIHByb3ZpbnNpQXJyYXksXG4gICAgICBpc0xvYWRpbmdLYWJ1cGF0ZW5Lb3RhLFxuICAgICAgaXNLYWJ1cGF0ZW5Lb3RhTG9hZGVkLFxuICAgICAga2FidXBhdGVuS290YVZhbHVlLFxuICAgICAga2FidXBhdGVuS290YUFycmF5LFxuICAgICAgYWxhbWF0LFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHByb3ZpbnNpcyA9IHByb3ZpbnNpQXJyYXkubWFwKGkgPT4gPG9wdGlvbiBrZXk9e2kuaWR9IHZhbHVlPXtpLmlkfT57aS5uYW1hfTwvb3B0aW9uPik7XG4gICAgY29uc3Qga2FidXBhdGVuS290YXMgPSBrYWJ1cGF0ZW5Lb3RhQXJyYXkubWFwKFxuICAgICAgaSA9PiA8b3B0aW9uIGtleT17aS5pZH0gdmFsdWU9e2kuaWR9PntpLm5hbWF9PC9vcHRpb24+LFxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPlJlZ2lzdHJhc2kgQWt1biBCaXNuaXM8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtbmFtYXVzYWhhXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTmFtYSBVc2FoYVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cIm5hbWFVc2FoYVwiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXtuYW1hVXNhaGF9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGlkPVwiZmlsbGVkLWplbmlzdXNhaGFcIlxuICAgICAgICAgICAgbGFiZWw9XCJKZW5pcyBVc2FoYVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cImplbmlzVXNhaGFcIlxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICB2YWx1ZT17amVuaXNVc2FoYX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtbmFtYXBlYmlzbmlzXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTmFtYSBQZWJpc25pc1wiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cIm5hbWFQZWJpc25pc1wiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXtuYW1hUGViaXNuaXN9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj5JbmZvcm1hc2kgS29udGFrPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGlkPVwiZmlsbGVkLWVtYWlsLWlucHV0XCJcbiAgICAgICAgICAgIGxhYmVsPVwiRW1haWxcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwiZW1haWxcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICB2YWx1ZT17ZW1haWx9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGlkPVwiZmlsbGVkLW5vbW9yVGVsZXBvblwiXG4gICAgICAgICAgICBsYWJlbD1cIk5vbW9yIFRlbGVwb25cIlxuICAgICAgICAgICAgbmFtZT1cIm5vbW9yVGVsZXBvblwiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXtub21vclRlbGVwb259XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIElucHV0TGFiZWxQcm9wcz17e1xuICAgICAgICAgICAgICBzaHJpbms6IHRydWUsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICBzdGFydEFkb3JubWVudDogPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwic3RhcnRcIj4rNjI8L0lucHV0QWRvcm5tZW50PixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1hbGFtYXRcIlxuICAgICAgICAgICAgbGFiZWw9XCJBbGFtYXQgVGluZ2dhbFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cImFsYW1hdFwiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXthbGFtYXR9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIHsgaXNMb2FkaW5nUHJvdmluc2kgJiYgKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3MgLz5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+TWVuZ2FtYmlsIGRhdGEgcHJvdmluc2kuLi48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIH1cbiAgICAgICAgICB7IChpc1Byb3ZpbnNpTG9hZGVkICYmICFpc0xvYWRpbmdQcm92aW5zaSlcbiAgICAgICAgICAmJiAoXG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgY2xhc3NOYW1lPVwiRm9ybUNvbnRyb2xcIiB2YXJpYW50PVwiZmlsbGVkXCIgZnVsbFdpZHRoPlxuICAgICAgICAgICAgICA8SW5wdXRMYWJlbCBodG1sRm9yPVwiZmlsbGVkLXByb3ZpbnNpLW5hdGl2ZS1zaW1wbGVcIj5Qcm92aW5zaSBUZW1wYXQgVGluZ2dhbDwvSW5wdXRMYWJlbD5cbiAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgIG5hdGl2ZVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwcm92aW5zaVZhbHVlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZVByb3ZpbnNpVmFsdWV9XG4gICAgICAgICAgICAgICAgaW5wdXQ9ezxGaWxsZWRJbnB1dCBuYW1lPVwiYWdlXCIgaWQ9XCJmaWxsZWQtYWdlLW5hdGl2ZS1zaW1wbGVcIiAvPn1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIiAvPlxuICAgICAgICAgICAgICAgIHsgcHJvdmluc2lzIH1cbiAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgeyBpc0xvYWRpbmdLYWJ1cGF0ZW5Lb3RhICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxDaXJjdWxhclByb2dyZXNzIC8+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5Pk1lbmdhbWJpbCBkYXRhIGthYnVwYXRlbi9rb3RhLi4uPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSB9XG4gICAgICAgICAgeyAoaXNLYWJ1cGF0ZW5Lb3RhTG9hZGVkICYmICFpc0xvYWRpbmdLYWJ1cGF0ZW5Lb3RhKVxuICAgICAgICAgICYmIChcbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJGb3JtQ29udHJvbFwiIHZhcmlhbnQ9XCJmaWxsZWRcIiBmdWxsV2lkdGg+XG4gICAgICAgICAgICAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJmaWxsZWQtcHJvdmluc2ktbmF0aXZlLXNpbXBsZVwiPkthYnVwYXRlbiAvIEtvdGEgVGVtcGF0IFRpbmdnYWw8L0lucHV0TGFiZWw+XG4gICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICBuYXRpdmVcbiAgICAgICAgICAgICAgICB2YWx1ZT17a2FidXBhdGVuS290YVZhbHVlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmNoYW5nZUthYnVwYXRlbktvdGFWYWx1ZX1cbiAgICAgICAgICAgICAgICBpbnB1dD17PEZpbGxlZElucHV0IG5hbWU9XCJhZ2VcIiBpZD1cImZpbGxlZC1hZ2UtbmF0aXZlLXNpbXBsZVwiIC8+fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiIC8+XG4gICAgICAgICAgICAgICAgeyBrYWJ1cGF0ZW5Lb3RhcyB9XG4gICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj5JbmZvcm1hc2kgS2VsYWhpcmFuPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGlkPVwiZmlsbGVkLXRlbXBhdGxhaGlyXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGVtcGF0IExhaGlyXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIlRleHRGaWVsZFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBuYW1lPVwidGVtcGF0TGFoaXJcIlxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICB2YWx1ZT17dGVtcGF0TGFoaXJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGlkPVwiZmlsbGVkdGFuZ2dhbGxhaGlyXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVGFuZ2dhbCBMYWhpclwiXG4gICAgICAgICAgICB0eXBlPVwiZGF0ZVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZSA9IFwidGFuZ2dhbExhaGlyXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgSW5wdXRMYWJlbFByb3BzPXt7XG4gICAgICAgICAgICAgIHNocmluazogdHJ1ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB2YWx1ZT17dGFuZ2dhbExhaGlyfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlVGFuZ2dhbExhaGlyVmFsdWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+SW5mb3JtYXNpIEFrdW48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtdXNlcm5hbWVcIlxuICAgICAgICAgICAgbGFiZWw9XCJVc2VybmFtZVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1wYXNzd29yZC1pbnB1dFwiXG4gICAgICAgICAgICBsYWJlbD1cIlBhc3N3b3JkXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIlRleHRGaWVsZFwiXG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1wYXNzd29yZENvbmZpcm1hdGlvbi1pbnB1dFwiXG4gICAgICAgICAgICBsYWJlbD1cIktvbmZpcm1hc2kgUGFzc3dvcmRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRDb25maXJtYXRpb25cIlxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmRDb25maXJtYXRpb259XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIkJ1dHRvblwiXG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuZ29Ub0Rhc2hib2FyZH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+UmVnaXN0ZXI8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0ZXJTZWxsZXJGb3JtO1xuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RleHRGaWVsZCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2wnO1xuaW1wb3J0IElucHV0TGFiZWwgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvSW5wdXRMYWJlbCc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRmlsbGVkSW5wdXQnO1xuaW1wb3J0IElucHV0QWRvcm5tZW50IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0QWRvcm5tZW50JztcbmltcG9ydCBDaXJjdWxhclByb2dyZXNzIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NpcmN1bGFyUHJvZ3Jlc3MnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IGZldGNoUHJvdmluc2lBcGkgZnJvbSAnQXBpL2ZldGNoUHJvdmluc2lBcGknO1xuaW1wb3J0IGZldGNoS2FidXBhdGVuS290YUFwaSBmcm9tICdBcGkvZmV0Y2hLYWJ1cGF0ZW5Lb3RhQXBpJztcblxuY2xhc3MgUmVnaXN0ZXJQcm9tb3RvckZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbmFtYVByb21vdG9yOiAnJyxcbiAgICAgIHN1Ym1pdHRlZE5hbWFQcm9tb3RvcjogJycsXG4gICAgICBlbWFpbDogJycsXG4gICAgICBzdWJtaXR0ZWRFbWFpbDogJycsXG4gICAgICBmYWNlYm9vazogJycsXG4gICAgICBzdWJtaXR0ZWRGYWNlYm9vazogJycsXG4gICAgICB0d2l0dGVyOiAnJyxcbiAgICAgIHN1Ym1pdHRlZFR3aXR0ZXI6ICcnLFxuICAgICAgaW5zdGFncmFtOiAnJyxcbiAgICAgIHN1Ym1pdHRlZEluc3RhZ3JhbTogJycsXG4gICAgICBub21vclRlbGVwb246ICcnLFxuICAgICAgc3VibWl0dGVkTm9tb3JUZWxlcG9uOiAnJyxcbiAgICAgIHRlbXBhdExhaGlyOiAnJyxcbiAgICAgIHN1Ym1pdHRlZFRlbXBhdExhaGlyOiAnJyxcbiAgICAgIHRhbmdnYWxMYWhpcjogJycsXG4gICAgICBzdWJtaXR0ZWRUYW5nZ2FsTGFoaXI6ICcnLFxuICAgICAgaXNMb2FkaW5nUHJvdmluc2k6IGZhbHNlLFxuICAgICAgaXNQcm92aW5zaUxvYWRlZDogZmFsc2UsXG4gICAgICBwcm92aW5zaUFycmF5OiBbXSxcbiAgICAgIHByb3ZpbnNpOiAnJyxcbiAgICAgIHByb3ZpbnNpVmFsdWU6IDAsXG4gICAgICBzdWJtaXR0ZWRQcm92aW5zaTogJycsXG4gICAgICBpc0xvYWRpbmdLYWJ1cGF0ZW5Lb3RhOiBmYWxzZSxcbiAgICAgIGlzS2FidXBhdGVuS290YUxvYWRlZDogZmFsc2UsXG4gICAgICBrYWJ1cGF0ZW5Lb3RhQXJyYXk6IFtdLFxuICAgICAga2FidXBhdGVuS290YTogJycsXG4gICAgICBrYWJ1cGF0ZW5Lb3RhVmFsdWU6IDAsXG4gICAgICBzdWJtaXR0ZWRLYWJ1cGF0ZW5Lb3RhOiAnJyxcbiAgICAgIGFsYW1hdDogJycsXG4gICAgICBzdWJtaXR0ZWRBbGFtYXQ6ICcnLFxuICAgICAgdXNlcm5hbWU6ICcnLFxuICAgICAgc3VibWl0dGVkVXNlcm5hbWU6ICcnLFxuICAgICAgcGFzc3dvcmQ6ICcnLFxuICAgICAgcGFzc3dvcmRDb25maXJtYXRpb246ICcnLFxuICAgICAgc3VibWl0dGVkUGFzc3dvcmQ6ICcnLFxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UgPSB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGFuZ2VQcm92aW5zaVZhbHVlID0gdGhpcy5jaGFuZ2VQcm92aW5zaVZhbHVlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGFuZ2VLYWJ1cGF0ZW5Lb3RhVmFsdWUgPSB0aGlzLmNoYW5nZUthYnVwYXRlbktvdGFWYWx1ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5mZXRjaFByb3ZpbnNpKCk7XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1hUHJvbW90b3IsXG4gICAgICBlbWFpbCxcbiAgICAgIGZhY2Vib29rLFxuICAgICAgdHdpdHRlcixcbiAgICAgIGluc3RhZ3JhbSxcbiAgICAgIG5vbW9yVGVsZXBvbixcbiAgICAgIHRlbXBhdExhaGlyLFxuICAgICAgdGFuZ2dhbExhaGlyLFxuICAgICAgcHJvdmluc2ksXG4gICAgICBrYWJ1cGF0ZW5Lb3RhLFxuICAgICAgYWxhbWF0LFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHBhc3N3b3JkID09PSBwYXNzd29yZENvbmZpcm1hdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN1Ym1pdHRlZE5hbWFQcm9tb3RvcjogbmFtYVByb21vdG9yLFxuICAgICAgICBzdWJtaXR0ZWRFbWFpbDogZW1haWwsXG4gICAgICAgIHN1Ym1pdHRlZEZhY2Vib29rOiBmYWNlYm9vayxcbiAgICAgICAgc3VibWl0dGVkVHdpdHRlcjogdHdpdHRlcixcbiAgICAgICAgc3VibWl0dGVkSW5zdGFncmFtOiBpbnN0YWdyYW0sXG4gICAgICAgIHN1Ym1pdHRlZE5vbW9yVGVsZXBvbjogbm9tb3JUZWxlcG9uLFxuICAgICAgICBzdWJtaXR0ZWRUZW1wYXRMYWhpcjogdGVtcGF0TGFoaXIsXG4gICAgICAgIHN1Ym1pdHRlZFRhbmdnYWxMYWhpcjogdGFuZ2dhbExhaGlyLFxuICAgICAgICBzdWJtaXR0ZWRQcm92aW5zaTogcHJvdmluc2ksXG4gICAgICAgIHN1Ym1pdHRlZEthYnVwYXRlbktvdGE6IGthYnVwYXRlbktvdGEsXG4gICAgICAgIHN1Ym1pdHRlZEFsYW1hdDogYWxhbWF0LFxuICAgICAgICBzdWJtaXR0ZWRVc2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgIHN1Ym1pdHRlZFBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHN1Ym1pdHRlZE5hbWFQcm9tb3RvcixcbiAgICAgICAgICBzdWJtaXR0ZWRFbWFpbCxcbiAgICAgICAgICBzdWJtaXR0ZWRGYWNlYm9vayxcbiAgICAgICAgICBzdWJtaXR0ZWRUd2l0dGVyLFxuICAgICAgICAgIHN1Ym1pdHRlZEluc3RhZ3JhbSxcbiAgICAgICAgICBzdWJtaXR0ZWROb21vclRlbGVwb24sXG4gICAgICAgICAgc3VibWl0dGVkVGVtcGF0TGFoaXIsXG4gICAgICAgICAgc3VibWl0dGVkVGFuZ2dhbExhaGlyLFxuICAgICAgICAgIHN1Ym1pdHRlZFByb3ZpbnNpLFxuICAgICAgICAgIHN1Ym1pdHRlZEthYnVwYXRlbktvdGEsXG4gICAgICAgICAgc3VibWl0dGVkQWxhbWF0LFxuICAgICAgICAgIHN1Ym1pdHRlZFVzZXJuYW1lLFxuICAgICAgICAgIHN1Ym1pdHRlZFBhc3N3b3JkLFxuICAgICAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3Qgc3VibWl0dGVkID0ge1xuICAgICAgICAgIG5hbWFQcm9tb3Rvcjogc3VibWl0dGVkTmFtYVByb21vdG9yLFxuICAgICAgICAgIGZhY2Vib29rOiBzdWJtaXR0ZWRGYWNlYm9vayxcbiAgICAgICAgICB0d2l0dGVyOiBzdWJtaXR0ZWRUd2l0dGVyLFxuICAgICAgICAgIGluc3RhZ3JhbTogc3VibWl0dGVkSW5zdGFncmFtLFxuICAgICAgICAgIGVtYWlsOiBzdWJtaXR0ZWRFbWFpbCxcbiAgICAgICAgICBub21vclRlbGVwb246IHN1Ym1pdHRlZE5vbW9yVGVsZXBvbixcbiAgICAgICAgICBhbGFtYXQ6IHN1Ym1pdHRlZEFsYW1hdCxcbiAgICAgICAgICBwcm92aW5zaTogc3VibWl0dGVkUHJvdmluc2ksXG4gICAgICAgICAga2FidXBhdGVuS290YTogc3VibWl0dGVkS2FidXBhdGVuS290YSxcbiAgICAgICAgICB0ZW1wYXRMYWhpcjogc3VibWl0dGVkVGVtcGF0TGFoaXIsXG4gICAgICAgICAgdGFuZ2dhbExhaGlyOiBzdWJtaXR0ZWRUYW5nZ2FsTGFoaXIsXG4gICAgICAgICAgdXNlcm5hbWU6IHN1Ym1pdHRlZFVzZXJuYW1lLFxuICAgICAgICAgIHBhc3N3b3JkOiBzdWJtaXR0ZWRQYXNzd29yZCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc29sZS50YWJsZShzdWJtaXR0ZWQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdwYXNzd29yZCBub3QgbWF0Y2gnKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbnB1dENoYW5nZShldmVudCkge1xuICAgIGNvbnN0IHsgdmFsdWUsIG5hbWUgfSA9IGV2ZW50LnRhcmdldDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIFtuYW1lXTogdmFsdWUsXG4gICAgfSk7XG4gIH1cblxuICBjaGFuZ2VQcm92aW5zaVZhbHVlKGV2ZW50KSB7XG4gICAgLy8gZXZlbnQudGFyZ2V0Lm9wdGlvbnNbZXZlbnQudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnRleHRcbiAgICB0aGlzLmZldGNoS2FidXBhdGVuS290YShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcHJvdmluc2k6IGV2ZW50LnRhcmdldC5vcHRpb25zW2V2ZW50LnRhcmdldC5zZWxlY3RlZEluZGV4XS50ZXh0LFxuICAgICAgcHJvdmluc2lWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlS2FidXBhdGVuS290YVZhbHVlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBrYWJ1cGF0ZW5Lb3RhOiBldmVudC50YXJnZXQub3B0aW9uc1tldmVudC50YXJnZXQuc2VsZWN0ZWRJbmRleF0udGV4dCxcbiAgICAgIGthYnVwYXRlbktvdGFWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgIH0pO1xuICB9XG5cbiAgZmV0Y2hQcm92aW5zaSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nUHJvdmluc2k6IHRydWUgfSk7XG4gICAgY29uc3QgZGF0YSA9IGZldGNoUHJvdmluc2lBcGk7XG4gICAgZGF0YS50aGVuKFxuICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1Byb3ZpbnNpTG9hZGVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcHJvdmluc2lBcnJheTogcmVzdWx0LnNlbXVhcHJvdmluc2ksIGlzTG9hZGluZ1Byb3ZpbnNpOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBmZXRjaEthYnVwYXRlbktvdGEoaWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nS2FidXBhdGVuS290YTogdHJ1ZSB9KTtcbiAgICBjb25zdCBkYXRhID0gZmV0Y2hLYWJ1cGF0ZW5Lb3RhQXBpKGlkKTtcbiAgICBkYXRhLnRoZW4oXG4gICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzS2FidXBhdGVuS290YUxvYWRlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGthYnVwYXRlbktvdGFBcnJheTogcmVzdWx0LmthYnVwYXRlbnMsIGlzTG9hZGluZ0thYnVwYXRlbktvdGE6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1hUHJvbW90b3IsXG4gICAgICBlbWFpbCxcbiAgICAgIGZhY2Vib29rLFxuICAgICAgdHdpdHRlcixcbiAgICAgIGluc3RhZ3JhbSxcbiAgICAgIG5vbW9yVGVsZXBvbixcbiAgICAgIHRlbXBhdExhaGlyLFxuICAgICAgdGFuZ2dhbExhaGlyLFxuICAgICAgaXNMb2FkaW5nUHJvdmluc2ksXG4gICAgICBpc1Byb3ZpbnNpTG9hZGVkLFxuICAgICAgcHJvdmluc2lWYWx1ZSxcbiAgICAgIHByb3ZpbnNpQXJyYXksXG4gICAgICBpc0xvYWRpbmdLYWJ1cGF0ZW5Lb3RhLFxuICAgICAgaXNLYWJ1cGF0ZW5Lb3RhTG9hZGVkLFxuICAgICAga2FidXBhdGVuS290YVZhbHVlLFxuICAgICAga2FidXBhdGVuS290YUFycmF5LFxuICAgICAgYWxhbWF0LFxuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHByb3ZpbnNpcyA9IHByb3ZpbnNpQXJyYXkubWFwKGkgPT4gPG9wdGlvbiBrZXk9e2kuaWR9IHZhbHVlPXtpLmlkfT57aS5uYW1hfTwvb3B0aW9uPik7XG4gICAgY29uc3Qga2FidXBhdGVuS290YXMgPSBrYWJ1cGF0ZW5Lb3RhQXJyYXkubWFwKFxuICAgICAgaSA9PiA8b3B0aW9uIGtleT17aS5pZH0gdmFsdWU9e2kuaWR9PntpLm5hbWF9PC9vcHRpb24+LFxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPlJlZ2lzdHJhc2kgQWt1biBQcm9tb3RvcjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1uYW1hUHJvbW90b3JcIlxuICAgICAgICAgICAgbGFiZWw9XCJOYW1hIFByb21vdG9yXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIlRleHRGaWVsZFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBuYW1lPVwibmFtYVByb21vdG9yXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e25hbWFQcm9tb3Rvcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPkluZm9ybWFzaSBLb250YWs8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtZW1haWwtaW5wdXRcIlxuICAgICAgICAgICAgbGFiZWw9XCJFbWFpbFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJlbWFpbFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtbm9tb3JUZWxlcG9uXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTm9tb3IgVGVsZXBvblwiXG4gICAgICAgICAgICBuYW1lPVwibm9tb3JUZWxlcG9uXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e25vbW9yVGVsZXBvbn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgSW5wdXRMYWJlbFByb3BzPXt7XG4gICAgICAgICAgICAgIHNocmluazogdHJ1ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgIHN0YXJ0QWRvcm5tZW50OiA8SW5wdXRBZG9ybm1lbnQgcG9zaXRpb249XCJzdGFydFwiPis2MjwvSW5wdXRBZG9ybm1lbnQ+LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgICB2YXJpYW50PVwiZmlsbGVkXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgIGlkPVwiZmlsbGVkLWFsYW1hdFwiXG4gICAgICAgICAgICBsYWJlbD1cIkFsYW1hdCBUaW5nZ2FsXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIlRleHRGaWVsZFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBuYW1lPVwiYWxhbWF0XCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e2FsYW1hdH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgeyBpc0xvYWRpbmdQcm92aW5zaSAmJiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8Q2lyY3VsYXJQcm9ncmVzcyAvPlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeT5NZW5nYW1iaWwgZGF0YSBwcm92aW5zaS4uLjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkgfVxuICAgICAgICAgIHsgKGlzUHJvdmluc2lMb2FkZWQgJiYgIWlzTG9hZGluZ1Byb3ZpbnNpKVxuICAgICAgICAgICYmIChcbiAgICAgICAgICAgIDxGb3JtQ29udHJvbCBjbGFzc05hbWU9XCJGb3JtQ29udHJvbFwiIHZhcmlhbnQ9XCJmaWxsZWRcIiBmdWxsV2lkdGg+XG4gICAgICAgICAgICAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJmaWxsZWQtcHJvdmluc2ktbmF0aXZlLXNpbXBsZVwiPlByb3ZpbnNpIFRlbXBhdCBUaW5nZ2FsPC9JbnB1dExhYmVsPlxuICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgbmF0aXZlXG4gICAgICAgICAgICAgICAgdmFsdWU9e3Byb3ZpbnNpVmFsdWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlUHJvdmluc2lWYWx1ZX1cbiAgICAgICAgICAgICAgICBpbnB1dD17PEZpbGxlZElucHV0IG5hbWU9XCJhZ2VcIiBpZD1cImZpbGxlZC1hZ2UtbmF0aXZlLXNpbXBsZVwiIC8+fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiIC8+XG4gICAgICAgICAgICAgICAgeyBwcm92aW5zaXMgfVxuICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICB7IGlzTG9hZGluZ0thYnVwYXRlbktvdGEgJiYgKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3MgLz5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+TWVuZ2FtYmlsIGRhdGEga2FidXBhdGVuL2tvdGEuLi48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIH1cbiAgICAgICAgICB7IChpc0thYnVwYXRlbktvdGFMb2FkZWQgJiYgIWlzTG9hZGluZ0thYnVwYXRlbktvdGEpXG4gICAgICAgICAgJiYgKFxuICAgICAgICAgICAgPEZvcm1Db250cm9sIGNsYXNzTmFtZT1cIkZvcm1Db250cm9sXCIgdmFyaWFudD1cImZpbGxlZFwiIGZ1bGxXaWR0aD5cbiAgICAgICAgICAgICAgPElucHV0TGFiZWwgaHRtbEZvcj1cImZpbGxlZC1wcm92aW5zaS1uYXRpdmUtc2ltcGxlXCI+S2FidXBhdGVuIC8gS290YSBUZW1wYXQgVGluZ2dhbDwvSW5wdXRMYWJlbD5cbiAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgIG5hdGl2ZVxuICAgICAgICAgICAgICAgIHZhbHVlPXtrYWJ1cGF0ZW5Lb3RhVmFsdWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlS2FidXBhdGVuS290YVZhbHVlfVxuICAgICAgICAgICAgICAgIGlucHV0PXs8RmlsbGVkSW5wdXQgbmFtZT1cImFnZVwiIGlkPVwiZmlsbGVkLWFnZS1uYXRpdmUtc2ltcGxlXCIgLz59XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCIgLz5cbiAgICAgICAgICAgICAgICB7IGthYnVwYXRlbktvdGFzIH1cbiAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtZmFjZWJvb2tcIlxuICAgICAgICAgICAgbGFiZWw9XCJIYWxhbWFuIEZhY2Vib29rXCJcbiAgICAgICAgICAgIG5hbWU9XCJmYWNlYm9va1wiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXtmYWNlYm9va31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIElucHV0TGFiZWxQcm9wcz17e1xuICAgICAgICAgICAgICBzaHJpbms6IHRydWUsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICBzdGFydEFkb3JubWVudDogPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwic3RhcnRcIj5odHRwczovL3d3dy5mYWNlYm9vay5jb20vPC9JbnB1dEFkb3JubWVudD4sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtdHdpdHRlclwiXG4gICAgICAgICAgICBsYWJlbD1cIkhhbGFtYW4gVHdpdHRlclwiXG4gICAgICAgICAgICBuYW1lPVwidHdpdHRlclwiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXt0d2l0dGVyfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgSW5wdXRMYWJlbFByb3BzPXt7XG4gICAgICAgICAgICAgIHNocmluazogdHJ1ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgIHN0YXJ0QWRvcm5tZW50OiA8SW5wdXRBZG9ybm1lbnQgcG9zaXRpb249XCJzdGFydFwiPkA8L0lucHV0QWRvcm5tZW50PixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1pbnN0YWdyYW1cIlxuICAgICAgICAgICAgbGFiZWw9XCJIYWxhbWFuIEluc3RhZ3JhbVwiXG4gICAgICAgICAgICBuYW1lPVwiaW5zdGFncmFtXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e2luc3RhZ3JhbX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIElucHV0TGFiZWxQcm9wcz17e1xuICAgICAgICAgICAgICBzaHJpbms6IHRydWUsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICBzdGFydEFkb3JubWVudDogPElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwic3RhcnRcIj5APC9JbnB1dEFkb3JubWVudD4sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPkluZm9ybWFzaSBLZWxhaGlyYW48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtdGVtcGF0bGFoaXJcIlxuICAgICAgICAgICAgbGFiZWw9XCJUZW1wYXQgTGFoaXJcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgICB2YXJpYW50PVwiZmlsbGVkXCJcbiAgICAgICAgICAgIG5hbWU9XCJ0ZW1wYXRMYWhpclwiXG4gICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgIHZhbHVlPXt0ZW1wYXRMYWhpcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWR0YW5nZ2FsbGFoaXJcIlxuICAgICAgICAgICAgbGFiZWw9XCJUYW5nZ2FsIExhaGlyXCJcbiAgICAgICAgICAgIHR5cGU9XCJkYXRlXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIlRleHRGaWVsZFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBuYW1lPVwidGFuZ2dhbExhaGlyXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgSW5wdXRMYWJlbFByb3BzPXt7XG4gICAgICAgICAgICAgIHNocmluazogdHJ1ZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB2YWx1ZT17dGFuZ2dhbExhaGlyfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+SW5mb3JtYXNpIEFrdW48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgaWQ9XCJmaWxsZWQtdXNlcm5hbWVcIlxuICAgICAgICAgICAgbGFiZWw9XCJVc2VybmFtZVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUZXh0RmllbGRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e3VzZXJuYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1wYXNzd29yZC1pbnB1dFwiXG4gICAgICAgICAgICBsYWJlbD1cIlBhc3N3b3JkXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIlRleHRGaWVsZFwiXG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJmaWxsZWRcIlxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICBpZD1cImZpbGxlZC1wYXNzd29yZENvbmZpcm1hdGlvbi1pbnB1dFwiXG4gICAgICAgICAgICBsYWJlbD1cIktvbmZpcm1hc2kgUGFzc3dvcmRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiVGV4dEZpZWxkXCJcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxuICAgICAgICAgICAgdmFyaWFudD1cImZpbGxlZFwiXG4gICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRDb25maXJtYXRpb25cIlxuICAgICAgICAgICAgZnVsbFdpZHRoXG4gICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmRDb25maXJtYXRpb259XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dENoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxuICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIkJ1dHRvblwiXG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+UmVnaXN0ZXI8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0ZXJQcm9tb3RvckZvcm07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCAqL1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGFicyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJzJztcbmltcG9ydCBUYWIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFiJztcbmltcG9ydCBQYXBlciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9QYXBlcic7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ29udGFpbmVyJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuXG5pbXBvcnQgJ0NvbXBvbmVudHMvUmVnaXN0ZXJTY3JlZW4vUmVnaXN0ZXJTY3JlZW4uY3NzJztcblxuaW1wb3J0IFRhYkNvbnRhaW5lciBmcm9tICdDb21wb25lbnRzL1RhYkNvbnRhaW5lci9UYWJDb250YWluZXInO1xuaW1wb3J0IFJlZ2lzdGVyU2VsbGVyRm9ybSBmcm9tICdDb21wb25lbnRzL1JlZ2lzdGVyU2VsbGVyRm9ybS9SZWdpc3RlclNlbGxlckZvcm0nO1xuaW1wb3J0IFJlZ2lzdGVyUHJvbW90b3JGb3JtIGZyb20gJ0NvbXBvbmVudHMvUmVnaXN0ZXJQcm9tb3RvckZvcm0vUmVnaXN0ZXJQcm9tb3RvckZvcm0nO1xuXG5jbGFzcyBSZWdpc3RlclNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0YWJWYWx1ZTogMCxcbiAgICB9O1xuICAgIHRoaXMuY2hhbmdlVGFiVmFsdWUgPSB0aGlzLmNoYW5nZVRhYlZhbHVlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWdpc3RlckJ1dHRvbkNsaWNrSGFuZGxlciA9IHRoaXMucmVnaXN0ZXJCdXR0b25DbGlja0hhbmRsZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNoYW5nZVRhYlZhbHVlKGV2ZW50LCBuZXdWYWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB0YWJWYWx1ZTogbmV3VmFsdWUgfSk7XG4gIH1cblxuICByZWdpc3RlckJ1dHRvbkNsaWNrSGFuZGxlcigpIHtcbiAgICBjb25zdCB7IHRhYlZhbHVlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnNvbGUubG9nKGBSZWdpc3RlciBidXR0b24gY2xpY2sgaGFuZGxlciB0ZXJwYW5nZ2lsLCBuaWxhaSB0YWI6ICR7dGFiVmFsdWV9YCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0YWJWYWx1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJMb2dpblNjcmVlblwiPlxuICAgICAgICA8R3JpZFxuICAgICAgICAgIGNvbnRhaW5lclxuICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAganVzdGlmeT1cImNlbnRlclwiXG4gICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgPlxuICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfT5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT1cIkhlYWRlclwiIHZhcmlhbnQ9XCJoMVwiIGNvbXBvbmVudD1cImgyXCI+XG4gICAgICAgICAgICAgIERhZnRhclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0+PGJyIC8+PC9HcmlkPlxuICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezN9IC8+XG4gICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IHNtPXs2fT5cbiAgICAgICAgICAgIDxDb250YWluZXI+XG4gICAgICAgICAgICAgIDxQYXBlciBjbGFzc05hbWU9XCJQYXBlclwiPlxuICAgICAgICAgICAgICAgIDxUYWJzXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGFiVmFsdWV9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VUYWJWYWx1ZX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VGFiIGxhYmVsPVwiQWt1biBCaXNuaXNcIiAvPlxuICAgICAgICAgICAgICAgICAgPFRhYiBsYWJlbD1cIkFrdW4gUHJvbW90b3JcIiAvPlxuICAgICAgICAgICAgICAgIDwvVGFicz5cbiAgICAgICAgICAgICAgICA8VGFiQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgeyB0YWJWYWx1ZSA9PT0gMFxuICAgICAgICAgICAgICAgICAgJiYgPFJlZ2lzdGVyU2VsbGVyRm9ybSAvPlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgeyB0YWJWYWx1ZSA9PT0gMVxuICAgICAgICAgICAgICAgICAgJiYgPFJlZ2lzdGVyUHJvbW90b3JGb3JtIC8+XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9UYWJDb250YWluZXI+XG4gICAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICBQcm9tb3NpPyBWaXJhbGluIGFqYWFhLi5cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9Db250YWluZXI+XG4gICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezN9IC8+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0ZXJTY3JlZW47XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogNDAsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGVyZSBhcmUgY2hpbGRyZW4gYW5kIG5vdCBgc3JjYCBvciBgc3JjU2V0YC4gKi9cbiAgICBjb2xvckRlZmF1bHQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW1nIGVsZW1lbnQgaWYgZWl0aGVyIGBzcmNgIG9yIGBzcmNTZXRgIGlzIGRlZmluZWQuICovXG4gICAgaW1nOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgLy8gSGFuZGxlIG5vbi1zcXVhcmUgaW1hZ2UuIFRoZSBwcm9wZXJ0eSBpc24ndCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgICBvYmplY3RGaXQ6ICdjb3ZlcidcbiAgICB9XG4gIH07XG59O1xudmFyIEF2YXRhciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXZhdGFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFsdCA9IHByb3BzLmFsdCxcbiAgICAgIGNoaWxkcmVuUHJvcCA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2hpbGRyZW5DbGFzc05hbWVQcm9wID0gcHJvcHMuY2hpbGRyZW5DbGFzc05hbWUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW1nUHJvcHMgPSBwcm9wcy5pbWdQcm9wcyxcbiAgICAgIHNpemVzID0gcHJvcHMuc2l6ZXMsXG4gICAgICBzcmMgPSBwcm9wcy5zcmMsXG4gICAgICBzcmNTZXQgPSBwcm9wcy5zcmNTZXQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWx0XCIsIFwiY2hpbGRyZW5cIiwgXCJjaGlsZHJlbkNsYXNzTmFtZVwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWdQcm9wc1wiLCBcInNpemVzXCIsIFwic3JjXCIsIFwic3JjU2V0XCJdKTtcblxuICB2YXIgY2hpbGRyZW4gPSBudWxsO1xuICB2YXIgaW1nID0gc3JjIHx8IHNyY1NldDtcblxuICBpZiAoaW1nKSB7XG4gICAgY2hpbGRyZW4gPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIF9leHRlbmRzKHtcbiAgICAgIGFsdDogYWx0LFxuICAgICAgc3JjOiBzcmMsXG4gICAgICBzcmNTZXQ6IHNyY1NldCxcbiAgICAgIHNpemVzOiBzaXplcyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbWdcbiAgICB9LCBpbWdQcm9wcykpO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuQ2xhc3NOYW1lUHJvcCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlblByb3ApKSB7XG4gICAgY2hpbGRyZW4gPSBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW5Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2hpbGRyZW5DbGFzc05hbWVQcm9wLCBjaGlsZHJlblByb3AucHJvcHMuY2xhc3NOYW1lKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuID0gY2hpbGRyZW5Qcm9wO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5zeXN0ZW0sIGNsYXNzTmFtZVByb3AsICFpbWcgJiYgY2xhc3Nlcy5jb2xvckRlZmF1bHQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBdmF0YXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGBzcmNgIG9yIGBzcmNTZXRgIHRvXG4gICAqIHByb3ZpZGUgYW4gYWx0IGF0dHJpYnV0ZSBmb3IgdGhlIHJlbmRlcmVkIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVuZGVyIGljb24gb3IgdGV4dCBlbGVtZW50cyBpbnNpZGUgdGhlIEF2YXRhci5cbiAgICogYHNyY2AgYW5kIGBhbHRgIHByb3BzIHdpbGwgbm90IGJlIHVzZWQgYW5kIG5vIGBpbWdgIHdpbGxcbiAgICogYmUgcmVuZGVyZWQgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogVGhpcyBjYW4gYmUgYW4gZWxlbWVudCwgb3IganVzdCBhIHN0cmluZy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBUaGUgY2xhc3NOYW1lIG9mIHRoZSBjaGlsZCBlbGVtZW50LlxuICAgKiBVc2VkIGJ5IENoaXAgYW5kIExpc3RJdGVtSWNvbiB0byBzdHlsZSB0aGUgQXZhdGFyIGljb24uXG4gICAqL1xuICBjaGlsZHJlbkNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW1nYCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnRcbiAgICogaXMgdXNlZCB0byBkaXNwbGF5IGFuIGltYWdlLlxuICAgKi9cbiAgaW1nUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBgc2l6ZXNgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzaXplczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGBzcmNgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBgc3JjU2V0YCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgc3JjU2V0OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUF2YXRhcidcbn0pKEF2YXRhcik7IiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgQXZhdGFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0F2YXRhcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUGVyc29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9QZXJzb24nO1xuaW1wb3J0IEhvbWUgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0hvbWUnO1xuXG5pbXBvcnQgJ0NvbXBvbmVudHMvQWRtaW5OYXZpZ2F0aW9uL0FkbWluTmF2aWdhdGlvbi5jc3MnO1xuXG5jbGFzcyBBZG1pbk5hdmlnYXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nO1xuICAgIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGVhZGVyLFxuICAgICAgaXNXaXRoSG9tZUJ1dHRvbixcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgaW1hZ2VVcmwsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkXG4gICAgICAgIGNvbnRhaW5lclxuICAgICAgICBkaXJlY3Rpb249XCJyb3dcIlxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgY2xhc3NOYW1lPVwiTmF2aWdhdGlvblwiXG4gICAgICA+XG4gICAgICAgIDxHcmlkXG4gICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgaXRlbVxuICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJMZWZ0XCJcbiAgICAgICAgICB4cz17NH1cbiAgICAgICAgPlxuICAgICAgICAgIHsgaXNXaXRoSG9tZUJ1dHRvbiAmJiAoXG4gICAgICAgICAgICA8QnV0dG9uQmFzZSBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAgICAgICAgICAgICAgPEhvbWUgLz5cbiAgICAgICAgICAgIDwvQnV0dG9uQmFzZT5cbiAgICAgICAgICApfVxuICAgICAgICA8L0dyaWQ+XG4gICAgICAgIDxHcmlkXG4gICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgaXRlbVxuICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAganVzdGlmeT1cImNlbnRlclwiXG4gICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJNaWRkbGVcIlxuICAgICAgICAgIHhzPXs0fVxuICAgICAgICA+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg1XCI+e2hlYWRlcn08L1R5cG9ncmFwaHk+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgICAgPEdyaWRcbiAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICBpdGVtXG4gICAgICAgICAgZGlyZWN0aW9uPVwicm93LXJldmVyc2VcIlxuICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgIHNwYWNpbmc9ezB9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiUmlnaHRcIlxuICAgICAgICAgIHhzPXs0fVxuICAgICAgICA+XG4gICAgICAgICAgeyBpbWFnZVVybCA/IDxBdmF0YXIgc3JjPXtpbWFnZVVybH0gLz4gOiA8QXZhdGFyPjxQZXJzb24gLz48L0F2YXRhcj59XG4gICAgICAgICAgPHNwYW4+Jm5ic3A7PC9zcGFuPlxuICAgICAgICAgIDxzcGFuPiZuYnNwOzwvc3Bhbj5cbiAgICAgICAgICA8VHlwb2dyYXBoeT57dXNlcm5hbWV9PC9UeXBvZ3JhcGh5PlxuICAgICAgICA8L0dyaWQ+XG4gICAgICA8L0dyaWQ+XG4gICAgKTtcbiAgfVxufVxuXG5BZG1pbk5hdmlnYXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBoZWFkZXI6ICcnLFxuICB1c2VybmFtZTogJ1VzZXInLFxuICBpbWFnZVVybDogJycsXG4gIGlzV2l0aEhvbWVCdXR0b246IGZhbHNlLFxufTtcblxuQWRtaW5OYXZpZ2F0aW9uLnByb3BUeXBlcyA9IHtcbiAgaGVhZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB1c2VybmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaW1hZ2VVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlzV2l0aEhvbWVCdXR0b246IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWRtaW5OYXZpZ2F0aW9uO1xuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlJztcbmltcG9ydCBWb2x1bWVVcCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvVm9sdW1lVXAnO1xuaW1wb3J0IEdyb3VwIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9Hcm91cCc7XG5pbXBvcnQgQWNjZXNzaWJpbGl0eSBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQWNjZXNzaWJpbGl0eSc7XG5cbmltcG9ydCBBZG1pbk5hdmlnYXRpb24gZnJvbSAnQ29tcG9uZW50cy9BZG1pbk5hdmlnYXRpb24vQWRtaW5OYXZpZ2F0aW9uJztcbmltcG9ydCAnQ29tcG9uZW50cy9BZG1pbkRhc2hib2FyZFNjcmVlbi9BZG1pbkRhc2hib2FyZFNjcmVlbi5jc3MnO1xuXG5jbGFzcyBBZG1pbkRhc2hib2FyZFNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBidXR0b25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbWFnZUljb246IDxWb2x1bWVVcCBmb250U2l6ZT1cImluaGVyaXRcIiAvPixcbiAgICAgICAgICB0YXJnZXRVcmw6ICcnLFxuICAgICAgICAgIG5hbWU6ICdLb250ZW4nLFxuICAgICAgICAgIGhlYWRlcjogJ0tlbG9sYSBLb250ZW4gVmlyYWwnLFxuICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgIGFjdGl2ZUNvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2VJY29uOiA8R3JvdXAgZm9udFNpemU9XCJpbmhlcml0XCIgLz4sXG4gICAgICAgICAgdGFyZ2V0VXJsOiAnJyxcbiAgICAgICAgICBuYW1lOiAnUGViaXNuaXMnLFxuICAgICAgICAgIGhlYWRlcjogJ0RhdGFiYXNlIFBlYmlzbmlzJyxcbiAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICBhY3RpdmVDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltYWdlSWNvbjogPEFjY2Vzc2liaWxpdHkgZm9udFNpemU9XCJpbmhlcml0XCIgLz4sXG4gICAgICAgICAgdGFyZ2V0VXJsOiAnJyxcbiAgICAgICAgICBuYW1lOiAnUHJvbW90b3InLFxuICAgICAgICAgIGhlYWRlcjogJ0RhdGFiYXNlIFByb21vdG9yJyxcbiAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICBhY3RpdmVDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soaW5kZXgpIHtcbiAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgY2FzZSAyOlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvcHJvbW90b3ItZGF0YWJhc2UnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL3NlbGxlci1kYXRhYmFzZSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAwOlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvYWRtaW4ta2Vsb2xhLWtvbnRlbi12aXJhbCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYnV0dG9ucyB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJBZG1pbkRhc2hib2FyZFNjcmVlblwiPlxuICAgICAgICA8QWRtaW5OYXZpZ2F0aW9uIHVzZXJuYW1lPVwiQWRtaW5cIiAvPlxuICAgICAgICA8R3JpZFxuICAgICAgICAgIGNvbnRhaW5lclxuICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAganVzdGlmeT1cImNlbnRlclwiXG4gICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJCdXR0b25zQ29udGFpbmVyXCJcbiAgICAgICAgPlxuICAgICAgICAgIHtidXR0b25zLm1hcCgoYnV0dG9uLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgPEJ1dHRvbkJhc2VcbiAgICAgICAgICAgICAga2V5PXtidXR0b24ubmFtZX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17ZSA9PiB0aGlzLmhhbmRsZUNsaWNrKGluZGV4LCBlKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgIHNwYWNpbmc9ezB9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQnV0dG9uc0NvbnRhaW5lclwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDFcIj57IGJ1dHRvbi5pbWFnZUljb24gfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDVcIj57IGJ1dHRvbi5oZWFkZXIgfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImZsZXgtc3RhcnRcIlxuICAgICAgICAgICAgICAgICAganVzdGlmeT1cImZsZXgtc3RhcnRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj57IGBUb3RhbCAke2J1dHRvbi5uYW1lfTogJHtidXR0b24uY291bnR9YCB9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPnsgYFRvdGFsIEFrdGlmOiAke2J1dHRvbi5hY3RpdmVDb3VudH1gIH08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0J1dHRvbkJhc2U+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRtaW5EYXNoYm9hcmRTY3JlZW47XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBUYWJsZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4vVGFibGVDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ3RhYmxlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJvcmRlckNvbGxhcHNlOiAnY29sbGFwc2UnLFxuICAgIGJvcmRlclNwYWNpbmc6IDBcbiAgfVxufTtcbnZhciBUYWJsZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGUocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3RhYmxlJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkcGFkZGluZyA9IHByb3BzLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX3Byb3BzJHBhZGRpbmcgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRwYWRkaW5nLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCIsIFwic2l6ZVwiXSk7XG5cbiAgdmFyIHRhYmxlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBzaXplOiBzaXplXG4gICAgfTtcbiAgfSwgW3BhZGRpbmcsIHNpemVdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHRhYmxlLCBub3JtYWxseSBgVGFibGVIZWFkYCBhbmQgYFRhYmxlQm9keWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQWxsb3dzIFRhYmxlQ2VsbHMgdG8gaW5oZXJpdCBwYWRkaW5nIG9mIHRoZSBUYWJsZS5cbiAgICovXG4gIHBhZGRpbmc6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnY2hlY2tib3gnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogQWxsb3dzIFRhYmxlQ2VsbHMgdG8gaW5oZXJpdCBzaXplIG9mIHRoZSBUYWJsZS5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZSdcbn0pKFRhYmxlKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBUYWJsZWx2bDJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IGRlZmF1bHQgVGFibGVsdmwyQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBUYWJsZWx2bDJDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAndGFibGUtcm93LWdyb3VwJ1xuICB9XG59O1xudmFyIHRhYmxlbHZsMiA9IHtcbiAgdmFyaWFudDogJ2JvZHknXG59O1xudmFyIFRhYmxlQm9keSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVCb2R5KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICd0Ym9keScgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhYmxlbHZsMkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGFibGVsdmwyXG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVCb2R5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVCb2R5J1xufSkoVGFibGVCb2R5KTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IGRhcmtlbiwgZmFkZSwgbGlnaHRlbiB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVDb250ZXh0JztcbmltcG9ydCBUYWJsZWx2bDJDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gICAgICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnaW5oZXJpdCcsXG4gICAgICAvLyBXb3JrYXJvdW5kIGZvciBhIHJlbmRlcmluZyBidWcgd2l0aCBzcGFubmVkIGNvbHVtbnMgaW4gQ2hyb21lIDYyLjAuXG4gICAgICAvLyBSZW1vdmVzIHRoZSBhbHBoYSAoc2V0cyBpdCB0byAxKSwgYW5kIGxpZ2h0ZW5zIG9yIGRhcmtlbnMgdGhlIHRoZW1lIGNvbG9yLlxuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZFxcbiAgICBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbGlnaHRlbihmYWRlKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMSksIDAuODgpIDogZGFya2VuKGZhZGUodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC42OCkpLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAnMTRweCA0MHB4IDE0cHggMTZweCcsXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaGVhZFwiYCBvciBgY29udGV4dC50YWJsZS5oZWFkYC4gKi9cbiAgICBoZWFkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgbGluZUhlaWdodDogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIxKSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keVwiYCBvciBgY29udGV4dC50YWJsZS5ib2R5YC4gKi9cbiAgICBib2R5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRSZWd1bGFyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmb290ZXJcImAgb3IgYGNvbnRleHQudGFibGUuZm9vdGVyYC4gKi9cbiAgICBmb290ZXI6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgbGluZUhlaWdodDogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIxKSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhZGRpbmc9XCJkZW5zZVwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICc2cHggMjRweCA2cHggMTZweCcsXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgICB9LFxuICAgICAgJyYkcGFkZGluZ0NoZWNrYm94Jzoge1xuICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgIC8vIHByZXZlbnQgdGhlIGNoZWNrYm94IGNvbHVtbiBmcm9tIGdyb3dpbmdcbiAgICAgICAgcGFkZGluZzogJzBweCAxMnB4IDAgMTZweCcsXG4gICAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDEyLFxuICAgICAgICAgIHBhZGRpbmdSaWdodDogMTZcbiAgICAgICAgfSxcbiAgICAgICAgJyYgPiAqJzoge1xuICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYWRkaW5nPVwiY2hlY2tib3hcImAuICovXG4gICAgcGFkZGluZ0NoZWNrYm94OiB7XG4gICAgICB3aWR0aDogNDgsXG4gICAgICAvLyBwcmV2ZW50IHRoZSBjaGVja2JveCBjb2x1bW4gZnJvbSBncm93aW5nXG4gICAgICBwYWRkaW5nOiAnMCAwIDAgNHB4JyxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiAwLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IDRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFkZGluZz1cIm5vbmVcImAuICovXG4gICAgcGFkZGluZ05vbmU6IHtcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICBwYWRkaW5nOiAwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImp1c3RpZnlcImAuICovXG4gICAgYWxpZ25KdXN0aWZ5OiB7XG4gICAgICB0ZXh0QWxpZ246ICdqdXN0aWZ5J1xuICAgIH1cbiAgfTtcbn07XG52YXIgVGFibGVDZWxsID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFsaWduID0gcHJvcHMuYWxpZ24sXG4gICAgICBhbGlnbiA9IF9wcm9wcyRhbGlnbiA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJGFsaWduLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBwYWRkaW5nUHJvcCA9IHByb3BzLnBhZGRpbmcsXG4gICAgICBzY29wZVByb3AgPSBwcm9wcy5zY29wZSxcbiAgICAgIHNpemVQcm9wID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNvcnREaXJlY3Rpb24gPSBwcm9wcy5zb3J0RGlyZWN0aW9uLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWxpZ25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwicGFkZGluZ1wiLCBcInNjb3BlXCIsIFwic2l6ZVwiLCBcInNvcnREaXJlY3Rpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgdGFibGUgPSBSZWFjdC51c2VDb250ZXh0KFRhYmxlQ29udGV4dCk7XG4gIHZhciB0YWJsZWx2bDIgPSBSZWFjdC51c2VDb250ZXh0KFRhYmxlbHZsMkNvbnRleHQpO1xuICB2YXIgQ29tcG9uZW50O1xuXG4gIGlmIChjb21wb25lbnQpIHtcbiAgICBDb21wb25lbnQgPSBjb21wb25lbnQ7XG4gIH0gZWxzZSB7XG4gICAgQ29tcG9uZW50ID0gdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcgPyAndGgnIDogJ3RkJztcbiAgfVxuXG4gIHZhciBzY29wZSA9IHNjb3BlUHJvcDtcblxuICBpZiAoIXNjb3BlICYmIHRhYmxlbHZsMiAmJiB0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2hlYWQnKSB7XG4gICAgc2NvcGUgPSAnY29sJztcbiAgfVxuXG4gIHZhciBwYWRkaW5nID0gcGFkZGluZ1Byb3AgfHwgKHRhYmxlICYmIHRhYmxlLnBhZGRpbmcgPyB0YWJsZS5wYWRkaW5nIDogJ2RlZmF1bHQnKTtcbiAgdmFyIHNpemUgPSBzaXplUHJvcCB8fCAodGFibGUgJiYgdGFibGUuc2l6ZSA/IHRhYmxlLnNpemUgOiAnbWVkaXVtJyk7XG4gIHZhciBhcmlhU29ydCA9IG51bGw7XG5cbiAgaWYgKHNvcnREaXJlY3Rpb24pIHtcbiAgICBhcmlhU29ydCA9IHNvcnREaXJlY3Rpb24gPT09ICdhc2MnID8gJ2FzY2VuZGluZycgOiAnZGVzY2VuZGluZyc7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsICh2YXJpYW50ID8gdmFyaWFudCA9PT0gJ2hlYWQnIDogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcpICYmIGNsYXNzZXMuaGVhZCwgKHZhcmlhbnQgPyB2YXJpYW50ID09PSAnYm9keScgOiB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdib2R5JykgJiYgY2xhc3Nlcy5ib2R5LCAodmFyaWFudCA/IHZhcmlhbnQgPT09ICdmb290ZXInIDogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnZm9vdGVyJykgJiYgY2xhc3Nlcy5mb290ZXIsIGFsaWduICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImFsaWduXCIuY29uY2F0KGNhcGl0YWxpemUoYWxpZ24pKV0sIHBhZGRpbmcgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wicGFkZGluZ1wiLmNvbmNhdChjYXBpdGFsaXplKHBhZGRpbmcpKV0sIHNpemUgIT09ICdtZWRpdW0nICYmIGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSksXG4gICAgXCJhcmlhLXNvcnRcIjogYXJpYVNvcnQsXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQ2VsbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIHRhYmxlIGNlbGwgY29udGVudC5cbiAgICpcbiAgICogTW9uZXRhcnkgb3IgZ2VuZXJhbGx5IG51bWJlciBmaWVsZHMgKipzaG91bGQgYmUgcmlnaHQgYWxpZ25lZCoqIGFzIHRoYXQgYWxsb3dzXG4gICAqIHlvdSB0byBhZGQgdGhlbSB1cCBxdWlja2x5IGluIHlvdXIgaGVhZCB3aXRob3V0IGhhdmluZyB0byB3b3JyeSBhYm91dCBkZWNpbWFscy5cbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSB0YWJsZSBjZWxsIGNvbnRlbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYWRkaW5nIGFwcGxpZWQgdG8gdGhlIGNlbGwuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBUYWJsZSBwYXJlbnQgY29tcG9uZW50IHNldCB0aGUgdmFsdWUuXG4gICAqL1xuICBwYWRkaW5nOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2NoZWNrYm94JywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIFNldCBzY29wZSBhdHRyaWJ1dGUuXG4gICAqL1xuICBzY29wZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgc2l6ZSBvZiB0aGUgY2VsbC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIFRhYmxlIHBhcmVudCBjb21wb25lbnQgc2V0IHRoZSB2YWx1ZSAoYG5vcm1hbGApLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pLFxuXG4gIC8qKlxuICAgKiBTZXQgYXJpYS1zb3J0IGRpcmVjdGlvbi5cbiAgICovXG4gIHNvcnREaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2FzYycsICdkZXNjJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgY2VsbCB0eXBlLlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgVGFibGVIZWFkLCBUYWJsZUJvZHkgb3IgVGFibGVGb290ZXIgcGFyZW50IGNvbXBvbmVudCBzZXQgdGhlIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnaGVhZCcsICdib2R5JywgJ2Zvb3RlciddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUNlbGwnXG59KShUYWJsZUNlbGwpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICd0YWJsZS1oZWFkZXItZ3JvdXAnXG4gIH1cbn07XG52YXIgdGFibGVsdmwyID0ge1xuICB2YXJpYW50OiAnaGVhZCdcbn07XG52YXIgVGFibGVIZWFkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUhlYWQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3RoZWFkJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFibGVsdmwyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0YWJsZWx2bDJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZUhlYWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUhlYWQnXG59KShUYWJsZUhlYWQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgJyYkc2VsZWN0ZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNCknIC8vIGdyZXlbMTAwXVxuICAgICAgICA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJ1xuICAgICAgfSxcbiAgICAgICcmJGhvdmVyOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDcpJyAvLyBncmV5WzIwMF1cbiAgICAgICAgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE0KSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBob3Zlcj17dHJ1ZX1gLiAqL1xuICAgIGhvdmVyOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGFibGUgdmFyaWFudD1cImhlYWRcIi4gKi9cbiAgICBoZWFkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGFibGUgdmFyaWFudD1cImZvb3RlclwiLiAqL1xuICAgIGZvb3Rlcjoge31cbiAgfTtcbn07XG4vKipcbiAqIFdpbGwgYXV0b21hdGljYWxseSBzZXQgZHluYW1pYyByb3cgaGVpZ2h0XG4gKiBiYXNlZCBvbiB0aGUgbWF0ZXJpYWwgdGFibGUgZWxlbWVudCBwYXJlbnQgKGhlYWQsIGJvZHksIGV0YykuXG4gKi9cblxudmFyIFRhYmxlUm93ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZVJvdyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAndHInIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRob3ZlciA9IHByb3BzLmhvdmVyLFxuICAgICAgaG92ZXIgPSBfcHJvcHMkaG92ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGhvdmVyLFxuICAgICAgX3Byb3BzJHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICBzZWxlY3RlZCA9IF9wcm9wcyRzZWxlY3RlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2VsZWN0ZWQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImhvdmVyXCIsIFwic2VsZWN0ZWRcIl0pO1xuXG4gIHZhciB0YWJsZWx2bDIgPSBSZWFjdC51c2VDb250ZXh0KFRhYmxlbHZsMkNvbnRleHQpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHRhYmxlbHZsMiAmJiBbdGFibGVsdmwyLnZhcmlhbnQgPT09ICdoZWFkJyAmJiBjbGFzc2VzLmhlYWQsIHRhYmxlbHZsMi52YXJpYW50ID09PSAnZm9vdGVyJyAmJiBjbGFzc2VzLmZvb3Rlcl0sIGhvdmVyICYmIGNsYXNzZXMuaG92ZXIsIHNlbGVjdGVkICYmIGNsYXNzZXMuc2VsZWN0ZWQpXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlUm93LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNob3VsZCBiZSB2YWxpZCA8dHI+IGNoaWxkcmVuIHN1Y2ggYXMgYFRhYmxlQ2VsbGAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIHNoYWRlIG9uIGhvdmVyLlxuICAgKi9cbiAgaG92ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWJsZSByb3cgd2lsbCBoYXZlIHRoZSBzZWxlY3RlZCBzaGFkaW5nLlxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlUm93J1xufSkoVGFibGVSb3cpOyIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UnO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyJztcbmltcG9ydCBUYWJsZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZSc7XG5pbXBvcnQgVGFibGVCb2R5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQm9keSc7XG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQ2VsbCc7XG5pbXBvcnQgVGFibGVIZWFkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlSGVhZCc7XG5pbXBvcnQgVGFibGVSb3cgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVSb3cnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnO1xuaW1wb3J0IElucHV0QWRvcm5tZW50IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0QWRvcm5tZW50JztcbmltcG9ydCBTZWFyY2ggZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1NlYXJjaCc7XG5pbXBvcnQgUmVmcmVzaCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvUmVmcmVzaCc7XG5pbXBvcnQgU29ydCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU29ydCc7XG5cbmltcG9ydCAnQ29tcG9uZW50cy9BZG1pbkRhdGFiYXNlVGFibGUvQWRtaW5EYXRhYmFzZVRhYmxlLmNzcyc7XG5cbmNvbnN0IGNvdW50QWN0aXZlID0gKHJvd3MpID0+IHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgcm93cy5tYXAoKHJvdykgPT4ge1xuICAgIE9iamVjdC5rZXlzKHJvdykubWFwKChrZXkpID0+IHtcbiAgICAgIGlmIChyb3dba2V5XSA9PT0gJ0FrdGlmJykge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBjb3VudDtcbn07XG5cbmNsYXNzIEFkbWluRGF0YWJhc2VUYWJsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lLFxuICAgICAgY29sdW1ucyxcbiAgICAgIHJvd3MsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQWRtaW5EYXRhYmFzZVRhYmxlXCI+XG4gICAgICAgIDxHcmlkXG4gICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgZGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICAgICAgICBzcGFjaW5nPXswfVxuICAgICAgICAgIGNsYXNzTmFtZT1cIk1haW5cIlxuICAgICAgICA+XG4gICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgIGNvbnRhaW5lclxuICAgICAgICAgICAgZGlyZWN0aW9uPVwicm93XCJcbiAgICAgICAgICAgIHNwYWNpbmc9ezJ9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJUb29sc1wiXG4gICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICA8UGFwZXI+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiU2VhcmNoSW5wdXRcIlxuICAgICAgICAgICAgICAgICAgaWQ9XCJpbnB1dC13aXRoLWljb24tc2VhcmNoaW5wdXRcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2BDYXJpICR7bmFtZX1gfVxuICAgICAgICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICAgICAgICBzdGFydEFkb3JubWVudDogKFxuICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEFkb3JubWVudCBwb3NpdGlvbj1cInN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEFkb3JubWVudD5cbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgIDxCdXR0b25CYXNlPlxuICAgICAgICAgICAgICAgIDxSZWZyZXNoIC8+XG4gICAgICAgICAgICAgIDwvQnV0dG9uQmFzZT5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgIDxCdXR0b25CYXNlPlxuICAgICAgICAgICAgICAgIDxTb3J0IC8+XG4gICAgICAgICAgICAgIDwvQnV0dG9uQmFzZT5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNVwiPlxuICAgICAgICAgICAgICAgIFRvdGFsXG4gICAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgICAgIHtyb3dzLmxlbmd0aH1cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg1XCI+XG4gICAgICAgICAgICAgICAgVG90YWwgQWt0aWY6Jm5ic3A7XG4gICAgICAgICAgICAgICAge2NvdW50QWN0aXZlKHJvd3MpfVxuICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfT5cbiAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJUYWJsZUJvZHlDb250YWluZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VGFibGUgY2xhc3NOYW1lPVwiVGFibGVcIj5cbiAgICAgICAgICAgICAgICA8VGFibGVIZWFkPlxuICAgICAgICAgICAgICAgICAgPFRhYmxlUm93IGNsYXNzTmFtZT1cIkhlYWRSb3dcIj5cbiAgICAgICAgICAgICAgICAgICAge2NvbHVtbnMubWFwKGNvbHVtbiA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPFRhYmxlQ2VsbCBrZXk9e2NvbHVtbi50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJykuam9pbignLScpfSB2YXJpYW50PVwiaGVhZFwiPntjb2x1bW59PC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgPC9UYWJsZVJvdz5cbiAgICAgICAgICAgICAgICA8L1RhYmxlSGVhZD5cbiAgICAgICAgICAgICAgICA8VGFibGVCb2R5IGNsYXNzTmFtZT1cIlRhYmxlQm9keVwiPlxuICAgICAgICAgICAgICAgICAge3Jvd3MubWFwKChyb3csIHJvd3NJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzS2V5ID0gcm93c0luZGV4O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZVJvdyBrZXk9e3Jvd3NLZXl9PlxuICAgICAgICAgICAgICAgICAgICAgICAge09iamVjdC5rZXlzKHJvdykubWFwKChrZXksIHJvd0luZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd0tleSA9IHJvd0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGwga2V5PXtgJHtyb3dzS2V5fSR7cm93S2V5fWB9Pntyb3dba2V5XX08L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVSb3c+XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L1RhYmxlQm9keT5cbiAgICAgICAgICAgICAgPC9UYWJsZT5cbiAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgPC9HcmlkPlxuICAgICAgICA8L0dyaWQ+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkFkbWluRGF0YWJhc2VUYWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIG5hbWU6ICcnLFxuICByb3dzOiBbXSxcbn07XG5cbkFkbWluRGF0YWJhc2VUYWJsZS5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLmlzUmVxdWlyZWQsXG4gIHJvd3M6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBBZG1pbkRhdGFiYXNlVGFibGU7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCAqL1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQWRtaW5OYXZpZ2F0aW9uIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5OYXZpZ2F0aW9uL0FkbWluTmF2aWdhdGlvbic7XG5pbXBvcnQgQWRtaW5EYXRhYmFzZVRhYmxlIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5EYXRhYmFzZVRhYmxlL0FkbWluRGF0YWJhc2VUYWJsZSc7XG5pbXBvcnQgJ0NvbXBvbmVudHMvUHJvbW90b3JEYXRhYmFzZVNjcmVlbi9Qcm9tb3RvckRhdGFiYXNlU2NyZWVuLmNzcyc7XG5cbmNvbnN0IGNyZWF0ZURhdGEgPSAobmFtYVByb21vdG9yLCBrb3RhLCB0YW5nZ2FsUmVnaXN0cmFzaSwgc3RhdHVzLCBqdW1sYWhLb250ZW4sIG5hbWFLb250ZW4pID0+IHtcbiAgY29uc3QgcmV0dXJuRGF0YSA9IHtcbiAgICBuYW1hUHJvbW90b3IsXG4gICAga290YSxcbiAgICB0YW5nZ2FsUmVnaXN0cmFzaSxcbiAgICBzdGF0dXMsXG4gICAganVtbGFoS29udGVuLFxuICAgIG5hbWFLb250ZW4sXG4gIH07XG4gIHJldHVybiByZXR1cm5EYXRhO1xufTtcblxuY2xhc3MgUHJvbW90b3JEYXRhYmFzZVNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICByb3dzOiBbXG4gICAgICAgIGNyZWF0ZURhdGEoJ0pva28xJywgJ0JhbmR1bmcnLCAnMTAtMDYtMjAxOScsICdBa3RpZicsICcxJywgJ1BlZHVsaSBrYXNpaCcpLFxuICAgICAgICBjcmVhdGVEYXRhKCdKb2tvMicsICdCYW5kdW5nJywgJzEwLTA2LTIwMTknLCAnQWt0aWYnLCAnMScsICdQZWR1bGkga2FzaWgnKSxcbiAgICAgICAgY3JlYXRlRGF0YSgnSm9rbzMnLCAnQmFuZHVuZycsICcxMC0wNi0yMDE5JywgJ0FrdGlmJywgJzEnLCAnUGVkdWxpIGthc2loJyksXG4gICAgICAgIGNyZWF0ZURhdGEoJ0pva280JywgJ0JhbmR1bmcnLCAnMTAtMDYtMjAxOScsICdBa3RpZicsICcxJywgJ1BlZHVsaSBrYXNpaCcpLFxuICAgICAgICBjcmVhdGVEYXRhKCdKb2tvNScsICdCYW5kdW5nJywgJzEwLTA2LTIwMTknLCAnQWt0aWYnLCAnMScsICdQZWR1bGkga2FzaWgnKSxcbiAgICAgICAgY3JlYXRlRGF0YSgnSm9rbzYnLCAnQmFuZHVuZycsICcxMC0wNi0yMDE5JywgJ0FrdGlmJywgJzEnLCAnUGVkdWxpIGthc2loJyksXG4gICAgICAgIGNyZWF0ZURhdGEoJ0pva283JywgJ0JhbmR1bmcnLCAnMTAtMDYtMjAxOScsICdBa3RpZicsICcxJywgJ1BlZHVsaSBrYXNpaCcpLFxuICAgICAgICBjcmVhdGVEYXRhKCdKb2tvOCcsICdCYW5kdW5nJywgJzEwLTA2LTIwMTknLCAnQWt0aWYnLCAnMScsICdQZWR1bGkga2FzaWgnKSxcbiAgICAgICAgY3JlYXRlRGF0YSgnSm9rbzknLCAnQmFuZHVuZycsICcxMC0wNi0yMDE5JywgJ0FrdGlmJywgJzEnLCAnUGVkdWxpIGthc2loJyksXG4gICAgICAgIGNyZWF0ZURhdGEoJ0pva28xMCcsICdCYW5kdW5nJywgJzEwLTA2LTIwMTknLCAnQWt0aWYnLCAnMScsICdQZWR1bGkga2FzaWgnKSxcbiAgICAgICAgY3JlYXRlRGF0YSgnSm9rbzExJywgJ0JhbmR1bmcnLCAnMTAtMDYtMjAxOScsICdBa3RpZicsICcxJywgJ1BlZHVsaSBrYXNpaCcpLFxuICAgICAgICBjcmVhdGVEYXRhKCdKb2tvMTInLCAnQmFuZHVuZycsICcxMC0wNi0yMDE5JywgJ0FrdGlmJywgJzEnLCAnUGVkdWxpIGthc2loJyksXG4gICAgICAgIGNyZWF0ZURhdGEoJ0pva28xMycsICdCYW5kdW5nJywgJzEwLTA2LTIwMTknLCAnQWt0aWYnLCAnMScsICdQZWR1bGkga2FzaWgnKSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHJvd3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiUHJvbW90b3JEYXRhYmFzZVNjcmVlblwiPlxuICAgICAgICA8QWRtaW5OYXZpZ2F0aW9uXG4gICAgICAgICAgaGVhZGVyPVwiREFUQUJBU0UgUFJPTU9UT1JcIlxuICAgICAgICAgIGlzV2l0aEhvbWVCdXR0b25cbiAgICAgICAgICB1c2VybmFtZT1cIkFkbWluXCJcbiAgICAgICAgLz5cbiAgICAgICAgPEFkbWluRGF0YWJhc2VUYWJsZVxuICAgICAgICAgIG5hbWU9XCJQcm9tb3RvclwiXG4gICAgICAgICAgY29sdW1ucz17W1xuICAgICAgICAgICAgJ05hbWEgUHJvbW90b3InLFxuICAgICAgICAgICAgJ0tvdGEnLFxuICAgICAgICAgICAgJ1RhbmdnYWwgUmVnaXN0cmFzaScsXG4gICAgICAgICAgICAnU3RhdHVzJyxcbiAgICAgICAgICAgICdKdW1sYWggS29udGVuIERpc2hhcmUnLFxuICAgICAgICAgICAgJ05hbWEgS29udGVuIFZpcmFsJyxcbiAgICAgICAgICBdfVxuICAgICAgICAgIHJvd3M9e3Jvd3N9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb21vdG9yRGF0YWJhc2VTY3JlZW47XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCAqL1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQWRtaW5OYXZpZ2F0aW9uIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5OYXZpZ2F0aW9uL0FkbWluTmF2aWdhdGlvbic7XG5pbXBvcnQgQWRtaW5EYXRhYmFzZVRhYmxlIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5EYXRhYmFzZVRhYmxlL0FkbWluRGF0YWJhc2VUYWJsZSc7XG5pbXBvcnQgJ0NvbXBvbmVudHMvU2VsbGVyRGF0YWJhc2VTY3JlZW4vU2VsbGVyRGF0YWJhc2VTY3JlZW4uY3NzJztcblxuY29uc3QgY3JlYXRlRGF0YSA9IChcbiAgbmFtYVBlYmlzbmlzLFxuICBrb3RhLFxuICB0YW5nZ2FsUmVnaXN0cmFzaSxcbiAgc3RhdHVzLFxuICBqdW1sYWhQcm9tb3RvcixcbiAganVtbGFoSWtsYW5Ba3RpZixcbiAgbmFtYUtvbnRlblxuICApID0+IHtcbiAgICBjb25zdCByZXR1cm5EYXRhID0ge1xuICAgICAgbmFtYVBlYmlzbmlzLFxuICAgICAga290YSxcbiAgICAgIHRhbmdnYWxSZWdpc3RyYXNpLFxuICAgICAgc3RhdHVzLFxuICAgICAganVtbGFoUHJvbW90b3IsXG4gICAgICBqdW1sYWhJa2xhbkFrdGlmLFxuICAgICAgbmFtYUtvbnRlblxuICB9O1xuICByZXR1cm4gcmV0dXJuRGF0YTtcbn07XG5cbmNsYXNzIFNlbGxlckRhdGFiYXNlU2NyZWVuIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHJvd3M6IFtcbiAgICAgICAgY3JlYXRlRGF0YSgnSm9rbzEnLCAnQmFuZHVuZycsICcxMC0wNi0yMDE5JywgJ0FrdGlmJywgJzEnLCAnMScsICdQZWR1bGkga2FzaWgnKSxcbiAgICAgICAgY3JlYXRlRGF0YSgnSm9rbzInLCAnQmFuZHVuZycsICcxMC0wNi0yMDE5JywgJ0FrdGlmJywgJzEnLCAnMScsICdQZWR1bGkga2FzaWgnKVxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcm93cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJTZWxsZXJEYXRhYmFzZVNjcmVlblwiPlxuICAgICAgICA8QWRtaW5OYXZpZ2F0aW9uXG4gICAgICAgICAgaGVhZGVyPVwiREFUQUJBU0UgUEVCSVNOSVNcIlxuICAgICAgICAgIGlzV2l0aEhvbWVCdXR0b25cbiAgICAgICAgICB1c2VybmFtZT1cIkFkbWluXCJcbiAgICAgICAgLz5cbiAgICAgICAgPEFkbWluRGF0YWJhc2VUYWJsZVxuICAgICAgICAgIG5hbWU9XCJQZWJpc25pc1wiXG4gICAgICAgICAgY29sdW1ucz17W1xuICAgICAgICAgICAgJ05hbWEgUGViaXNuaXMnLFxuICAgICAgICAgICAgJ0tvdGEnLFxuICAgICAgICAgICAgJ1RhbmdnYWwgUmVnaXN0cmFzaScsXG4gICAgICAgICAgICAnU3RhdHVzJyxcbiAgICAgICAgICAgICdKdW1sYWggUHJvbW90b3InLFxuICAgICAgICAgICAgJ0p1bWxhaCBJa2xhbiBBa3RpZicsXG4gICAgICAgICAgICAnTmFtYSBLb250ZW4gVmlyYWwnXG4gICAgICAgICAgXX1cbiAgICAgICAgICByb3dzPXtyb3dzfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWxsZXJEYXRhYmFzZVNjcmVlbjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBsaWdodGVuIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xudmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSA0OyAvLyBzZWNvbmRzXG5cbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGhlaWdodDogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCAmIGJhcjIgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgOyBiYXIyIGlmIGB2YXJpYW50LVwiYnVmZmVyXCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGVuKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5saWdodCwgMC42KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCAmIGJhcjIgZWxlbWVudHMgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgOyBiYXIyIGlmIGB2YXJpYW50PVwiYnVmZmVyXCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ZW4odGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubGlnaHQsIDAuNClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImRldGVybWluYXRlXCJgLiAqL1xuICAgIGRldGVybWluYXRlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlXCJgLiAqL1xuICAgIGluZGV0ZXJtaW5hdGU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1ZmZlclwiYC4gKi9cbiAgICBidWZmZXI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwicXVlcnlcImAuICovXG4gICAgcXVlcnk6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYWRkaXRpb25hbCBiYXIgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1ZmZlclwiYC4gKi9cbiAgICBkYXNoZWQ6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYW5pbWF0aW9uOiAnYnVmZmVyIDNzIGluZmluaXRlIGxpbmVhcicsXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRidWZmZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhZGRpdGlvbmFsIGJhciBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnVmZmVyXCJgICYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBkYXNoZWRDb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogXCJyYWRpYWwtZ3JhZGllbnQoXCIuY29uY2F0KGxpZ2h0ZW4odGhlbWUucGFsZXR0ZS5wcmltYXJ5LmxpZ2h0LCAwLjYpLCBcIiAwJSwgXCIpLmNvbmNhdChsaWdodGVuKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5saWdodCwgMC42KSwgXCIgMTYlLCB0cmFuc3BhcmVudCA0MiUpXCIpLFxuICAgICAgYmFja2dyb3VuZFNpemU6ICcxMHB4IDEwcHgnLFxuICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnMHB4IC0yM3B4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYWRkaXRpb25hbCBiYXIgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1ZmZlclwiYCAmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBkYXNoZWRDb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiBcInJhZGlhbC1ncmFkaWVudChcIi5jb25jYXQobGlnaHRlbih0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5saWdodCwgMC40KSwgXCIgMCUsIFwiKS5jb25jYXQobGlnaHRlbih0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5saWdodCwgMC42KSwgXCIgMTYlLCB0cmFuc3BhcmVudCA0MiUpXCIpLFxuICAgICAgYmFja2dyb3VuZFNpemU6ICcxMHB4IDEwcHgnLFxuICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnMHB4IC0yM3B4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGF5ZXJlZCBiYXIxICYgYmFyMiBlbGVtZW50cy4gKi9cbiAgICBiYXI6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMnMgbGluZWFyJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIgZWxlbWVudHMgaWYgYGNvbG9yPVwicHJpbWFyeVwiYDsgYmFyMiBpZiBgdmFyaWFudGAgbm90IFwiYnVmZmVyXCIuICovXG4gICAgYmFyQ29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIgZWxlbWVudHMgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgOyBiYXIyIGlmIGB2YXJpYW50YCBub3QgXCJidWZmZXJcIi4gKi9cbiAgICBiYXJDb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIxIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlIG9yIHF1ZXJ5XCJgLiAqL1xuICAgIGJhcjFJbmRldGVybWluYXRlOiB7XG4gICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgYW5pbWF0aW9uOiAnbXVpLWluZGV0ZXJtaW5hdGUxIDIuMXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpIGluZmluaXRlJyxcbiAgICAgIC8vIEJhY2t3YXJkIGNvbXBhdGlibGUgbG9naWMgYmV0d2VlbiBKU1MgdjkgYW5kIHYxMC5cbiAgICAgIC8vIFRvIHJlbW92ZSB3aXRoIHRoZSByZWxlYXNlIG9mIE1hdGVyaWFsLVVJIHY0XG4gICAgICBhbmltYXRpb25OYW1lOiAnJG11aS1pbmRldGVybWluYXRlMSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGJhcjEgZWxlbWVudCBpZiBgdmFyaWFudD1cImRldGVybWluYXRlXCJgLiAqL1xuICAgIGJhcjFEZXRlcm1pbmF0ZToge1xuICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gLlwiLmNvbmNhdChUUkFOU0lUSU9OX0RVUkFUSU9OLCBcInMgbGluZWFyXCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIxIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidWZmZXJcImAuICovXG4gICAgYmFyMUJ1ZmZlcjoge1xuICAgICAgekluZGV4OiAxLFxuICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2Zvcm0gLlwiLmNvbmNhdChUUkFOU0lUSU9OX0RVUkFUSU9OLCBcInMgbGluZWFyXCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBiYXIyIGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJpbmRldGVybWluYXRlIG9yIHF1ZXJ5XCJgLiAqL1xuICAgIGJhcjJJbmRldGVybWluYXRlOiB7XG4gICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgYW5pbWF0aW9uOiAnbXVpLWluZGV0ZXJtaW5hdGUyIDIuMXMgY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKSBpbmZpbml0ZScsXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmxlIGxvZ2ljIGJldHdlZW4gSlNTIHY5IGFuZCB2MTAuXG4gICAgICAvLyBUbyByZW1vdmUgd2l0aCB0aGUgcmVsZWFzZSBvZiBNYXRlcmlhbC1VSSB2NFxuICAgICAgYW5pbWF0aW9uTmFtZTogJyRtdWktaW5kZXRlcm1pbmF0ZTInLFxuICAgICAgYW5pbWF0aW9uRGVsYXk6ICcxLjE1cydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGJhcjIgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1ZmZlclwiYC4gKi9cbiAgICBiYXIyQnVmZmVyOiB7XG4gICAgICB0cmFuc2l0aW9uOiBcInRyYW5zZm9ybSAuXCIuY29uY2F0KFRSQU5TSVRJT05fRFVSQVRJT04sIFwicyBsaW5lYXJcIilcbiAgICB9LFxuICAgIC8vIExlZ2VuZHM6XG4gICAgLy8gfHwgcmVwcmVzZW50cyB0aGUgdmlld3BvcnRcbiAgICAvLyAtICByZXByZXNlbnRzIGEgbGlnaHQgYmFja2dyb3VuZFxuICAgIC8vIHggIHJlcHJlc2VudHMgYSBkYXJrIGJhY2tncm91bmRcbiAgICAnQGtleWZyYW1lcyBtdWktaW5kZXRlcm1pbmF0ZTEnOiB7XG4gICAgICAvLyAgfC0tLS0tfC0tLXgtfHwtLS0tLXx8LS0tLS18XG4gICAgICAnMCUnOiB7XG4gICAgICAgIGxlZnQ6ICctMzUlJyxcbiAgICAgICAgcmlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIC8vICB8LS0tLS18LS0tLS18fC0tLS0tfHx4eHh4LXxcbiAgICAgICc2MCUnOiB7XG4gICAgICAgIGxlZnQ6ICcxMDAlJyxcbiAgICAgICAgcmlnaHQ6ICctOTAlJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICAgIHJpZ2h0OiAnLTkwJSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1pbmRldGVybWluYXRlMic6IHtcbiAgICAgIC8vICB8eHh4eHh8eHh4eHh8fC0tLS0tfHwtLS0tLXxcbiAgICAgICcwJSc6IHtcbiAgICAgICAgbGVmdDogJy0yMDAlJyxcbiAgICAgICAgcmlnaHQ6ICcxMDAlJ1xuICAgICAgfSxcbiAgICAgIC8vICB8LS0tLS18LS0tLS18fC0tLS0tfHwteC0tLS18XG4gICAgICAnNjAlJzoge1xuICAgICAgICBsZWZ0OiAnMTA3JScsXG4gICAgICAgIHJpZ2h0OiAnLTglJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBsZWZ0OiAnMTA3JScsXG4gICAgICAgIHJpZ2h0OiAnLTglJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgYnVmZmVyJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwcHggLTIzcHgnXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnMHB4IC0yM3B4J1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICctMjAwcHggLTIzcHgnXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG52YXIgTGluZWFyUHJvZ3Jlc3MgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmVhclByb2dyZXNzKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFsdWVCdWZmZXIgPSBwcm9wcy52YWx1ZUJ1ZmZlcixcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2luZGV0ZXJtaW5hdGUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwidGhlbWVcIiwgXCJ2YWx1ZVwiLCBcInZhbHVlQnVmZmVyXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wLCBjb2xvciA9PT0gJ3ByaW1hcnknID8gY2xhc3Nlcy5jb2xvclByaW1hcnkgOiBjbGFzc2VzLmNvbG9yU2Vjb25kYXJ5LCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIGNsYXNzZXMuZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjbGFzc2VzLmluZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdidWZmZXInICYmIGNsYXNzZXMuYnVmZmVyLCB2YXJpYW50ID09PSAncXVlcnknICYmIGNsYXNzZXMucXVlcnkpO1xuICB2YXIgZGFzaGVkQ2xhc3MgPSBjbHN4KGNsYXNzZXMuZGFzaGVkLCBjb2xvciA9PT0gJ3ByaW1hcnknID8gY2xhc3Nlcy5kYXNoZWRDb2xvclByaW1hcnkgOiBjbGFzc2VzLmRhc2hlZENvbG9yU2Vjb25kYXJ5KTtcbiAgdmFyIGJhcjFDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuYmFyLCAodmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpICYmIGNsYXNzZXMuYmFyMUluZGV0ZXJtaW5hdGUsIGNvbG9yID09PSAncHJpbWFyeScgPyBjbGFzc2VzLmJhckNvbG9yUHJpbWFyeSA6IGNsYXNzZXMuYmFyQ29sb3JTZWNvbmRhcnksIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYgY2xhc3Nlcy5iYXIxRGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdidWZmZXInICYmIGNsYXNzZXMuYmFyMUJ1ZmZlcik7XG4gIHZhciBiYXIyQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmJhciwgKHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAncXVlcnknKSAmJiBjbGFzc2VzLmJhcjJJbmRldGVybWluYXRlLCB2YXJpYW50ID09PSAnYnVmZmVyJyA/IFtjbGFzc2VzLmJhcjJCdWZmZXIsIGNvbG9yID09PSAncHJpbWFyeScgPyBjbGFzc2VzLmNvbG9yUHJpbWFyeSA6IGNsYXNzZXMuY29sb3JTZWNvbmRhcnldIDogY29sb3IgPT09ICdwcmltYXJ5JyA/IGNsYXNzZXMuYmFyQ29sb3JQcmltYXJ5IDogY2xhc3Nlcy5iYXJDb2xvclNlY29uZGFyeSk7XG4gIHZhciByb290UHJvcHMgPSB7fTtcbiAgdmFyIGlubGluZVN0eWxlcyA9IHtcbiAgICBiYXIxOiB7fSxcbiAgICBiYXIyOiB7fVxuICB9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdidWZmZXInKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gdmFsdWUgLSAxMDA7XG5cbiAgICAgIGlmICh0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IC10cmFuc2Zvcm07XG4gICAgICB9XG5cbiAgICAgIGlubGluZVN0eWxlcy5iYXIxLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWChcIi5jb25jYXQodHJhbnNmb3JtLCBcIiUpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnTWF0ZXJpYWwtVUk6IHlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZSBwcm9wZXJ0eSAnICsgJ3doZW4gdXNpbmcgdGhlIGRldGVybWluYXRlIG9yIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzIC4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICBpZiAodmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWVCdWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIF90cmFuc2Zvcm0gPSAodmFsdWVCdWZmZXIgfHwgMCkgLSAxMDA7XG5cbiAgICAgIGlmICh0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIF90cmFuc2Zvcm0gPSAtX3RyYW5zZm9ybTtcbiAgICAgIH1cblxuICAgICAgaW5saW5lU3R5bGVzLmJhcjIudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdChfdHJhbnNmb3JtLCBcIiUpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnTWF0ZXJpYWwtVUk6IHlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZUJ1ZmZlciBwcm9wZXJ0eSAnICsgJ3doZW4gdXNpbmcgdGhlIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCB2YXJpYW50ID09PSAnYnVmZmVyJyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogZGFzaGVkQ2xhc3NcbiAgfSkgOiBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGJhcjFDbGFzc05hbWUsXG4gICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIxXG4gIH0pLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnID8gbnVsbCA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogYmFyMkNsYXNzTmFtZSxcbiAgICBzdHlsZTogaW5saW5lU3R5bGVzLmJhcjJcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaW5lYXJQcm9ncmVzcy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIGFuZCBidWZmZXIgdmFyaWFudHMuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBmb3IgdGhlIGJ1ZmZlciB2YXJpYW50LlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlQnVmZmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIG9yIHF1ZXJ5IHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2J1ZmZlcicsICdxdWVyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoTGluZWFyUHJvZ3Jlc3MpOyIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyJztcbmltcG9ydCBJbnB1dEFkb3JubWVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEFkb3JubWVudCc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlJztcbmltcG9ydCBUYWJsZSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZSc7XG5pbXBvcnQgVGFibGVSb3cgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVSb3cnO1xuaW1wb3J0IFRhYmxlQ2VsbCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUNlbGwnO1xuaW1wb3J0IFRhYmxlQm9keSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUJvZHknO1xuaW1wb3J0IExpbmVhclByb2dyZXNzIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpbmVhclByb2dyZXNzJztcbmltcG9ydCBSZWZyZXNoIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9SZWZyZXNoJztcbmltcG9ydCBTZWFyY2ggZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1NlYXJjaCc7XG5pbXBvcnQgU3RvcCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU3RvcCc7XG5pbXBvcnQgRGVsZXRlIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9EZWxldGUnO1xuaW1wb3J0IE1vcmUgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL01vcmUnO1xuXG5jb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cbmNsYXNzIEFkbWluS29udGVuVmlyYWxUYWJsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICByb3dzLFxuICAgICAgaGVhZGVyLFxuICAgICAgbmFtZSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHdpdGhTZWFyY2hCb3hcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPEdyaWRcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgIGNvbnRhaW5lclxuICAgICAgICBzcGFjaW5nPXsyfVxuICAgICAgICBkaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgPlxuICAgICAgICA8R3JpZFxuICAgICAgICAgIGNsYXNzTmFtZT1cIlRvcFwiXG4gICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgaXRlbVxuICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgID5cbiAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiTGVmdFwiXG4gICAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAgICB4cz17Nn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+e2Ake2hlYWRlcn0gKCR7cm93cy5sZW5ndGh9KWB9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiUmlnaHRcIlxuICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICBkaXJlY3Rpb249XCJyb3ctcmV2ZXJzZVwiXG4gICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgIHNwYWNpbmc9ezJ9XG4gICAgICAgICAgICB4cz17Nn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICA8QnV0dG9uQmFzZT5cbiAgICAgICAgICAgICAgICA8UmVmcmVzaCAvPlxuICAgICAgICAgICAgICA8L0J1dHRvbkJhc2U+XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICB7IHdpdGhTZWFyY2hCb3ggJiYgKFxuICAgICAgICAgICAgICA8R3JpZCBpdGVtPlxuICAgICAgICAgICAgICAgIDxQYXBlcj5cbiAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiU2VhcmNoSW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICBpZD1cImlucHV0LXdpdGgtaWNvbi1zZWFyY2hpbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtgQ2FyaSAke25hbWV9YH1cbiAgICAgICAgICAgICAgICAgICAgSW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWRvcm5tZW50OiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRBZG9ybm1lbnQgcG9zaXRpb249XCJzdGFydFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0lucHV0QWRvcm5tZW50PlxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgICAgey8qIHVudHVrIHlhbmcgbGlzdHZpZXcgKi99XG4gICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT1cIlRhYmxlQ29udGFpbmVyXCI+XG4gICAgICAgICAgICA8VGFibGUgY2xhc3NOYW1lPVwiVGFibGVcIj5cbiAgICAgICAgICAgICAgPFRhYmxlQm9keSBjbGFzc05hbWU9XCJUYWJsZUJvZHlcIj5cbiAgICAgICAgICAgICAgICB7cm93cy5tYXAoKHJvdykgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIHJvdy5kdXJhdGlvbl9zdGFydC5zbGljZSg2LCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHJvdy5kdXJhdGlvbl9zdGFydC5zbGljZSgzLCA1KSwgMTApIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgcm93LmR1cmF0aW9uX3N0YXJ0LnNsaWNlKDAsIDIpLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZERhdGUgPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgcm93LmR1cmF0aW9uX2VuZC5zbGljZSg2LCAxMCksXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHJvdy5kdXJhdGlvbl9lbmQuc2xpY2UoMywgNSksIDEwKSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIHJvdy5kdXJhdGlvbl9lbmQuc2xpY2UoMCwgMiksXG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICBsZXQgZW5kRGF5ID0gYDAke2VuZERhdGUuZ2V0RGF0ZSgpfWA7XG4gICAgICAgICAgICAgICAgICBlbmREYXkgPSBlbmREYXkuc2xpY2UoLTIpO1xuXG4gICAgICAgICAgICAgICAgICBsZXQgZW5kTW9udGggPSBgMCR7ZW5kRGF0ZS5nZXRNb250aCgpICsgMX1gO1xuICAgICAgICAgICAgICAgICAgZW5kTW9udGggPSBlbmRNb250aC5zbGljZSgtMik7XG5cbiAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gKCh0b2RheSAtIHN0YXJ0RGF0ZSkgLyAoZW5kRGF0ZSAtIHN0YXJ0RGF0ZSkpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPFRhYmxlUm93IGtleT17YCR7cm93LmlkfS1yb3dgfT5cbiAgICAgICAgICAgICAgICAgICAgICA8VGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5PVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uPVwicm93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2luZz17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9ezN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeHM9ezEyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPntyb3cudGl0bGV9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzPXs2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcGVyPjxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIj57YFBlYmlzbmlzOiAke3Jvdy5zZWxsZXJ9YH08L1R5cG9ncmFwaHk+PC9QYXBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cz17Nn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlcj48VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+e2BSZWZlcnJhbDogJHtyb3cucmVmZXJyYWx9YH08L1R5cG9ncmFwaHk+PC9QYXBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cz17OH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5lYXJQcm9ncmVzcyB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcIiB2YWx1ZT17cHJvZ3Jlc3N9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeHM9ezR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJzdWJ0aXRsZTFcIiBhbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Ake2VuZERheX0tJHtlbmRNb250aH0tJHtlbmREYXRlLmdldEZ1bGxZZWFyKCl9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeHM9ezEyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjaW5nPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJyb3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9ezR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25CYXNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZWxldGUgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b25CYXNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD17NH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbkJhc2U+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0b3AgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b25CYXNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD17NH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbkJhc2U+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1vcmUgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b25CYXNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgICA8L1RhYmxlUm93PlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9UYWJsZUJvZHk+XG4gICAgICAgICAgICA8L1RhYmxlPlxuICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgIDwvR3JpZD5cbiAgICAgIDwvR3JpZD5cbiAgICApO1xuICB9XG59XG5cbkFkbWluS29udGVuVmlyYWxUYWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIG5hbWU6ICcnLFxuICBjbGFzc05hbWU6ICcnLFxuICBoZWFkZXI6ICcnLFxuICByb3dzOiBbXSxcbiAgd2l0aFNlYXJjaEJveDogZmFsc2Vcbn07XG5cbkFkbWluS29udGVuVmlyYWxUYWJsZS5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGVhZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICByb3dzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgd2l0aFNlYXJjaEJveDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFkbWluS29udGVuVmlyYWxUYWJsZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWRtaW5OYXZpZ2F0aW9uIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5OYXZpZ2F0aW9uL0FkbWluTmF2aWdhdGlvbic7XG5pbXBvcnQgQWRtaW5Lb250ZW5WaXJhbFRhYmxlIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5Lb250ZW5WaXJhbFRhYmxlL0FkbWluS29udGVuVmlyYWxUYWJsZSc7XG5pbXBvcnQgJ0NvbXBvbmVudHMvQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbi9BZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuLmNzcyc7XG5cbmNvbnN0IG5hbWUgPSAnS29udGVuIFZpcmFsJztcbmNvbnN0IGhlYWRlciA9ICdLb250ZW4gVmlyYWwgQWt0aWYnO1xuY29uc3QgaGVhZGVyMiA9ICdLb250ZW4gVmlyYWwgTm9uLUFrdGlmJztcblxuY29uc3QgYWN0aXZlRGF0YSA9IHtcbiAgaWQ6ICcxJyxcbiAgdGl0bGU6ICdJbmRpaG9tZSBQYWtldCBHYW1lcicsXG4gIHNlbGxlcjogJ0pva28nLFxuICBzdGF0dXM6ICdUUlVFJyxcbiAgcmVmZXJyYWw6IDAsXG4gIGR1cmF0aW9uX3N0YXJ0OiAnMDEvMDEvMjAxOScsXG4gIGR1cmF0aW9uX2VuZDogJzAxLzAyLzIwMTknXG59O1xuXG5jb25zdCBub25BY3RpdmVEYXRhID0ge1xuICBpZDogJzMnLFxuICB0aXRsZTogJ0J1eSAxIEdldCAxJyxcbiAgc2VsbGVyOiAnQm9kbycsXG4gIHN0YXR1czogJ0ZBTFNFJyxcbiAgcmVmZXJyYWw6IDAsXG4gIGR1cmF0aW9uX3N0YXJ0OiAnMDEvMDEvMjAxOScsXG4gIGR1cmF0aW9uX2VuZDogJzAxLzAyLzIwMTknXG59O1xuXG5jb25zdCByb3dzRGF0YSA9IFtcbiAgYWN0aXZlRGF0YSxcbiAgbm9uQWN0aXZlRGF0YVxuXTtcblxuY2xhc3MgQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBhY3RpdmVSb3dzOiByb3dzRGF0YS5maWx0ZXIocm93ID0+IHJvdy5zdGF0dXMgPT09ICdUUlVFJyksXG4gICAgICBub25BY3RpdmVSb3dzOiByb3dzRGF0YS5maWx0ZXIocm93ID0+IHJvdy5zdGF0dXMgPT09ICdGQUxTRScpXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFjdGl2ZVJvd3MsIG5vbkFjdGl2ZVJvd3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQWRtaW5LZWxvbGFLb250ZW5WaXJhbFwiPlxuICAgICAgICA8QWRtaW5OYXZpZ2F0aW9uIHVzZXJuYW1lPVwiQWRtaW5cIiBoZWFkZXI9XCJLT05URU4gVklSQUxcIiAvPlxuICAgICAgICA8QWRtaW5Lb250ZW5WaXJhbFRhYmxlXG4gICAgICAgICAgY2xhc3NOYW1lPVwiVGFiZWxcIlxuICAgICAgICAgIHJvd3M9e2FjdGl2ZVJvd3N9XG4gICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICBoZWFkZXI9e2hlYWRlcn1cbiAgICAgICAgICB3aXRoU2VhcmNoQm94XG4gICAgICAgIC8+XG4gICAgICAgIDxBZG1pbktvbnRlblZpcmFsVGFibGVcbiAgICAgICAgICBjbGFzc05hbWU9XCJUYWJlbFwiXG4gICAgICAgICAgcm93cz17bm9uQWN0aXZlUm93c31cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIGhlYWRlcj17aGVhZGVyMn1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5JztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBBZGRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BZGQnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sJztcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0TGFiZWwnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9TZWxlY3QnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ZpbGxlZElucHV0JztcbmltcG9ydCBJbnB1dEFkb3JubWVudCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEFkb3JubWVudCc7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DaXJjdWxhclByb2dyZXNzJztcblxuY2xhc3MgU2VsbGVyRGFzaGJvYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaW1hZ2VJY29uOiA8QWRkSWNvbiBmb250U2l6ZT1cImluaGVyaXRcIiAvPixcbiAgICAgICAgICAgICAgICAgIHRhcmdldFVybDogJycsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnS29udGVuJyxcbiAgICAgICAgICAgICAgICAgIGhlYWRlcjogJ0tlbG9sYSBLb250ZW4gVmlyYWwnLFxuICAgICAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgICAgICBhY3RpdmVDb3VudDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGltYWdlSWNvbjogPEdyb3VwSWNvbiBmb250U2l6ZT1cImluaGVyaXRcIiAvPixcbiAgICAgICAgICAgICAgICAgIHRhcmdldFVybDogJycsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnUHJvbW90b3InLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyOiAnUHJvbW90b3IgVmlyYWxtdScsXG4gICAgICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgICAgfVxuXG5oYW5kbGVDb250ZW50Rm9ybVBvcE91dCgpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgbmFtZSwgZW1haWwgfSA9IHRoaXMuc3RhdGU7XG4gICAgYWxlcnQoYFlvdXIgc3RhdGUgdmFsdWVzOiBcXG4gXG4gICAgICAgICAgICBuYW1lOiAke25hbWV9IFxcbiBcbiAgICAgICAgICAgIGVtYWlsOiAke2VtYWlsfWApO1xuICAgIH07XG5cbmhhbmRsZUNsaWNrKGluZGV4KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvcHJvbW90b3Itdmlldyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9jb250ZW50cy1mb3JtJztcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgYnV0dG9ucyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlNlbGxlckRhc2hib2FyZFNjcmVlblwiPlxuICAgICAgICAgICAgPEFkbWluTmF2aWdhdGlvbiB1c2VybmFtZT1cIkFkbWluXCIgLz5cbiAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICAgIGRpcmVjdGlvbj1cInJvd1wiXG4gICAgICAgICAgICBqdXN0aWZ5PVwiY2VudGVyXCJcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIkJ1dHRvbnNDb250YWluZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAge2J1dHRvbnMubWFwKChidXR0b24sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgPEJ1dHRvbkJhc2VcbiAgICAgICAgICAgICAgICBrZXk9e2J1dHRvbi5uYW1lfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIkJ1dHRvblwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17ZSA9PiB0aGlzLmhhbmRsZUNsaWNrKGluZGV4LCBlKX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEdyaWRcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgICAgc3BhY2luZz17MH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQnV0dG9uc0NvbnRhaW5lclwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDFcIj57IGJ1dHRvbi5pbWFnZUljb24gfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg1XCI+eyBidXR0b24uaGVhZGVyIH08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgIDxHcmlkXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnk9XCJmbGV4LXN0YXJ0XCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwic3VidGl0bGUxXCI+eyBgVG90YWwgJHtidXR0b24ubmFtZX06ICR7YnV0dG9uLmNvdW50fWAgfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cInN1YnRpdGxlMVwiPnsgYFRvdGFsIEFrdGlmOiAke2J1dHRvbi5hY3RpdmVDb3VudH1gIH08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgPC9CdXR0b25CYXNlPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsbGVyRGFzaGJvYXJkOyIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBMb2dpblNjcmVlbiBmcm9tICdDb21wb25lbnRzL0xvZ2luU2NyZWVuL0xvZ2luU2NyZWVuJztcbmltcG9ydCBSZWdpc3RlclNjcmVlbiBmcm9tICdDb21wb25lbnRzL1JlZ2lzdGVyU2NyZWVuL1JlZ2lzdGVyU2NyZWVuJztcbmltcG9ydCBBZG1pbkRhc2hib2FyZFNjcmVlbiBmcm9tICdDb21wb25lbnRzL0FkbWluRGFzaGJvYXJkU2NyZWVuL0FkbWluRGFzaGJvYXJkU2NyZWVuJztcbmltcG9ydCBQcm9tb3RvckRhdGFiYXNlU2NyZWVuIGZyb20gJ0NvbXBvbmVudHMvUHJvbW90b3JEYXRhYmFzZVNjcmVlbi9Qcm9tb3RvckRhdGFiYXNlU2NyZWVuJztcbmltcG9ydCBTZWxsZXJEYXRhYmFzZVNjcmVlbiBmcm9tICdDb21wb25lbnRzL1NlbGxlckRhdGFiYXNlU2NyZWVuL1NlbGxlckRhdGFiYXNlU2NyZWVuJztcbmltcG9ydCBBZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuIGZyb20gJ0NvbXBvbmVudHMvQWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbi9BZG1pbktlbG9sYUtvbnRlblZpcmFsU2NyZWVuJztcbmltcG9ydCBTZWxsZXJEYXNoYm9hcmQgZnJvbSAnLi9Db21wb25lbnRzL1NlbGxlckRhc2hib2FyZC9TZWxsZXJEYXNoYm9hcmQnO1xuXG5pbXBvcnQgJy4vQXBwLmNzcyc7XG5cblxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxSb3V0ZXI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJBcHBcIj5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGV4YWN0IGNvbXBvbmVudD17TG9naW5TY3JlZW59IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sb2dpblwiIGV4YWN0IGNvbXBvbmVudD17TG9naW5TY3JlZW59IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9yZWdpc3RlclwiIGV4YWN0IGNvbXBvbmVudD17UmVnaXN0ZXJTY3JlZW59IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zZWxsZXItZGFzaGJvYXJkXCIgZXhhY3QgY29tcG9uZW50PXtTZWxsZXJEYXNoYm9hcmR9IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9hZG1pbi1kYXNoYm9hcmRcIiBleGFjdCBjb21wb25lbnQ9e0FkbWluRGFzaGJvYXJkU2NyZWVufSAvPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYWRtaW4ta2Vsb2xhLWtvbnRlbi12aXJhbFwiIGV4YWN0IGNvbXBvbmVudD17QWRtaW5LZWxvbGFLb250ZW5WaXJhbFNjcmVlbn0gLz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlbGxlci1kYXRhYmFzZVwiIGV4YWN0IGNvbXBvbmVudD17U2VsbGVyRGF0YWJhc2VTY3JlZW59IC8+XG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wcm9tb3Rvci1kYXRhYmFzZVwiIGV4YWN0IGNvbXBvbmVudD17UHJvbW90b3JEYXRhYmFzZVNjcmVlbn0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xuaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBiYXNlQ2xhc3NlcyA9IG9wdGlvbnMuYmFzZUNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzID0gb3B0aW9ucy5uZXdDbGFzc2VzLFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQ7XG5cbiAgaWYgKCFuZXdDbGFzc2VzKSB7XG4gICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICB9XG5cbiAgdmFyIG5leHRDbGFzc2VzID0gX2V4dGVuZHMoe30sIGJhc2VDbGFzc2VzKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgbmV3Q2xhc3NlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBbXCJNYXRlcmlhbC1VSTogdGhlIHZhbHVlIGBcIi5jb25jYXQobmV3Q2xhc3NlcywgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgb2YgXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiIGlzIGluY29ycmVjdC5cIiksICdZb3UgbWlnaHQgd2FudCB0byB1c2UgdGhlIGNsYXNzTmFtZSBwcm9wZXJ0eSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gYmFzZUNsYXNzZXM7XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGJhc2VDbGFzc2VzW2tleV0gfHwgIW5ld0NsYXNzZXNba2V5XSwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3BlcnR5IGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIW5ld0NsYXNzZXNba2V5XSB8fCB0eXBlb2YgbmV3Q2xhc3Nlc1trZXldID09PSAnc3RyaW5nJywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3BlcnR5IGlzIG5vdCB2YWxpZCBmb3IgXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgbmVlZCB0byBwcm92aWRlIGEgbm9uIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mOiBcIi5jb25jYXQobmV3Q2xhc3Nlc1trZXldLCBcIi5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZUNsYXNzZXM7IiwiLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBtdWx0aUtleVN0b3JlOyIsInZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICcuLi9UaGVtZVByb3ZpZGVyL25lc3RlZCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGxpc3Qgb2YgdGhlIHN0eWxlIHJ1bGUgbmFtZSB3ZSB1c2UgYXMgZHJvcCBpbiByZXBsYWNlbWVudCBmb3IgdGhlIGJ1aWx0LWluXG4gKiBwc2V1ZG8gY2xhc3NlcyAoOmNoZWNrZWQsIDpkaXNhYmxlZCwgOmZvY3VzZWQsIGV0Yy4pLlxuICpcbiAqIFdoeSBkbyB0aGV5IGV4aXN0IGluIHRoZSBmaXJzdCBwbGFjZT9cbiAqIFRoZXNlIGNsYXNzZXMgYXJlIHVzZWQgYXQgYSBzcGVjaWZpY2l0eSBvZiAyLlxuICogSXQgYWxsb3dzIHRoZW0gdG8gb3ZlcnJpZGUgcHJldmlvdXNseSBkZWZpbmllZCBzdHlsZXMgYXMgd2VsbCBhc1xuICogYmVpbmcgdW50b3VjaGVkIGJ5IHNpbXBsZSB1c2VyIG92ZXJyaWRlcy5cbiAqL1xuXG52YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddOyAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbi8vIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXQuXG4vLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuLy9cbi8vIEl0J3MgaW5zcGlyZWQgYnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iLzRlNmEwNWRkM2Y3YjY1NzJmZGQzYWIyMTY4NjFkOWU0NDZjMjAzMzEvc3JjL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPSBvcHRpb25zLmRpc2FibGVHbG9iYWwsXG4gICAgICBkaXNhYmxlR2xvYmFsID0gX29wdGlvbnMkZGlzYWJsZUdsb2JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGRpc2FibGVHbG9iYSxcbiAgICAgIF9vcHRpb25zJHByb2R1Y3Rpb25QciA9IG9wdGlvbnMucHJvZHVjdGlvblByZWZpeCxcbiAgICAgIHByb2R1Y3Rpb25QcmVmaXggPSBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPT09IHZvaWQgMCA/ICdqc3MnIDogX29wdGlvbnMkcHJvZHVjdGlvblByLFxuICAgICAgX29wdGlvbnMkc2VlZCA9IG9wdGlvbnMuc2VlZCxcbiAgICAgIHNlZWQgPSBfb3B0aW9ucyRzZWVkID09PSB2b2lkIDAgPyAnJyA6IF9vcHRpb25zJHNlZWQ7XG4gIHZhciBzZWVkUHJlZml4ID0gc2VlZCA9PT0gJycgPyAnJyA6IFwiXCIuY29uY2F0KHNlZWQsIFwiLVwiKTtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHJ1bGVDb3VudGVyIDwgMWUxMCwgWydNYXRlcmlhbC1VSTogeW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIHJ1bGVDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCcnKSkgOiB2b2lkIDA7XG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIHZhciBzdWZmaXggPSBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChydWxlQ291bnRlcik7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVSdWxlIH0gZnJvbSAnanNzJztcblxudmFyIG5vdyA9IERhdGUubm93KCk7XG52YXIgZm5WYWx1ZXNOcyA9IFwiZm5WYWx1ZXNcIiArIG5vdztcbnZhciBmblJ1bGVOcyA9IFwiZm5TdHlsZVwiICsgKytub3c7XG5mdW5jdGlvbiBmdW5jdGlvblBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICAgIHJ1bGVbZm5SdWxlTnNdID0gZGVjbDtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb24gdmFsdWVzIGZyb20gdGhlIGRlY2xhcmF0aW9uLCBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvcmUgdW5hd2FyZSBvZiB0aGVtLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGF0IG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbnMgb24gZWFjaCBzdHlsZSB1cGRhdGUsIHNpbmNlIHRoaXMgY2FuIGhhcHBlbiBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgb2YgZnVuY3Rpb24gcnVsZXMuXG4gICAgICBpZiAoZm5WYWx1ZXNOcyBpbiBydWxlIHx8IGZuUnVsZU5zIGluIHJ1bGUpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBmblZhbHVlcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBmblZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICAgICAgcnVsZVtmblZhbHVlc05zXSA9IGZuVmFsdWVzO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICAgIHZhciBmblJ1bGUgPSBzdHlsZVJ1bGVbZm5SdWxlTnNdOyAvLyBJZiB3ZSBoYXZlIGEgc3R5bGUgZnVuY3Rpb24sIHRoZSBlbnRpcmUgcnVsZSBpcyBkeW5hbWljIGFuZCBzdHlsZSBvYmplY3RcbiAgICAgIC8vIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGF0IGZ1bmN0aW9uLlxuXG4gICAgICBpZiAoZm5SdWxlKSB7XG4gICAgICAgIHN0eWxlUnVsZS5zdHlsZSA9IGZuUnVsZShkYXRhKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZuVmFsdWVzID0gc3R5bGVSdWxlW2ZuVmFsdWVzTnNdOyAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuXG4gICAgICBpZiAoZm5WYWx1ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIGZuVmFsdWVzW3Byb3BdKGRhdGEpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb25QbHVnaW47XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBSdWxlTGlzdCB9IGZyb20gJ2pzcyc7XG5cbnZhciBhdCA9ICdAZ2xvYmFsJztcbnZhciBhdFByZWZpeCA9ICdAZ2xvYmFsICc7XG5cbnZhciBHbG9iYWxDb250YWluZXJSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsQ29udGFpbmVyUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsQ29udGFpbmVyUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IGtleS5zdWJzdHIoYXRQcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLnJ1bGUgPSBvcHRpb25zLmpzcy5jcmVhdGVSdWxlKHNlbGVjdG9yLCBzdHlsZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gR2xvYmFsUHJlZml4ZWRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGUgPyB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucykgOiAnJztcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsUHJlZml4ZWRSdWxlO1xufSgpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xuXG5mdW5jdGlvbiBhZGRTY29wZShzZWxlY3Rvciwgc2NvcGUpIHtcbiAgdmFyIHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgdmFyIHNjb3BlZCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBzY29wZWQgKz0gc2NvcGUgKyBcIiBcIiArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuXG4gIHJldHVybiBzY29wZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcbiAgdmFyIHJ1bGVzID0gc3R5bGUgPyBzdHlsZVthdF0gOiBudWxsO1xuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcFswXSAhPT0gJ0AnIHx8IHByb3Auc3Vic3RyKDAsIGF0Lmxlbmd0aCkgIT09IGF0KSBjb250aW51ZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBhZGRTY29wZShwcm9wLnN1YnN0cihhdC5sZW5ndGgpLCBydWxlLnNlbGVjdG9yKTtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuYW1lID09PSBhdCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBhdFByZWZpeC5sZW5ndGgpID09PSBhdFByZWZpeCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudCAmJiBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5zY29wZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY29wZWQgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybjtcbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsXG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NHbG9iYWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbnRhaW5lci5nZXRSdWxlKGtleSkgfHwgc2hlZXQgJiYgc2hlZXQuZ2V0UnVsZShrZXkpO1xuXG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlID0gcnVsZTtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQ291bGQgbm90IGZpbmQgdGhlIHJlZmVyZW5jZWQgcnVsZSBcIiArIGtleSArIFwiIGluIFwiICsgKGNvbnRhaW5lci5vcHRpb25zLm1ldGEgfHwgY29udGFpbmVyLnRvU3RyaW5nKCkpICsgXCIuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudFNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudFNlbGVjdG9yc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXN0ZWRTZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG5lc3RlZCA9IG5lc3RlZFNlbGVjdG9yc1tqXTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICcsICc7IC8vIFJlcGxhY2UgYWxsICYgYnkgdGhlIHBhcmVudCBvciBwcmVmaXggJiB3aXRoIHRoZSBwYXJlbnQuXG5cbiAgICAgICAgcmVzdWx0ICs9IG5lc3RlZC5pbmRleE9mKCcmJykgIT09IC0xID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgXCIgXCIgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChvcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBvcHRpb25zLmluZGV4ICsgMVxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBjb250YWluZXIgPSBzdHlsZVJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHJlcGxhY2VSZWY7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBwcm9wLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gICAgICB2YXIgaXNOZXN0ZWRDb25kaXRpb25hbCA9IHByb3BbMF0gPT09ICdAJztcbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMoc3R5bGVSdWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgc3R5bGVSdWxlLnNlbGVjdG9yKTsgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuXG4gICAgICAgIGlmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCk7IC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuICAgICAgICBjb250YWluZXIuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICBjb250YWluZXIuYWRkUnVsZShwcm9wLCB7fSwgb3B0aW9ucykgLy8gRmxvdyBleHBlY3RzIG1vcmUgb3B0aW9ucyBidXQgdGhleSBhcmVuJ3QgcmVxdWlyZWRcbiAgICAgICAgLy8gQW5kIGZsb3cgZG9lc24ndCBrbm93IHRoaXMgd2lsbCBhbHdheXMgYmUgYSBTdHlsZVJ1bGUgd2hpY2ggaGFzIHRoZSBhZGRSdWxlIG1ldGhvZFxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgPyB3aW5kb3cuQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgPyB3aW5kb3cuQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCA/IHdpbmRvdy5DU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gIC8vIE1hcmdpbiBwcm9wZXJ0aWVzXG4gIG1hcmdpbjogcHgsXG4gICdtYXJnaW4tYm90dG9tJzogcHgsXG4gICdtYXJnaW4tbGVmdCc6IHB4LFxuICAnbWFyZ2luLXJpZ2h0JzogcHgsXG4gICdtYXJnaW4tdG9wJzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyBcIi1cIiArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmIChvcHRpb25zW3Byb3BdKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHZhbHVlICsgb3B0aW9uc1twcm9wXTtcbiAgICB9XG5cbiAgICBpZiAodW5pdHNbcHJvcF0pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdW5pdHNbcHJvcF0gPT09ICdmdW5jdGlvbicgPyB1bml0c1twcm9wXSh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXRzW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRVbml0KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBjYW1lbENhc2VkT3B0aW9ucyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgc3R5bGVbcHJvcF0gPSBpdGVyYXRlKHByb3AsIHN0eWxlW3Byb3BdLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBpdGVyYXRlKHByb3AsIHZhbHVlLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRVbml0O1xuIiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn0iLCJpbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5JztcblxuLy8gRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG52YXIganMgPSAnJztcbnZhciBjc3MgPSAnJztcbnZhciB2ZW5kb3IgPSAnJztcbnZhciBicm93c2VyID0gJyc7XG52YXIgaXNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsgLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgLy8gT3JkZXIgbWF0dGVycy4gV2UgbmVlZCB0byBjaGVjayBXZWJraXQgdGhlIGxhc3Qgb25lIGJlY2F1c2VcbiAgLy8gb3RoZXIgdmVuZG9ycyB1c2UgdG8gYWRkIFdlYmtpdCBwcmVmaXhlcyB0byBzb21lIHByb3BlcnRpZXNcbiAgdmFyIGpzQ3NzTWFwID0ge1xuICAgIE1vejogJy1tb3otJyxcbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuXG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXG4gICAgICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcblxuICB2YXIgdGVzdFByb3AgPSAnVHJhbnNmb3JtJztcblxuICBmb3IgKHZhciBrZXkgaW4ganNDc3NNYXApIHtcbiAgICBpZiAoa2V5ICsgdGVzdFByb3AgaW4gc3R5bGUpIHtcbiAgICAgIGpzID0ga2V5O1xuICAgICAgY3NzID0ganNDc3NNYXBba2V5XTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBFZGdlIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICdtc0h5cGhlbnMnIGluIHN0eWxlKSB7XG4gICAganMgPSAnbXMnO1xuICAgIGNzcyA9IGpzQ3NzTWFwLm1zO1xuICAgIGJyb3dzZXIgPSAnZWRnZSc7XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgU2FmYXJpIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICctYXBwbGUtdHJhaWxpbmctd29yZCcgaW4gc3R5bGUpIHtcbiAgICB2ZW5kb3IgPSAnYXBwbGUnO1xuICB9XG59XG4vKipcbiAqIFZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEB0eXBlIHt7anM6IFN0cmluZywgY3NzOiBTdHJpbmcsIHZlbmRvcjogU3RyaW5nLCBicm93c2VyOiBTdHJpbmd9fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbnZhciBwcmVmaXggPSB7XG4gIGpzOiBqcyxcbiAgY3NzOiBjc3MsXG4gIHZlbmRvcjogdmVuZG9yLFxuICBicm93c2VyOiBicm93c2VyLFxuICBpc1RvdWNoOiBpc1RvdWNoXG59O1xuXG4vKipcbiAqIFRlc3QgaWYgYSBrZXlmcmFtZSBhdC1ydWxlIHNob3VsZCBiZSBwcmVmaXhlZCBvciBub3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZEtleWZyYW1lcyhrZXkpIHtcbiAgLy8gS2V5ZnJhbWVzIGlzIGFscmVhZHkgcHJlZml4ZWQuIGUuZy4ga2V5ID0gJ0Atd2Via2l0LWtleWZyYW1lcyBhJ1xuICBpZiAoa2V5WzFdID09PSAnLScpIHJldHVybiBrZXk7IC8vIE5vIG5lZWQgdG8gcHJlZml4IElFL0VkZ2UuIE9sZGVyIGJyb3dzZXJzIHdpbGwgaWdub3JlIHVuc3VwcG9ydGVkIHJ1bGVzLlxuICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9a2V5ZnJhbWVzXG5cbiAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIGtleTtcbiAgcmV0dXJuIFwiQFwiICsgcHJlZml4LmNzcyArIFwia2V5ZnJhbWVzXCIgKyBrZXkuc3Vic3RyKDEwKTtcbn1cblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWFwcGVhcmFuY2VcblxudmFyIGFwcGVhcmVuY2UgPSB7XG4gIG5vUHJlZmlsbDogWydhcHBlYXJhbmNlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdhcHBlYXJhbmNlJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxudmFyIHJlZ0V4cCA9IC9bLVxcc10rKC4pPy9nO1xuLyoqXG4gKiBSZXBsYWNlcyB0aGUgbGV0dGVyIHdpdGggdGhlIGNhcGl0YWwgbGV0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gY1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdG9VcHBlcihtYXRjaCwgYykge1xuICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufVxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gY2FtZWwtY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ0V4cCwgdG9VcHBlcik7XG59XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIHBhc2NhbCBjYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXNjYWxpemUoc3RyKSB7XG4gIHJldHVybiBjYW1lbGl6ZShcIi1cIiArIHN0cik7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tdWx0aWNvbHVtblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy80OTFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMTc3XG5cbnZhciBicmVha1Byb3BzT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eYnJlYWstLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGpzUHJvcCA9IFwiV2Via2l0Q29sdW1uXCIgKyBwYXNjYWxpemUocHJvcCk7XG4gICAgICByZXR1cm4ganNQcm9wIGluIHN0eWxlID8gcHJlZml4LmNzcyArIFwiY29sdW1uLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSB7XG4gICAgICB2YXIgX2pzUHJvcCA9IFwicGFnZVwiICsgcGFzY2FsaXplKHByb3ApO1xuXG4gICAgICByZXR1cm4gX2pzUHJvcCBpbiBzdHlsZSA/IFwicGFnZS1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwID0ge1xuICBmbGV4OiAnYm94LWZsZXgnLFxuICAnZmxleC1ncm93JzogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZGlyZWN0aW9uJzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgb3JkZXI6ICdib3gtb3JkaW5hbC1ncm91cCcsXG4gICdhbGlnbi1pdGVtcyc6ICdib3gtYWxpZ24nLFxuICAnZmxleC1mbG93JzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdib3gtcGFjaydcbn07XG52YXIgcHJvcEtleXMgPSBPYmplY3Qua2V5cyhwcm9wTWFwKTtcblxudmFyIHByZWZpeENzcyA9IGZ1bmN0aW9uIHByZWZpeENzcyhwKSB7XG4gIHJldHVybiBwcmVmaXguY3NzICsgcDtcbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMDkuXG5cblxudmFyIGZsZXgyMDA5ID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIF9yZWYpIHtcbiAgICB2YXIgbXVsdGlwbGUgPSBfcmVmLm11bHRpcGxlO1xuXG4gICAgaWYgKHByb3BLZXlzLmluZGV4T2YocHJvcCkgPiAtMSkge1xuICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCQxID0ge1xuICAnZmxleC1ncm93JzogJ2ZsZXgtcG9zaXRpdmUnLFxuICAnZmxleC1zaHJpbmsnOiAnZmxleC1uZWdhdGl2ZScsXG4gICdmbGV4LWJhc2lzJzogJ2ZsZXgtcHJlZmVycmVkLXNpemUnLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2ZsZXgtcGFjaycsXG4gIG9yZGVyOiAnZmxleC1vcmRlcicsXG4gICdhbGlnbi1pdGVtcyc6ICdmbGV4LWFsaWduJyxcbiAgJ2FsaWduLWNvbnRlbnQnOiAnZmxleC1saW5lLXBhY2snIC8vICdhbGlnbi1zZWxmJyBpcyBoYW5kbGVkIGJ5ICdhbGlnbi1zZWxmJyBwbHVnaW4uXG4gIC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMTIuXG5cbn07XG52YXIgZmxleDIwMTIgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuICAgIGlmICghbmV3UHJvcCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW92ZXJzY3JvbGwtYmVoYXZpb3JcblxudmFyIG92ZXJzY3JvbGxCZWhhdmlvciA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ292ZXJzY3JvbGwtYmVoYXZpb3InKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIFwic2Nyb2xsLWNoYWluaW5nXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciBwcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIHBhc2NhbGl6ZWQgPSBwYXNjYWxpemUocHJvcCk7IC8vIFJldHVybiBjdXN0b20gQ1NTIHZhcmlhYmxlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJykgcmV0dXJuIHByb3A7IC8vIFJldHVybiBhbHJlYWR5IHByZWZpeGVkIHZhbHVlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJyAmJiBwcm9wWzFdID09PSAnLScpIHJldHVybiBwcm9wO1xuICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7IC8vIFRyeSB3ZWJraXQgZmFsbGJhY2suXG5cbiAgICBpZiAocHJlZml4LmpzICE9PSAnV2Via2l0JyAmJiBcIldlYmtpdFwiICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2Nyb2xsLXNuYXBcblxudmFyIHNjcm9sbFNuYXAgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3Auc3Vic3RyaW5nKDAsIDExKSAhPT0gJ3Njcm9sbC1zbmFwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmcuXG4vLyBDU1Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuXG52YXIgdW5wcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHByb3ApIGluIHN0eWxlID8gcHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9d3JpdGluZy1tb2RlXG5cbnZhciB3cml0aW5nTW9kZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3dyaXRpbmctbW9kZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnd3JpdGluZy1tb2RlJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcgfHwgcHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIHBsdWdpbnMgPSBbXG4vLyAgIC4uLnBsdWdpbnMsXG4vLyAgICBicmVha1Byb3BzT2xkLFxuLy8gICAgaW5saW5lTG9naWNhbE9sZCxcbi8vICAgIHVucHJlZml4ZWQsXG4vLyAgICBwcmVmaXhlZCxcbi8vICAgIHNjcm9sbFNuYXAsXG4vLyAgICBmbGV4MjAxMixcbi8vICAgIGZsZXgyMDA5XG4vLyBdXG4vLyBQbHVnaW5zIHdpdGhvdXQgJ25vUHJlZmlsbCcgdmFsdWUsIGdvaW5nIGxhc3QuXG4vLyAnZmxleC0qJyBwbHVnaW5zIHNob3VsZCBiZSBhdCB0aGUgYm90dG9tLlxuLy8gJ2ZsZXgyMDA5JyBnb2luZyBhZnRlciAnZmxleDIwMTInLlxuLy8gJ3ByZWZpeGVkJyBnb2luZyBhZnRlciAndW5wcmVmaXhlZCdcblxudmFyIHBsdWdpbnMgPSBbYXBwZWFyZW5jZSwgY29sb3JBZGp1c3QsIG1hc2ssIHRleHRPcmllbnRhdGlvbiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB3cml0aW5nTW9kZSwgYnJlYWtQcm9wc09sZCwgaW5saW5lTG9naWNhbE9sZCwgdW5wcmVmaXhlZCwgcHJlZml4ZWQsIHNjcm9sbFNuYXAsIG92ZXJzY3JvbGxCZWhhdmlvciwgZmxleDIwMTIsIGZsZXgyMDA5XTtcbnZhciBwcm9wZXJ0eURldGVjdG9ycyA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSkubWFwKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSk7XG52YXIgbm9QcmVmaWxsID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAubm9QcmVmaWxsO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhLCBwKSB7XG4gIGEucHVzaC5hcHBseShhLCBfdG9Db25zdW1hYmxlQXJyYXkocC5ub1ByZWZpbGwpKTtcbiAgcmV0dXJuIGE7XG59LCBbXSk7XG5cbnZhciBlbDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgLy8gT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gIC8vXG4gIC8vIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gIC8vIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgLy8gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG5cbiAgZm9yICh2YXIga2V5JDEgaW4gY29tcHV0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFpc05hTihrZXkkMSkpIGNhY2hlW2NvbXB1dGVkW2tleSQxXV0gPSBjb21wdXRlZFtrZXkkMV07XG4gIH0gLy8gUHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjb3JyZWN0bHkgZGV0ZWN0ZWQgdXNpbmcgdGhlXG4gIC8vIGNhY2hlIHByZWZpbGwgbWV0aG9kLlxuXG5cbiAgbm9QcmVmaWxsLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gZGVsZXRlIGNhY2hlW3hdO1xuICB9KTtcbn1cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gcHJvcGVydHkgZnJvbSB0aGUgY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZVtwcm9wXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICB9IC8vIENoZWNrIGlmICd0cmFuc2l0aW9uJyBvciAndHJhbnNmb3JtJyBuYXRpdmVseSBzdXBwb3J0ZWQgaW4gYnJvd3Nlci5cblxuXG4gIGlmIChwcm9wID09PSAndHJhbnNpdGlvbicgfHwgcHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICBvcHRpb25zW3Byb3BdID0gcHJvcCBpbiBlbC5zdHlsZTtcbiAgfSAvLyBGaW5kIGEgcGx1Z2luIGZvciBjdXJyZW50IHByZWZpeCBwcm9wZXJ0eS5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlEZXRlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3BlcnR5RGV0ZWN0b3JzW2ldKHByb3AsIGVsLnN0eWxlLCBvcHRpb25zKTsgLy8gQnJlYWsgbG9vcCwgaWYgdmFsdWUgZm91bmQuXG5cbiAgICBpZiAoY2FjaGVbcHJvcF0pIGJyZWFrO1xuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cbiAgLy8gRmlyZWZveCBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBmb3IgaW52YWxpZCBwcm9wZXJ0aWVzLCBlLmcuLCBcIjBcIi5cblxuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbcHJvcF0gPSAnJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiAxLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24nOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5JzogMVxufTtcbnZhciB0cmFuc1Byb3BzUmVnRXhwID0gLyheXFxzKltcXHctXSspfCwgKFxccypbXFx3LV0rKSg/IVteKCldKlxcKSkvZztcbnZhciBlbCQxO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIHRyYW5zaXRpb24vdHJhbnNmb3JtIGlmIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMVxuICogQHBhcmFtIHtTdHJpbmd9IHAyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2sobWF0Y2gsIHAxLCBwMikge1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICByZXR1cm4gcDEgPyBzdXBwb3J0ZWRQcm9wZXJ0eShwMSkgOiBcIiwgXCIgKyBzdXBwb3J0ZWRQcm9wZXJ0eShwMik7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSkgcmV0dXJuIHZhbHVlOyAvLyBJdCBpcyBhIHN0cmluZyBvciBhIG51bWJlciBhcyBhIHN0cmluZyBsaWtlICcxJy5cbiAgLy8gV2Ugd2FudCBvbmx5IHByZWZpeGFibGUgdmFsdWVzIGhlcmUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuICBpZiAodHlwZW9mIHByZWZpeGVkVmFsdWUgIT09ICdzdHJpbmcnIHx8ICFpc05hTihwYXJzZUludChwcmVmaXhlZFZhbHVlLCAxMCkpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG4gIH0gLy8gQ3JlYXRlIGNhY2hlIGtleSBmb3IgY3VycmVudCB2YWx1ZS5cblxuXG4gIHZhciBjYWNoZUtleSA9IHByb3BlcnR5ICsgcHJlZml4ZWRWYWx1ZTsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHZhbHVlIGZyb20gY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZSQxW2NhY2hlS2V5XSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xuICB9IC8vIElFIGNhbiBldmVuIHRocm93IGFuIGVycm9yIGluIHNvbWUgY2FzZXMsIGZvciBlLmcuIHN0eWxlLmNvbnRlbnQgPSAnYmFyJy5cblxuXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmICd0cmFuc2l0aW9uJyBvciAndHJhbnNpdGlvbi1wcm9wZXJ0eScgcHJvcGVydHkuXG5cblxuICBpZiAodHJhbnNpdGlvblByb3BlcnRpZXNbcHJvcGVydHldKSB7XG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeGVkVmFsdWUucmVwbGFjZSh0cmFuc1Byb3BzUmVnRXhwLCBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgIC8vIFZhbHVlIHdpdGggYSB2ZW5kb3IgcHJlZml4LlxuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXguY3NzICsgcHJlZml4ZWRWYWx1ZTsgLy8gSGFyZGNvZGUgdGVzdCB0byBjb252ZXJ0IFwiZmxleFwiIHRvIFwiLW1zLWZsZXhib3hcIiBmb3IgSUUxMC5cblxuICAgIGlmIChwcmVmaXhlZFZhbHVlID09PSAnLW1zLWZsZXgnKSBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICctbXMtZmxleGJveCc7IC8vIFRlc3QgcHJlZml4ZWQgdmFsdWUuXG5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7IC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuXG4gICAgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuXG5cbiAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnJzsgLy8gV3JpdGUgY3VycmVudCB2YWx1ZSB0byBjYWNoZS5cblxuICBjYWNoZSQxW2NhY2hlS2V5XSA9IHByZWZpeGVkVmFsdWU7XG4gIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbn1cblxuZXhwb3J0IHsgcHJlZml4LCBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFByb3BlcnR5LCBzdXBwb3J0ZWRWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfSBmcm9tICdjc3MtdmVuZG9yJztcbmltcG9ydCB7IHRvQ3NzVmFsdWUgfSBmcm9tICdqc3MnO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgdmFyIGF0UnVsZSA9IHJ1bGU7XG4gICAgICBhdFJ1bGUuYXQgPSBzdXBwb3J0ZWRLZXlmcmFtZXMoYXRSdWxlLmF0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgdmFyIGNoYW5nZVByb3AgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcbiAgICAgIHZhciBjaGFuZ2VWYWx1ZSA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFZhbHVlJCQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJCQxICYmIHN1cHBvcnRlZFZhbHVlJCQxICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUkJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWRWYWx1ZShwcm9wLCB0b0Nzc1ZhbHVlKHZhbHVlKSkgfHwgdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGUsXG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzVmVuZG9yUHJlZml4ZXI7XG4iLCIvKipcbiAqIFNvcnQgcHJvcHMgYnkgbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBqc3NQcm9wc1NvcnQoKSB7XG4gIHZhciBzb3J0ID0gZnVuY3Rpb24gc29ydChwcm9wMCwgcHJvcDEpIHtcbiAgICBpZiAocHJvcDAubGVuZ3RoID09PSBwcm9wMS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBwcm9wMCA+IHByb3AxID8gMSA6IC0xO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgICAgdmFyIHByb3BzID0gT2JqZWN0LmtleXMoc3R5bGUpLnNvcnQoc29ydCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3U3R5bGVbcHJvcHNbaV1dID0gc3R5bGVbcHJvcHNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3U3R5bGU7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NQcm9wc1NvcnQ7XG4iLCJpbXBvcnQgZnVuY3Rpb25zIGZyb20gJ2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbic7XG5pbXBvcnQgZ2xvYmFsIGZyb20gJ2pzcy1wbHVnaW4tZ2xvYmFsJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnanNzLXBsdWdpbi1uZXN0ZWQnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdqc3MtcGx1Z2luLWNhbWVsLWNhc2UnO1xuaW1wb3J0IGRlZmF1bHRVbml0IGZyb20gJ2pzcy1wbHVnaW4tZGVmYXVsdC11bml0JztcbmltcG9ydCB2ZW5kb3JQcmVmaXhlciBmcm9tICdqc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlcic7XG5pbXBvcnQgcHJvcHNTb3J0IGZyb20gJ2pzcy1wbHVnaW4tcHJvcHMtc29ydCc7IC8vIFN1YnNldCBvZiBqc3MtcHJlc2V0LWRlZmF1bHQgd2l0aCBvbmx5IHRoZSBwbHVnaW5zIHRoZSBNYXRlcmlhbC1VSSBjb21wb25lbnRzIGFyZSB1c2luZy5cblxuZnVuY3Rpb24ganNzUHJlc2V0KCkge1xuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtmdW5jdGlvbnMoKSwgZ2xvYmFsKCksIG5lc3RlZCgpLCBjYW1lbENhc2UoKSwgZGVmYXVsdFVuaXQoKSwgLy8gRGlzYWJsZSB0aGUgdmVuZG9yIHByZWZpeGVyIHNlcnZlci1zaWRlLCBpdCBkb2VzIG5vdGhpbmcuXG4gICAgLy8gVGhpcyB3YXksIHdlIGNhbiBnZXQgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAgICAvLyBJbiB0aGUgZG9jdW1lbnRhdGlvbiwgd2UgYXJlIHVzaW5nIGBhdXRvcHJlZml4ZXJgIHRvIHNvbHZlIHRoaXMgcHJvYmxlbS5cbiAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2ZW5kb3JQcmVmaXhlcigpLCBwcm9wc1NvcnQoKV1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJlc2V0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSBmcm9tICcuLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdqc3MnO1xuaW1wb3J0IGpzc1ByZXNldCBmcm9tICcuLi9qc3NQcmVzZXQnOyAvLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cblxudmFyIGpzcyA9IGNyZWF0ZShqc3NQcmVzZXQoKSk7IC8vIFVzZSBhIHNpbmdsZXRvbiBvciB0aGUgcHJvdmlkZWQgb25lIGJ5IHRoZSBjb250ZXh0LlxuLy9cbi8vIFRoZSBjb3VudGVyLWJhc2VkIGFwcHJvYWNoIGRvZXNuJ3QgdG9sZXJhdGUgYW55IG1pc3Rha2UuXG4vLyBJdCdzIG11Y2ggc2FmZXIgdG8gdXNlIHRoZSBzYW1lIGNvdW50ZXIgZXZlcnl3aGVyZS5cblxudmFyIGdlbmVyYXRlQ2xhc3NOYW1lID0gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTsgLy8gRXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXNcblxuZXhwb3J0IHZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBkaXNhYmxlR2VuZXJhdGlvbjogZmFsc2UsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZSxcbiAganNzOiBqc3MsXG4gIHNoZWV0c0NhY2hlOiBudWxsLFxuICBzaGVldHNNYW5hZ2VyOiBzaGVldHNNYW5hZ2VyLFxuICBzaGVldHNSZWdpc3RyeTogbnVsbFxufTtcbmV4cG9ydCB2YXIgU3R5bGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdE9wdGlvbnMpO1xudmFyIGluamVjdEZpcnN0Tm9kZTtcblxuZnVuY3Rpb24gU3R5bGVzUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBpbmplY3RGaXJzdCA9IHByb3BzLmluamVjdEZpcnN0LFxuICAgICAgbG9jYWxPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluamVjdEZpcnN0XCJdKTtcblxuICB2YXIgb3V0ZXJPcHRpb25zID0gUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KTtcblxuICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBvdXRlck9wdGlvbnMsIGxvY2FsT3B0aW9ucyk7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyB8fCBjb250ZXh0LnNoZWV0c01hbmFnZXIsICdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gdXNlIHRoZSBTZXJ2ZXJTdHlsZVNoZWV0cyBBUEkgd2hlbiByZW5kZXJpbmcgb24gdGhlIHNlcnZlci4nKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCB8fCAhaW5qZWN0Rmlyc3QsICdNYXRlcmlhbC1VSTogeW91IGNhbm5vdCB1c2UgYSBjdXN0b20gaW5zZXJ0aW9uUG9pbnQgYW5kIDxTdHlsZXNDb250ZXh0IGluamVjdEZpcnN0PiBhdCB0aGUgc2FtZSB0aW1lLicpIDogdm9pZCAwO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFpbmplY3RGaXJzdCB8fCAhbG9jYWxPcHRpb25zLmpzcywgJ01hdGVyaWFsLVVJOiB5b3UgY2Fubm90IHVzZSB0aGUganNzIGFuZCBpbmplY3RGaXJzdCBwcm9wcyBhdCB0aGUgc2FtZSB0aW1lLicpIDogdm9pZCAwO1xuXG4gIGlmICghY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghaW5qZWN0Rmlyc3ROb2RlKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgICBpbmplY3RGaXJzdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdtdWktaW5qZWN0LWZpcnN0Jyk7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShpbmplY3RGaXJzdE5vZGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgY29udGV4dC5qc3MgPSBjcmVhdGUoe1xuICAgICAgcGx1Z2luczoganNzUHJlc2V0KCkucGx1Z2lucyxcbiAgICAgIGluc2VydGlvblBvaW50OiBpbmplY3RGaXJzdE5vZGVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cblxuU3R5bGVzUHJvdmlkZXIuZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlR2VuZXJhdGlvbjogZmFsc2UsXG4gIGluamVjdEZpcnN0OiBmYWxzZVxufTtcbmV4cG9ydCBkZWZhdWx0IFN0eWxlc1Byb3ZpZGVyOyIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnOyAvLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyBhdCB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG5cbnZhciBpbmRleENvdW50ZXIgPSAtMWU5O1xuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgaW5kZXhDb3VudGVyICs9IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoaW5kZXhDb3VudGVyIDwgMCwgWydNYXRlcmlhbC1VSTogeW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICByZXR1cm4gaW5kZXhDb3VudGVyO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuXG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4vbm9vcFRoZW1lJzsgLy8gU3VwcG9ydCBmb3IgdGhlIGpzcy1leHBhbmQgcGx1Z2luLlxuXG5mdW5jdGlvbiBhcnJheU1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhfdHlwZW9mKHN0eWxlc09yQ3JlYXRvcikgPT09ICdvYmplY3QnIHx8IHRoZW1pbmdFbmFibGVkLCBbJ01hdGVyaWFsLVVJOiB0aGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHRoZW1lLCBuYW1lKSB7XG4gICAgICB2YXIgc3R5bGVzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzdHlsZXMgPSB0aGVtaW5nRW5hYmxlZCA/IHN0eWxlc09yQ3JlYXRvcih0aGVtZSkgOiBzdHlsZXNPckNyZWF0b3I7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhlbWluZ0VuYWJsZWQgfHwgdGhlbWUgIT09IG5vb3BUaGVtZSwgWydNYXRlcmlhbC1VSTogdGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5hbWUgfHwgIXRoZW1lLm92ZXJyaWRlcyB8fCAhdGhlbWUub3ZlcnJpZGVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZXMgPSB0aGVtZS5vdmVycmlkZXNbbmFtZV07XG5cbiAgICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBbJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICAgIHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSA9IGRlZXBtZXJnZShzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0sIG92ZXJyaWRlc1trZXldLCB7XG4gICAgICAgICAgYXJyYXlNZXJnZTogYXJyYXlNZXJnZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN0eWxlc1dpdGhPdmVycmlkZXM7XG4gICAgfSxcbiAgICBvcHRpb25zOiB7fSxcbiAgICB0aGVtaW5nRW5hYmxlZDogdGhlbWluZ0VuYWJsZWRcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3R5bGVzQ3JlYXRvcjsiLCIvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IG5vb3BUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucywgc3R5bGVzT3B0aW9ucywge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvcHMsICdNYXRlcmlhbC1VSTogcHJvcGVydGllcyBtaXNzaW5nLicpIDogdm9pZCAwO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpLmF0dGFjaCgpO1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldCA9IGR5bmFtaWNTaGVldDtcbiAgICBzdGF0ZS5jbGFzc2VzID0gbWVyZ2VDbGFzc2VzKHtcbiAgICAgIGJhc2VDbGFzc2VzOiBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcyxcbiAgICAgIG5ld0NsYXNzZXM6IGR5bmFtaWNTaGVldC5jbGFzc2VzXG4gICAgfSk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChkeW5hbWljU2hlZXQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jbGFzc2VzID0gc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXM7XG4gIH1cblxuICBzaGVldE1hbmFnZXIucmVmcyArPSAxO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoX3JlZjMsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYzLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS5keW5hbWljU2hlZXQpIHtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQudXBkYXRlKHByb3BzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2goX3JlZjQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWY0LnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWY0LnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjQuc3R5bGVzQ3JlYXRvcjtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgc2hlZXRNYW5hZ2VyLnJlZnMgLT0gMTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICBtdWx0aUtleVN0b3JlLmRlbGV0ZShzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgICBzdHlsZXNPcHRpb25zLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LnJlbW92ZShzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5keW5hbWljU2hlZXQpIHtcbiAgICBzdHlsZXNPcHRpb25zLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHN0YXRlLmR5bmFtaWNTaGVldCk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LnJlbW92ZShzdGF0ZS5keW5hbWljU2hlZXQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jLCB2YWx1ZXMpIHtcbiAgdmFyIGtleSA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIHZhciBvdXRwdXQ7IC8vIFN0b3JlIFwiZ2VuZXJhdGlvblwiIGtleS4gSnVzdCByZXR1cm5zIGEgbmV3IG9iamVjdCBldmVyeSB0aW1lXG5cbiAgdmFyIGN1cnJlbnRLZXkgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sIHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIC8vIFwidGhlIGZpcnN0IHJlbmRlclwiLCBvciBcIm1lbW8gZHJvcHBlZCB0aGUgdmFsdWVcIlxuXG4gIGlmIChrZXkuY3VycmVudCAhPT0gY3VycmVudEtleSkge1xuICAgIGtleS5jdXJyZW50ID0gY3VycmVudEtleTtcbiAgICBvdXRwdXQgPSBmdW5jKCk7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgIG91dHB1dCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjdXJyZW50S2V5XSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICApO1xufVxuXG5mdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXhPcHRpb24gPSBvcHRpb25zLmNsYXNzTmFtZVByZWZpeCxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50LFxuICAgICAgX29wdGlvbnMkZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICBkZWZhdWx0VGhlbWUgPSBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPT09IHZvaWQgMCA/IG5vb3BUaGVtZSA6IF9vcHRpb25zJGRlZmF1bHRUaGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcIm5hbWVcIiwgXCJjbGFzc05hbWVQcmVmaXhcIiwgXCJDb21wb25lbnRcIiwgXCJkZWZhdWx0VGhlbWVcIl0pO1xuXG4gIHZhciBzdHlsZXNDcmVhdG9yID0gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpO1xuICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZSB8fCBjbGFzc05hbWVQcmVmaXhPcHRpb24gfHwgJ21ha2VTdHlsZXMnO1xuICBzdHlsZXNDcmVhdG9yLm9wdGlvbnMgPSB7XG4gICAgaW5kZXg6IGluY3JlbWVudCgpLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgbWV0YTogY2xhc3NOYW1lUHJlZml4LFxuICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gIH07XG4gIHZhciBsaXN0ZW5Ub1RoZW1lID0gc3R5bGVzQ3JlYXRvci50aGVtaW5nRW5hYmxlZCB8fCB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZyc7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSAobGlzdGVuVG9UaGVtZSA/IHVzZVRoZW1lKCkgOiBudWxsKSB8fCBkZWZhdWx0VGhlbWU7XG5cbiAgICB2YXIgc3R5bGVzT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpLCBzdHlsZXNPcHRpb25zMik7XG5cbiAgICB2YXIgaW5zdGFuY2UgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHN0YXRlOiB7fSxcbiAgICAgICAgc3R5bGVzQ3JlYXRvcjogc3R5bGVzQ3JlYXRvcixcbiAgICAgICAgc3R5bGVzT3B0aW9uczogc3R5bGVzT3B0aW9ucyxcbiAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICB9O1xuICAgICAgYXR0YWNoKGN1cnJlbnQsIHByb3BzKTtcbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jdXJyZW50ID0gY3VycmVudDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRldGFjaChjdXJyZW50KTtcbiAgICAgIH07XG4gICAgfSwgW3RoZW1lLCBzdHlsZXNDcmVhdG9yXSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGUuY3VycmVudCkge1xuICAgICAgICB1cGRhdGUoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFrZVN0eWxlczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==